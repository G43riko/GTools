!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("G43Lib",[],t):"object"==typeof exports?exports.G43Lib=t():e.G43Lib=t()}(self,(function(){return(()=>{var __webpack_modules__={5839:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(9787),t),i(n(5202),t),i(n(9126),t),i(n(5906),t),i(n(9572),t),i(n(5988),t),i(n(4620),t),i(n(4e3),t),i(n(3670),t),i(n(4761),t),i(n(4574),t),i(n(5776),t),i(n(508),t),i(n(5312),t),i(n(7584),t),i(n(5667),t),i(n(8835),t),i(n(1130),t),i(n(1103),t),i(n(8114),t),i(n(4861),t)},9126:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.initConfig=t.Gender=void 0,i(n(3547),t);var o=n(9878);Object.defineProperty(t,"Gender",{enumerable:!0,get:function(){return o.Gender}}),i(n(1903),t),i(n(6005),t),i(n(7826),t),i(n(8224),t),i(n(8917),t),i(n(4715),t),i(n(1628),t),i(n(5826),t),i(n(3388),t);var a=n(5988);Object.defineProperty(t,"initConfig",{enumerable:!0,get:function(){return a.initConfig}}),i(n(7953),t),i(n(6424),t),i(n(7191),t),i(n(6137),t),i(n(8835),t),i(n(1130),t),i(n(1103),t),i(n(8114),t)},1628:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileManager=void 0;var r=n(6005),i=function(){function e(){this.input=document.createElement("input"),this.input.setAttribute("type","file"),this.input.setAttribute("value","files"),this.input.setAttribute("class","hide"),this.link=document.createElement("a"),this.link.setAttribute("class","hide"),this.link.setAttribute("href","")}return e.prototype.saveFile=function(e,t,n){void 0===n&&(n=r.FileTypes.TXT),this.link.href=URL.createObjectURL(new Blob([t],{type:n})),this.link.download=e,this.link.click()},e.prototype.saveImage=function(e,t){this.link.href="string"==typeof t?t:t.src,this.link.download=e,this.link.click()},e.prototype.loadImage=function(e){this.input.onchange=function(t){var n=t.target.files;if(!(n.length<=0)){var r=new FileReader;r.onload=function(){var t=new Image;t.src=r.result,e(t,n[0])},r.readAsDataURL(n[0])}},this.input.click()},e.prototype.loadFile=function(e){this.input.onchange=function(t){var n=new FileReader,r=t.target.files;r.length>0&&(n.onload=function(){return e(n.result,r)},n.readAsText(r[0]))},this.input.click()},e.prototype.loadBinaryFile=function(e){this.input.onchange=function(t){var n=new FileReader,r=t.target.files;r.length>0&&(n.onload=function(){return e(n.result,r[0].name)},n.readAsBinaryString(r[0]))},this.input.click()},e}();t.FileManager=i},9638:function(e,t){"use strict";var n,r=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r};Object.defineProperty(t,"__esModule",{value:!0}),t.GLogger=t.GLoggerInstance=void 0;var o=function(){function e(e){this.context=e}return e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];a.print.apply(a,i(["log",this.context],e))},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];a.print.apply(a,i(["warn",this.context],e))},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];a.print.apply(a,i(["error",this.context],e))},e}();t.GLoggerInstance=o;var a=function(e){function t(t){return e.call(this,t)||this}return r(t,e),t.getLine=function(e){void 0===e&&(e=2);var t=new Error;if(t.stack){var n=t.stack.split("\n")[e].trim().match(/\(.*\)/);if(n&&n[0])return"at "+n[0]}return""},t.print=function(e,n){var r;void 0===n&&(n="");for(var o=[],a=2;a<arguments.length;a++)o[a-2]=arguments[a];var u=n&&("string"==typeof n?n:null===(r=null==n?void 0:n.constructor)||void 0===r?void 0:r.name),s=u&&u.match(t.skipRegexp);if(!s){var c=u?"["+u+"] ":"";console[e].apply(console,i([c],o))}},t.log=function(e,n){t.print("log",n,e)},t.skipContexts=["renderWorldStatic","CanvasDirective","WorldRendererService","viewport","WorldInputService"],t.skipRegexp=new RegExp(""+t.skipContexts.join("|"),"gi"),t}(o);t.GLogger=a},2235:function(e,t){"use strict";var n,r=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.GMap=void 0;var i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.get=function(t,n){return e.prototype.get.call(this,t)||n},t.prototype.getOrCreate=function(t,n){var r=e.prototype.get.call(this,t);return r||(this.set(t,n),n)},t}(Map);t.GMap=i},5906:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(1628),t),i(n(9638),t),i(n(2235),t),i(n(8917),t),i(n(4715),t),i(n(5826),t)},8917:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KeyValueCounter=void 0;var n=function(){function e(){this.data={},this.results=[],this.processed=!1}return e.prototype.add=function(e){e in this.data?this.data[e]++:this.data[e]=1,this.processed&&(this.processed=!1)},e.prototype.addAll=function(e){e.forEach(this.add,this)},e.prototype.getAll=function(){return this.processed||this.process(),this.results},e.prototype.getTopN=function(e){return this.processed||this.process(),this.results.slice(0,e)},e.prototype.getCount=function(){return this.getAll().length},e.prototype.process=function(){for(var e in this.data)this.data.hasOwnProperty(e)&&this.results.push({key:e,count:this.data[e]});this.results.sort((function(e,t){return t.count-e.count})),this.processed=!0},e}();t.KeyValueCounter=n},4715:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NumberCounter=void 0;var n=function(){function e(){this.min=1/0,this.max=-1/0,this.sum=0,this.numbers=[]}return e.prototype.add=function(e){this.numbers.push(e),this.min=Math.min(this.min,e),this.max=Math.max(this.max,e),this.sum+=e},e.prototype.getMin=function(){return this.min},e.prototype.getMax=function(){return this.max},e.prototype.getCount=function(){return this.numbers.length},e.prototype.getAverage=function(){return this.sum/this.numbers.length},e.prototype.addAll=function(e){e.forEach(this.add,this)},e}();t.NumberCounter=n},5826:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Paginator=void 0;var r=n(5988),i=function(){function e(e,t){void 0===t&&(t=r.GToolsConfig.PAGE_LIMIT),this.allItems=e,this.itemsPerPage=t,this.actualPage=0,this.lastPage=e?Math.floor(e.length/this.itemsPerPage):0,this.actList=this._reCalcList()}return e.prototype.getActualPage=function(){return this.actualPage+1},e.prototype.getPages=function(){return this.lastPage+1},e.prototype.getPagesAround=function(){return this.actualPage<2?[1,2,3,4,5]:this.actualPage>this.lastPage-3?[this.lastPage-3,this.lastPage-2,this.lastPage-1,this.lastPage,this.lastPage+1]:[this.actualPage-1,this.actualPage,this.actualPage+1,this.actualPage+2,this.actualPage+3]},e.prototype.getList=function(){return this.actList},e.prototype.goToNext=function(){return this.actualPage<this.lastPage?(this.actualPage++,this._reCalcList()):this.getList()},e.prototype.gotTo=function(e){return e>=0&&e<=this.lastPage?(this.actualPage=e,this._reCalcList()):this.getList()},e.prototype.goToPrev=function(){return this.actualPage>0?(this.actualPage--,this._reCalcList()):this.getList()},e.prototype.goToFirst=function(){return this.actualPage=0,this._reCalcList()},e.prototype.goToLast=function(){return this.actualPage=this.lastPage,this._reCalcList()},e.prototype._reCalcList=function(){var e=this.actualPage*this.itemsPerPage;return this.actList=this.allItems?this.allItems.slice(e,e+this.itemsPerPage):[],this.actList},e}();t.Paginator=i},9572:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},5988:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.GToolsConfig=t.initConfig=t.ClassGToolsConfig=void 0;var r=function(){return n||{URL_API:"",LANGUAGE:"",VERSION:"",PAGE_LIMIT:0}},i=function(){function e(){}return Object.defineProperty(e.prototype,"URL_API",{get:function(){return r().URL_API},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"PAGE_LIMIT",{get:function(){return r().PAGE_LIMIT},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"LANGUAGE",{get:function(){return r().LANGUAGE},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"VERSION",{get:function(){return r().VERSION},enumerable:!1,configurable:!0}),e}();t.ClassGToolsConfig=i,t.initConfig=function(e){n=e},t.GToolsConfig=new i},6141:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ALLOW_IMAGES_ONLY_WITH_ALLOWED_CORS=void 0,t.ALLOW_IMAGES_ONLY_WITH_ALLOWED_CORS=!0},9318:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Deprecated=void 0,t.Deprecated=function(e){return function(t,n,r){var i=t[n];r.value=function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];return console.warn("Method "+t.constructor.name+"."+n+" is deprecated. "+(e||"")),i.apply(t,r)}}}},1046:function(e,t){"use strict";var n,r=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.FinalClass=void 0,t.FinalClass=function(e){return function(e){function t(){for(var n=this.constructor,r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];if(n!==t)throw new Error("Cannot inherit from final class");return e.apply(this,r)||this}return r(t,e),t}(e)}},4620:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(9318),t),i(n(1046),t),i(n(693),t),i(n(5055),t),i(n(3899),t)},693:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Mapper=void 0,t.Mapper=function(e,t){return void 0===e&&(e={}),void 0===t&&(t="_"),function(n,r){if(delete n[r]){var i={enumerable:!0,configurable:!0},o=t+r;e&&("function"==typeof e.onGet?i.get=function(){return e.onGet(n[o])}:i.get=function(){return n[o]},"function"==typeof e.onSet?i.set=function(t){return n[o]=e.onSet(t)}:i.set=function(e){return n[o]=e}),Object.defineProperty(n,r,i)}}}},5055:function(e,t){"use strict";var n,r=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Singleton=void 0;var i={};t.Singleton=function(e){var t=e.name;return function(e){function n(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=e.apply(this,n)||this;if(i[t])throw new Error("Instance of "+t+" is already created");return i[t]=o,o}return r(n,e),n}(e)}},3899:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Watch=void 0,t.Watch=function(e,t){var n=t&&t.prefix||"_";return function(r,i){delete r[i]&&Object.defineProperty(r,i,{get:function(){return r[n+i]},set:function(t){e&&(r[n+i]=e(t,r[n+i])),r[n+i]=t},enumerable:!t||"boolean"!=typeof t.enumerable||t.enumerable,configurable:!t||"boolean"!=typeof t.configurable||t.configurable})}}},4e3:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CanvasManager=void 0;var r=n(2089),i=function(){function e(t,n,i){if(t instanceof HTMLCanvasElement)this.localCanvas=t,n&&i&&this.setCanvasSize(n,i);else if(t instanceof HTMLImageElement)this.localCanvas=e.imageToCanvas(t);else{if("undefined"==typeof document)throw new r.NotBrowserException;this.localCanvas=document.createElement("canvas"),t&&n&&this.setCanvasSize(t,n)}this.localContext=this.localCanvas.getContext("2d")}return Object.defineProperty(e.prototype,"canvas",{get:function(){return this.localCanvas},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"context",{get:function(){return this.localContext},enumerable:!1,configurable:!0}),e.clearCanvas=function(e){e.clearRect(0,0,e.canvas.width,e.canvas.height)},e.setCanvasSize=function(e,t,n){void 0===t&&(t=window.innerWidth),void 0===n&&(n=window.innerHeight),e.width=t,e.height=n},e.setShadow=function(e,t,n,r,i){e.shadowColor=r,e.shadowBlur=i,e.shadowOffsetX=t,e.shadowOffsetY=n},e.imageToCanvas=function(e){if("undefined"==typeof document)throw new r.NotBrowserException;var t=document.createElement("canvas");t.width=e.width,t.height=e.height;var n=t.getContext("2d");return n&&n.drawImage(e,0,0),t},e.setLineDash=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];"function"==typeof e.setLineDash&&e.setLineDash(t)},e.calcTextWidth=function(e,t,n){return n&&(e.font=n),e.measureText(t).width},e.canvasToImage=function(e,t){void 0===t&&(t="image/png");var n=new Image;return n.src=e.toDataURL(t),n.width=e.width,n.height=e.height,n},e.prototype.getImage=function(){return e.canvasToImage(this.localCanvas)},e.prototype.setShadow=function(t,n,r,i){this.localContext&&e.setShadow(this.localContext,t,n,r,i)},e.prototype.show=function(e){void 0===e&&(e="image/png"),window.open(this.localCanvas.toDataURL(e),"_blank")},e.prototype.clearCanvas=function(){this.localContext&&e.clearCanvas(this.localContext)},e.prototype.setCanvasSize=function(t,n){void 0===t&&(t=window.innerWidth),void 0===n&&(n=window.innerHeight),e.setCanvasSize(this.localCanvas,t,n)},e.prototype.appendTo=function(e){return e.appendChild(this.localCanvas),e},e}();t.CanvasManager=i},3670:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CanvasUtils=void 0;var r=n(4e3),i=n(6577);function o(e,t){t?r.CanvasManager.setShadow(e,t.x,t.y,t.color,t.blur):r.CanvasManager.setShadow(e,0,0,"black",0)}function a(e){e.shadow&&o(e.ctx,e.shadow),e.bgImage?(e.ctx.save(),e.ctx.clip(),e.bgImage instanceof HTMLImageElement?e.ctx.drawImage(e.bgImage,e.x,e.y,e.width,e.height):e.ctx.drawImage(e.bgImage.img,e.bgImage.x,e.bgImage.y,e.bgImage.w,e.bgImage.h,e.x,e.y,e.width,e.height),e.ctx.restore()):e.fill&&(e.ctx.fillStyle=e.fillColor,e.ctx.fill()),e.shadow&&o(e.ctx),e.ctx.lineCap=e.lineCap,e.ctx.lineJoin=e.joinType,"function"==typeof e.ctx.setLineDash&&e.ctx.setLineDash(e.lineDash),e.draw&&(e.ctx.lineWidth=e.borderWidth,e.ctx.strokeStyle=e.borderColor,e.ctx.stroke())}function u(e,t){var n=$.extend(e,t),r=function(e,t,r){if(void 0!==n[e]){var o=n[e];i.Checkers.isNumber(o)?(n[t]=o,n[r]=o):Array.isArray(o)?(n[t]=o[0],n[r]=o[1]):(n[t]=o.x,n[r]=o.y)}};return r("size","width","size"),r("position","x","y"),n.center&&(n.x-=n.width>>1,n.y-=n.height>>1),n}function s(e,t){return void 0!==e.x&&void 0!==e.y||void 0!==e.position||console.error("MSG_TRY_DRAW_WITHOUT_POSITION: "+t),void 0!==e.width&&void 0!==e.height||void 0!==e.size||console.error("MSG_TRY_DRAW_WITHOUT_SIZE: "+t),(e.width<=0||e.height<=0)&&console.error("MSG_TRY_DRAW_WITH_NEG_POSITION: "+t),function(e){return{borderColor:"black",borderWidth:1,center:!1,ctx:e.ctx,draw:void 0!==e.borderColor||void 0!==e.borderWidth,endAngle:2*Math.PI,fill:void 0!==e.fillColor,fillColor:"white",height:0,joinType:"bevel",lineCap:"round",lineDash:[],offset:null,radius:{tl:0,tr:0,br:0,bl:0},startAngle:0,width:0,x:0,y:0}}(e)}var c=function(){function e(){}return e.doArc=function(e){var t=u(s(e,"Arc"),e);t.ctx.beginPath(),"function"==typeof t.ctx.ellipse?t.ctx.ellipse(t.x+(t.width>>1),t.y+(t.height>>1),t.width>>1,t.height>>1,0,t.startAngle,t.endAngle):t.ctx.rect(t.x+(t.width>>1),t.y+(t.height>>1),t.width>>1,t.height>>1),a(t)},e.doRect=function(e){var t=s(e,"Rect");if(void 0!==e.radius)if(i.Checkers.isNumber(e.radius))e.radius={bl:e.radius,br:e.radius,tl:e.radius,tr:e.radius};else for(var n in t.radius)t.radius.hasOwnProperty(n)&&(e.radius[n]=e.radius[n]||t.radius[n]);var r=u(t,e);r.ctx.beginPath(),r.ctx.moveTo(r.x+r.radius.tl,r.y),r.ctx.lineTo(r.x+r.width-r.radius.tr,r.y),r.ctx.quadraticCurveTo(r.x+r.width,r.y,r.x+r.width,r.y+r.radius.tr),r.ctx.lineTo(r.x+r.width,r.y+r.height-r.radius.br),r.ctx.quadraticCurveTo(r.x+r.width,r.y+r.height,r.x+r.width-r.radius.br,r.y+r.height),r.ctx.lineTo(r.x+r.radius.bl,r.y+r.height),r.ctx.quadraticCurveTo(r.x,r.y+r.height,r.x,r.y+r.height-r.radius.bl),r.ctx.lineTo(r.x,r.y+r.radius.tl),r.ctx.quadraticCurveTo(r.x,r.y,r.x+r.radius.tl,r.y),r.ctx.closePath(),a(r)},e}();t.CanvasUtils=c},6577:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Checkers=void 0;var a=o(n(1025)),u=function(){function e(){}return e.isFunction=a.isFunction,e.isString=a.isString,e.isObject=a.isObject,e.isNumber=a.isNumber,e.isBoolean=a.isBoolean,e.isArray=a.isArray,e.isEmpty=a.isEmpty,e.isInt=a.isInt,e.isFloat=a.isFloat,e.isUndefined=a.isUndefined,e.isElement=a.isElement,e}();t.Checkers=u},4761:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Checkers=void 0;var a=o(n(1025)),u=function(){function e(){}return e.isFunction=a.isFunction,e.isString=a.isString,e.isObject=a.isObject,e.isNumber=a.isNumber,e.isBoolean=a.isBoolean,e.isArray=a.isArray,e.isEmpty=a.isEmpty,e.isInt=a.isInt,e.isFloat=a.isFloat,e.isUndefined=a.isUndefined,e.isElement=a.isElement,e}();t.Checkers=u},4574:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DomGet=void 0;var n="undefined"!=typeof document?document:null,r=function(){function e(){}return e.setContext=function(e){n=e},e.byClass=function(e,t){return void 0===t&&(t=n),t.getElementsByClassName(e)},e.byLink=function(e,t){return void 0===t&&(t=n),t.querySelectorAll('a[attr="'+e+'"]')},e.byId=function(e,t){return void 0===t&&(t=n),t.getElementById(e)},e.byName=function(e,t){return void 0===t&&(t=n),t.getElementsByName(e)},e.byTag=function(e,t){return void 0===t&&(t=n),t.getElementsByTagName(e)},e}();t.DomGet=r},1903:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Encodings=void 0,function(e){e.UTF8="utf8",e.UTF16="utf16",e.UNICODE="unicode",e.ASCII="ascii",e.UCS2="ucs2"}(t.Encodings||(t.Encodings={}))},6005:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileTypes=void 0,function(e){e.CSS="text/css",e.HTML="text/html",e.JS="application/javascript",e.MP3="audio/mpeg",e.MP4="video/mp4",e.OGG="application/ogg",e.OGV="video/ogg",e.OGA="audio/ogg",e.TXT="text/plain",e.WAV="audio/x-wav",e.WEBM="video/webm"}(t.FileTypes||(t.FileTypes={}))},7826:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HttpStatusCodes=void 0,function(e){e[e.CONTINUE=100]="CONTINUE",e[e.SWITCHING_PROTOCOLS=101]="SWITCHING_PROTOCOLS",e[e.OK=200]="OK",e[e.CREATED=201]="CREATED",e[e.ACCEPTED=202]="ACCEPTED",e[e.NON_AUTHORITATIVE_INFORMATION=203]="NON_AUTHORITATIVE_INFORMATION",e[e.NO_CONTENT=204]="NO_CONTENT",e[e.RESET_CONTENT=205]="RESET_CONTENT",e[e.PARTIAL_CONTENT=206]="PARTIAL_CONTENT",e[e.MULTIPLE_CHOICES=300]="MULTIPLE_CHOICES",e[e.MOVED_PERMANENTLY=301]="MOVED_PERMANENTLY",e[e.FOUND=302]="FOUND",e[e.SEE_OTHER=303]="SEE_OTHER",e[e.NOT_MODIFIED=304]="NOT_MODIFIED",e[e.USE_PROXY=305]="USE_PROXY",e[e.TEMPORARY_REDIRECT=307]="TEMPORARY_REDIRECT",e[e.BAD_REQUEST=400]="BAD_REQUEST",e[e.UNAUTHORIZED=401]="UNAUTHORIZED",e[e.PAYMENT_REQUIRED=402]="PAYMENT_REQUIRED",e[e.FORBIDDEN=403]="FORBIDDEN",e[e.NOT_FOUND=404]="NOT_FOUND",e[e.METHOD_NOT_ALLOWED=405]="METHOD_NOT_ALLOWED",e[e.NOT_ACCEPTABLE=406]="NOT_ACCEPTABLE",e[e.PROXY_AUTHENTICATION_REQUIRED=407]="PROXY_AUTHENTICATION_REQUIRED",e[e.REQUEST_TIMEOUT=408]="REQUEST_TIMEOUT",e[e.CONFLICT=409]="CONFLICT",e[e.GONE=410]="GONE",e[e.LENGTH_REQUIRED=411]="LENGTH_REQUIRED",e[e.PRECONDITION_FAILED=412]="PRECONDITION_FAILED",e[e.REQUEST_ENTITY_TOO_LARGE=413]="REQUEST_ENTITY_TOO_LARGE",e[e.REQUEST_URI_TOO_LONG=414]="REQUEST_URI_TOO_LONG",e[e.UNSUPPORTED_MEDIA_TYPE=415]="UNSUPPORTED_MEDIA_TYPE",e[e.REQUESTED_RANGE_NOT_SATISFIABLE=416]="REQUESTED_RANGE_NOT_SATISFIABLE",e[e.EXPECTATION_FAILED=417]="EXPECTATION_FAILED",e[e.UNPROCESSABLE_ENTITY=422]="UNPROCESSABLE_ENTITY",e[e.TOO_MANY_REQUESTS=429]="TOO_MANY_REQUESTS",e[e.INTERNAL_SERVER_ERROR=500]="INTERNAL_SERVER_ERROR",e[e.NOT_IMPLEMENTED=501]="NOT_IMPLEMENTED",e[e.BAD_GATEWAY=502]="BAD_GATEWAY",e[e.SERVICE_UNAVAILABLE=503]="SERVICE_UNAVAILABLE",e[e.GATEWAY_TIMEOUT=504]="GATEWAY_TIMEOUT",e[e.HTTP_VERSION_NOT_SUPPORTED=505]="HTTP_VERSION_NOT_SUPPORTED"}(t.HttpStatusCodes||(t.HttpStatusCodes={}))},8224:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KeysOld=t.Keys=void 0,function(e){e.ARROW_UP="ArrowUp",e.ARROW_DOWN="ArrowDown",e.ARROW_LEFT="ArrowLeft",e.ARROW_RIGHT="ArrowRight",e.DELETE="Delete",e.CONTROL="ControlLeft",e.SHIFT="ShiftLeft",e.PAGE_UP="PageUp",e.PAGE_DOWN="PageDown",e.ESCAPE="Escape",e.W="KeyW",e.F="KeyF",e.A="KeyA",e.P="KeyP",e.S="KeyS",e.D="KeyD",e.R="KeyR"}(t.Keys||(t.Keys={}));var n=function(){function e(){}return e.ENTER=13,e.TAB=9,e.W=87,e.A=65,e.S=83,e.D=68,e.Q=81,e.E=69,e.F=70,e.LCONTROL=17,e.ESCAPE=27,e.LALT=18,e.LSHIFT=16,e.SPACE=32,e.ARROW_UP=38,e.ARROW_DOWN=40,e.ARROW_RIGHT=39,e.ARROW_LEFT=37,e}();t.KeysOld=n},2089:function(e,t){"use strict";var n,r=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.NotBrowserException=void 0;var i=function(e){function t(n){var r=e.call(this,"App is not running in browser"+function(e){return e?": "+e:""}(n)+"!")||this;return Object.setPrototypeOf(r,t.prototype),r}return r(t,e),t}(Error);t.NotBrowserException=i},8022:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(5839),t)},5312:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(7264),t),i(n(6606),t),i(n(5413),t),i(n(4932),t),i(n(4777),t),i(n(4261),t)},7264:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6606:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},5413:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4932:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Vector2=void 0;var n=function(){function e(e,t){void 0===e&&(e=0),void 0===t&&(t=0),this.x=e,this.y=t}return Object.defineProperty(e,"ZERO",{get:function(){return new e(0,0)},enumerable:!1,configurable:!0}),Object.defineProperty(e,"ONE",{get:function(){return new e(1,1)},enumerable:!1,configurable:!0}),e.prototype.isZero=function(){return 0===this.x&&0===this.y},e.equals=function(e,t){return e===t||e.x===t.x&&e.y===t.y},e.sub=function(t,n){return new e(t.x-n.x,t.y-n.y)},e.isVisible=function(e,t,n,r,i,o){return n-Math.atan2(o-t,i-e)<=r},e.angleBetweenPoints=function(e,t,n,r,i,o){return Math.atan2(r-t,n-e)-Math.atan2(o-t,i-e)},Object.defineProperty(e.prototype,"avg",{get:function(){return(this.x+this.y)/2},enumerable:!1,configurable:!0}),e.sum=function(t,n){return new e(t.x+n.x,t.y+n.y)},e.mulNum=function(t,n){return new e(t.x*n,t.y*n)},e.min=function(t,n){return new e(Math.min(t.x,n.x),Math.min(t.y,n.y))},e.max=function(t,n){return new e(Math.max(t.x,n.x),Math.max(t.y,n.y))},e.dist=function(e,t){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))},e.prototype.getNormalized=function(){return this.clone().normalize()},Object.defineProperty(e.prototype,"length",{get:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},enumerable:!1,configurable:!0}),e.prototype.clone=function(){return new e(this.x,this.y)},e.prototype.normalize=function(){var e=this.length;return this.x/=e,this.y/=e,this},e.prototype.mul=function(e){return"number"==typeof e?(this.x*=e,this.y*=e):(this.x*=e.x,this.y*=e.y),this},e.prototype.add=function(e){return this.x+=e.x,this.y+=e.y,this},e.prototype.sub=function(e){return this.x-=e.x,this.y-=e.y,this},e.from=function(t,n){return void 0===n&&(n=t),new e(t,n)},e.prototype.set=function(e){return this.x=e.x,this.y=e.y,this},e}();t.Vector2=n},3388:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Vector2f=void 0;var n=function(e,t,n){"number"==typeof n?e(t,n):"number"==typeof t?e(t,t):e(t.x,t.y)},r=function(){function e(e,t){this.y=0,this.x=0,this.x=e,this.y=t}return e.prototype.set=function(e,t){var r=this;return n((function(e,t){r.x=e,r.y=t}),e,t),this},e.prototype.add=function(e,t){var r=this;return n((function(e,t){r.x+=e,r.y+=t}),e,t),this},e.prototype.div=function(e,t){var r=this;return n((function(e,t){r.x/=e,r.y/=t}),e,t),this},e.prototype.mul=function(e,t){var r=this;return n((function(e,t){r.x*=e,r.y*=t}),e,t),this},e.prototype.sub=function(e,t){var r=this;return n((function(e,t){r.x-=e,r.y-=t}),e,t),this},e}();t.Vector2f=r},4777:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Vector3=void 0;var n=function(){function e(e,t,n){void 0===e&&(e=0),void 0===t&&(t=0),void 0===n&&(n=0),this.x=e,this.y=t,this.z=n}return Object.defineProperty(e,"UP",{get:function(){return new e(0,1,0)},enumerable:!1,configurable:!0}),Object.defineProperty(e,"ZERO",{get:function(){return new e(0,0,0)},enumerable:!1,configurable:!0}),Object.defineProperty(e,"ONE",{get:function(){return new e(1,1,1)},enumerable:!1,configurable:!0}),e.prototype.toArray=function(){return[this.x,this.y,this.z]},e.equals=function(e,t){return e===t||e.x===t.x&&e.y===t.y&&e.z===t.z},e.sub=function(t,n){return new e(t.x-n.x,t.y-n.y,t.z-n.z)},Object.defineProperty(e.prototype,"avg",{get:function(){return(this.x+this.y+this.z)/3},enumerable:!1,configurable:!0}),e.sum=function(t,n){return new e(t.x+n.x,t.y+n.y,t.z+n.z)},e.mulNum=function(t,n){return new e(t.x*n,t.y*n,t.z*n)},e.prototype.sum=function(){return this.x+this.y+this.z},e.mul=function(t,n){return new e(t.x+n.x,t.y+n.y,t.z+n.z)},e.min=function(t,n){return new e(Math.min(t.x,n.x),Math.min(t.y,n.y),Math.min(t.z,n.z))},e.createFromSphericalCoords=function(t,n,r){var i=Math.sin(n)*t;return new e(i*Math.sin(r),Math.cos(n)*t,i*Math.cos(r))},e.max=function(t,n){return new e(Math.max(t.x,n.x),Math.max(t.y,n.y),Math.max(t.z,n.z))},e.dist=function(e,t){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)+Math.pow(e.z-t.z,2))},e.normalize=function(e){var t=Math.sqrt(e.x*e.x+e.y*e.y+e.z*e.z);return e.x/=t,e.y/=t,e.z/=t,e},e.prototype.getNormalized=function(){return this.clone().normalize()},Object.defineProperty(e.prototype,"length",{get:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},enumerable:!1,configurable:!0}),e.prototype.clone=function(){return new e(this.x,this.y,this.z)},e.prototype.normalize=function(){var e=this.length;return this.x/=e,this.y/=e,this.z/=e,this},e.prototype.mul=function(e){return"number"==typeof e?(this.x*=e,this.y*=e,this.z*=e):(this.x*=e.x,this.y*=e.y,this.z*=e.z),this},e.prototype.add=function(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this},e.prototype.sub=function(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this},e.fromArray=function(t){return new e(t[0],t[1],t[2])},e.from=function(t,n,r){return void 0===n&&(n=t),void 0===r&&(r=t),new e(t,n,r)},e.isVector=function(e){return e&&!isNaN(e.x)&&!isNaN(e.y)&&!isNaN(e.z)},e.prototype.set=function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this},e}();t.Vector3=n},4261:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Vector4=void 0;var n=function(){function e(e,t,n,r){void 0===e&&(e=0),void 0===t&&(t=0),void 0===n&&(n=0),void 0===r&&(r=0),this.x=e,this.y=t,this.z=n,this.w=r}return Object.defineProperty(e,"ZERO",{get:function(){return new e(0,0,0,0)},enumerable:!1,configurable:!0}),Object.defineProperty(e,"ONE",{get:function(){return new e(1,1,1,1)},enumerable:!1,configurable:!0}),e.prototype.toArray=function(){return[this.x,this.y,this.z,this.w]},e.equals=function(e,t){return e===t||e.x===t.x&&e.y===t.y&&e.z===t.z&&e.w===t.w},Object.defineProperty(e.prototype,"avg",{get:function(){return(this.x+this.y+this.z+this.w)/4},enumerable:!1,configurable:!0}),e.min=function(t,n){return new e(Math.min(t.x,n.x),Math.min(t.y,n.y),Math.min(t.z,n.z),Math.min(t.w,n.w))},e.max=function(t,n){return new e(Math.max(t.x,n.x),Math.max(t.y,n.y),Math.max(t.z,n.z),Math.max(t.w,n.w))},e.dist=function(e,t){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)+Math.pow(e.z-t.z,2)+Math.pow(e.w-t.w,2))},e.normalize=function(e){var t=Math.sqrt(e.x*e.x+e.y*e.y+e.z*e.z+e.w*e.w);return e.x/=t,e.y/=t,e.z/=t,e.w/=t,e},e.prototype.getNormalized=function(){return this.clone().normalize()},Object.defineProperty(e.prototype,"length",{get:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},enumerable:!1,configurable:!0}),e.prototype.clone=function(){return new e(this.x,this.y,this.z,this.w)},e.prototype.normalize=function(){var e=this.length;return this.x/=e,this.y/=e,this.z/=e,this.w/=e,this},e.prototype.mul=function(e){return"number"==typeof e?(this.x*=e,this.y*=e,this.z*=e,this.w*=e):(this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w),this},e.prototype.add=function(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this},e.prototype.sub=function(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this},e.fromArray=function(t){return new e(t[0],t[1],t[2],t[3])},e.from=function(t,n,r,i){return void 0===n&&(n=t),void 0===r&&(r=n),void 0===i&&(i=r),new e(t,n,r,i)},e.isVector=function(e){return e&&!isNaN(e.x)&&!isNaN(e.y)&&!isNaN(e.z)&&!isNaN(e.w)},e.prototype.setFromValues=function(e,t,n,r){return this.x=e,this.y=t,this.z=n,this.w=r,this},e.prototype.set=function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w,this},e}();t.Vector4=n},4491:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SlovakStemmer=void 0;var n=function(){function e(){}return e.steme=function(e){var t,n,r,i=(t=function(e){var t=e.length;if(t>9&&e.endsWith("ejšieho")||e.endsWith("ejšiemu"))return e.substring(0,t-7);if(t>8&&(e.endsWith("ejších")||e.endsWith("encoch")||e.endsWith("ejšími")||e.endsWith("encami")))return e.substring(0,t-6);if(t>7&&(e.endsWith("ejšia")||e.endsWith("atami")||e.endsWith("atách")||e.endsWith("eniec")||e.endsWith("encom")||e.endsWith("ejšom")||e.endsWith("ejším")||e.endsWith("ejšej")||e.endsWith("ejšou")||e.endsWith("ejšiu")||e.endsWith("ejšie")))return e.substring(0,t-5);if(t>6&&(e.endsWith("eťom")||e.endsWith("iami")||e.endsWith("atám")||e.endsWith("aťom")||e.endsWith("ovia")||e.endsWith("iach")||e.endsWith("atám")||e.endsWith("ence")||e.endsWith("ieho")||e.endsWith("iemu")||e.endsWith("ieme")||e.endsWith("iete")||e.endsWith("ejší")||e.endsWith("enie")))return e.substring(0,t-4);if(t>5&&(e.endsWith("ich")||e.endsWith("eho")||e.endsWith("ych")||e.endsWith("ích")||e.endsWith("ého")||e.endsWith("emi")||e.endsWith("ému")||e.endsWith("emu")||e.endsWith("ími")||e.endsWith("imi")||e.endsWith("ách")||e.endsWith("ých")||e.endsWith("ami")||e.endsWith("ovi")||e.endsWith("ieť")||e.endsWith("ieš")||e.endsWith("ejú")||e.endsWith("ajú")||e.endsWith("ujú")||e.endsWith("ejú")||e.endsWith("eme")||e.endsWith("íte")||e.endsWith("íme")||e.endsWith("ými")||e.endsWith("ymi")||e.endsWith("ach")||e.endsWith("iam")||e.endsWith("iac")||e.endsWith("ite")||e.endsWith("ili")||e.endsWith("ila")||e.endsWith("ilo")||e.endsWith("ime")||e.endsWith("och")))return e.substring(0,t-3);if(t>4&&(e.endsWith("ím")||e.endsWith("ám")||e.endsWith("am")||e.endsWith("us")||e.endsWith("ým")||e.endsWith("ym")||e.endsWith("mi")||e.endsWith("ou")||e.endsWith("om")||e.endsWith("ej")||e.endsWith("ov")||e.endsWith("ia")||e.endsWith("ie")||e.endsWith("iu")||e.endsWith("im")||e.endsWith("ho")||e.endsWith("mu")||e.endsWith("me")||e.endsWith("te")||e.endsWith("ať")||e.endsWith("aš")||e.endsWith("úť")||e.endsWith("iť")||e.endsWith("íš")||e.endsWith("iš")||e.endsWith("il")||e.endsWith("úc")||e.endsWith("eš")))return e.substring(0,t-2);if(t>3)switch(e[t-1]){case"a":case"e":case"i":case"o":case"u":case"ú":case"y":case"á":case"é":case"í":case"ý":return e.substring(0,t-1)}return e}((r=e).length>6&&r.startsWith("naj")?r.substr(3,r.length):r),(n=t.length)>5&&t.endsWith("in")||t.endsWith("ov")?t.substr(0,n-2):t);return i.length?function(e){var t=e.length;switch(e[t-1]){case"c":case"č":return e.replace(/./g,(function(e,n){return n===t-1?e:"k"}));case"ľ":return e.replace(/./g,(function(e,n){return n===t-1?e:"l"}));case"ň":return e.replace(/./g,(function(e,n){return n===t-1?e:"n"}));case"ť":return e.replace(/./g,(function(e,n){return n===t-1?e:"t"}))}return t>3&&"i"===e[t-3]&&("e"===e[t-2]||"a"===e[t-2]||"u"===e[t-2])?e.replace(/./g,(function(n,r){return r===t-3?e[t-2]:r===t-2?e[t-1]:n})):e}(i):i},e}();t.SlovakStemmer=n},4701:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ajax=void 0;var n=function(e){this.ajaxHandler=e};t.ajax=function(e){var t=e.method,r=void 0===t?"GET":t,i=e.url,o=e.onResponse,a=e.content,u=e.headers,s=void 0===u?{}:u,c=new XMLHttpRequest;return c.onreadystatechange=function(){4!==c.readyState||200!==c.status&&201!==c.status||"function"==typeof o&&o(c.responseText)},c.open(r,i,!0),Object.entries(s).forEach((function(e){return c.setRequestHeader(e[0],e[1])})),c.send(a),new n(c)}},508:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(4701),t),i(n(6546),t),i(n(4491),t)},6546:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getAsNumber=t.getAsString=void 0,t.getAsString=function(e){if("string"!=typeof e)throw new Error("Variable with value "+e+" is not a string");return e},t.getAsNumber=function(e){if("number"!=typeof e)throw new Error("Variable with value "+e+" is not a number");return e}},8718:function(e,t,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r};Object.defineProperty(t,"__esModule",{value:!0}),t.Color=void 0;var i=n(7727);function o(e){console.assert(e>=0),console.assert(e<=255)}var a=function(){function e(e,t,n,r){void 0===r&&(r=255),this.red=e,this.green=t,this.blue=n,this.alpha=r,o(e),o(t),o(n),o(r)}return e.fromHex=function(t){var n=i.hex2rgb(t);return new(e.bind.apply(e,r([void 0],n)))},e.fromInt=function(t){var n=i.int2rgb(t);return new(e.bind.apply(e,r([void 0],n)))},Object.defineProperty(e.prototype,"rgb",{get:function(){return[this.red,this.green,this.blue]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rgbString",{get:function(){return"rgb("+this.red+", "+this.green+", "+this.blue+")"},enumerable:!1,configurable:!0}),e.prototype.normalized=function(){return this.red>1||this.green>1||this.blue>1||this.alpha>1?new e(this.red/255,this.green/255,this.blue/255,this.alpha/255):this},Object.defineProperty(e.prototype,"rgba",{get:function(){return[this.red,this.green,this.blue,this.alpha]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"hex",{get:function(){return i.rgb2hex(Math.floor(this.red),Math.floor(this.green),Math.floor(this.blue))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"int",{get:function(){return i.rgb2int(this.red,this.green,this.blue)},enumerable:!1,configurable:!0}),e.BLACK=new e(0,0,0),e.WHITE=new e(255,255,255),e.GRAY=new e(128,128,128),e.RED=new e(255,0,0),e.GREEN=new e(0,255,0),e.BLUE=new e(0,0,255),e}();t.Color=a},9878:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GenderClass=t.Gender=t.parseGender=void 0;var n,r=/^(male|man|muz|boy|chlapec|m)$/g,i=/^(female|woman|zena|girl|dievca|f|w|z)$/g;function o(e){if(e){var t=e.trim().toLowerCase().replace("ž","z").replace("č","c");return t.match(r)?n.MAN:t.match(i)?n.WOMAN:void 0}}t.parseGender=o,function(e){e.MAN="MAN",e.WOMAN="WOMAN"}(n=t.Gender||(t.Gender={}));var a=function(){function e(){}return e.parse=o,e}();t.GenderClass=a},5667:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(9878),t),i(n(8718),t)},9787:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(4163),t),i(n(6689),t),i(n(1294),t),i(n(3451),t),i(n(9343),t),i(n(8519),t),i(n(7652),t),i(n(4491),t),i(n(6577),t),i(n(4e3),t),i(n(4574),t)},8620:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pointLine2dClosest=void 0,t.pointLine2dClosest=function(e,t,n,r,i,o){var a=n-e,u=r-t,s=((i-e)*a+(o-t)*u)/(a*a+u*u);return s<0?{x:e,y:t}:s>1?{x:n,y:r}:{x:e+s*a,y:t+s*u}}},1847:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pointCircle2dCollision=t.pointRectMinMax2dCollision=t.pointRect2dCollision=t.circleCircle2dCollision=t.rectRect2dCollision=t.lineLine2dCollision=t.lineRectangle2dCollision=t.circleRect2dCollision=void 0;var r=n(2653);function i(e,t,n,r,i,o,a,u){var s=(n-e)*(u-o)-(r-t)*(a-i),c=(t-o)*(a-i)-(e-i)*(u-o),l=(t-o)*(n-e)-(e-i)*(r-t);if(0===s)return 0===c&&0===l;var f=c/s,d=l/s;return f>=0&&f<=1&&d>=0&&d<=1}function o(e,t,n,r,i,o){return e>=n&&t>=r&&e<=n+i&&t<=r+o}t.circleRect2dCollision=function(e,t,n,r,i,o,a){var u=Math.abs(e-r),s=Math.abs(t-i);return!(u>o/2+n)&&(!(s>a/2+n)&&(u<=o/2||(s<=a/2||Math.pow(u-r/2,2)+Math.pow(s-i/2,2)<=Math.pow(n,2))))},t.lineRectangle2dCollision=function(e,t,n,r,a,u,s,c){return o(e,t,a,u,s,c)||o(n,r,a,u,s,c)||i(e,t,n,r,a,u,a+s,u+c)||i(e,t,n,r,a+s,u,a,u+c)},t.lineLine2dCollision=i,t.rectRect2dCollision=function(e,t,n,r,i,o,a,u){return i+a>=e&&o+u>=t&&i<=e+n&&o<=t+r},t.circleCircle2dCollision=function(e,t,n,i,o,a){return r.pointPoint2dDistance(e,t,i,o)<=n+a},t.pointRect2dCollision=o,t.pointRectMinMax2dCollision=function(e,t,n,r,i,o){return e>=n&&t>=r&&e<=i&&t<=o},t.pointCircle2dCollision=function(e,t,n,i,o){return r.pointPoint2dDistance(e,t,n,i)<=o}},2653:(e,t)=>{"use strict";function n(e,t,n,r){var i=e-n,o=t-r;return i*i+o*o}function r(e,t,n,r,i,o){var a,u,s=n-e,c=r-t,l=s*s+c*c,f=-1;0!==l&&(f=((i-e)*s+(o-t)*c)/l),f<0?(a=e,u=t):f>1?(a=n,u=r):(a=e+f*s,u=t+f*c);var d=i-a,h=o-u;return d*d+h*h}Object.defineProperty(t,"__esModule",{value:!0}),t.pointLineSqrt2dDistance=t.pointLine2dDistance=t.pointPointSqrt2dDistance=t.pointPoint2dDistance=void 0,t.pointPoint2dDistance=function(e,t,r,i){return Math.sqrt(n(e,t,r,i))},t.pointPointSqrt2dDistance=n,t.pointLine2dDistance=function(e,t,n,i,o,a){return Math.sqrt(r(e,t,n,i,o,a))},t.pointLineSqrt2dDistance=r},8707:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.vectorPoint3dDistance=t.pointNormalPlane3dDistance=t.pointLine3dDistance=t.pointPointSqr3dDistance=t.pointPoint3dDistance=void 0;var r=n(4777);function i(e,t,n,r,i,a){return Math.sqrt(o(e,t,n,r,i,a))}function o(e,t,n,r,i,o){var a=e-r,u=t-i,s=n-o;return a*a+u*u+s*s}function a(e,t,n,r,i,o,a,u,s){var c=e-r,l=t-i,f=n-o,d=r-a,h=i-u,p=o-s,v=l*p-f*h,y=f*d-c*p,m=c*h-l*d;return Math.sqrt(v*v+y*y+m*m)/Math.sqrt(c*c+l*l+f*f)}t.pointPoint3dDistance=i,t.pointPointSqr3dDistance=o,t.pointLine3dDistance=function(e,t,n,r,o,u,s,c,l){return(e-r)*(s-r)+(t-o)*(c-o)+(n-u)*(l-u)<0?i(s,c,l,r,o,u):(r-e)*(s-e)+(o-t)*(c-t)+(u-n)*(l-n)<0?i(s,c,l,e,t,n):a(e,t,n,r,o,u,s,c,l)},t.pointNormalPlane3dDistance=function(e,t,n){var i=-r.Vector3.mul(e,t).sum();return Math.abs((r.Vector3.mul(e,n).sum()+i)/Math.sqrt(r.Vector3.mul(e,e).sum()))},t.vectorPoint3dDistance=a},7584:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(8620),t),i(n(1847),t),i(n(2653),t),i(n(8707),t)},8835:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractDatabaseFixture=void 0;var o=function(e){function t(t,n){var r=e.call(this,t)||this;return r.listDto=t.map(n.mapToDto,n),r.detailDto=r.listDto[0],r}return i(t,e),t}(n(1130).AbstractFixture);t.AbstractDatabaseFixture=o},1130:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractFixture=void 0;var n=function(e){this.list=e,this.detail=e[0]};t.AbstractFixture=n},1103:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractMapper=void 0;var n=function(){};t.AbstractMapper=n},8114:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PaginateModel=void 0;var n=function(){function e(t,n){void 0===t&&(t=e.ITEMS_PER_PAGE),void 0===n&&(n=0),this.limit=+t,this.offset=+n}return e.validate=function(t){return t?new e(isNaN(t.limit)?e.ITEMS_PER_PAGE:t.limit,isNaN(t.offset)?0:t.offset):new e},e.ITEMS_PER_PAGE=10,e}();t.PaginateModel=n},4459:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4861:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(4459),t),i(n(7953),t),i(n(6279),t),i(n(567),t),i(n(9181),t),i(n(6137),t),i(n(9492),t),i(n(4059),t),i(n(7191),t),i(n(6424),t),i(n(3896),t),i(n(6937),t),i(n(5632),t),i(n(6170),t)},7953:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6279:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},567:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},9181:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6137:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},9492:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4059:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},7191:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6424:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},3896:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6937:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},5632:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6170:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},5088:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DomUtils=void 0;var r=n(6577),i=n(4574),o=n(2089),a=function(){function e(){}return e.getWindowHeight=function(){if("undefined"==typeof window)throw new o.NotBrowserException;return window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight},e.getWindowWidth=function(){if("undefined"==typeof window)throw new o.NotBrowserException;return window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth},e.text=function(e,t,n){return void 0===n&&(n=!0),n?e.textContent+=t:e.textContent=t,e},e.html=function(e,t,n){return void 0===n&&(n=!0),n?"string"==typeof t?e.innerHTML+=t:r.Checkers.isElement(t)&&e.appendChild(t):"string"==typeof t?e.innerHTML=t:r.Checkers.isElement(t)&&(e.innerHTML="",e.appendChild(t)),e},e.class=function(t,n,i){if(void 0===i&&(i=!1),Array.isArray(n))for(var o=0,a=n;o<a.length;o++){var u=a[o];e.class(t,u,i)}else switch(n[0]){case"+":t.classList.add(n.substring(1));break;case"-":t.classList.remove(n.substring(1));break;case"/":n=n.substring(1),r.Checkers.isBoolean(i)?t.classList.toggle(n,i):t.classList.toggle(n);break;default:return t.classList.contains(n)}return t},e.createElement=function(t,n,r,i){if("undefined"==typeof document)throw new o.NotBrowserException;var a;if("object"==typeof t)return e.createElement(t.name,t.attr||{},t.cont||"",t.style);if(a=document.createElement(t),"object"==typeof n)for(var u in n)n.hasOwnProperty(u)&&a.setAttribute(u,n[u]);if("object"==typeof i)for(var u in i)i.hasOwnProperty(u)&&(a.style[u]=i[u]);return Array.isArray(r)?r.forEach((function(t){e.html(a,t,!0)})):e.html(a,r),a},e.remove=function(e){var t=e.parentElement;return t&&t.removeChild(e),e},e.position=function(e){var t=0,n=0;do{t+=e.offsetTop||0,n+=e.offsetLeft||0,e=e.offsetParent}while(e);return{x:n,y:t}},e.indexOf=function(e){for(var t=0;e;)e=e.previousElementSibling,t++;return t},e.size=function(e){return{height:e.offsetHeight,width:e.offsetWidth}},e.serialize=function(e){var t={};if(!r.Checkers.isElement(e))return t;if("form"!==e.tagName.toLowerCase())return t;var n=i.DomGet.byTag("input");for(var o in n)if(n.hasOwnProperty(o)){var a=n[o],u=a.getAttribute("name");u&&(t[u]=a.getAttribute("value"))}return t},e}();t.DomUtils=a},6689:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.FileUtils=void 0;var a=o(n(2993)),u=o(n(1386)),s=n(8519);function c(e,t){var n=[];a.readdir(e,(function(r,i){if(r)return t(r);var o=i.length;if(!o)return t(null,n);i.forEach((function(r){r=u.resolve(e,r),a.stat(r,(function(e,i){i&&i.isDirectory()?c(r,(function(e,r){r&&(n.push.apply(n,r),--o||t(null,n))})):(n.push(r),--o||t(null,n))}))}))}))}var l=function(){function e(){}return e.scanDirRecursive=function(e){return new Promise((function(t,n){a.stat(e,(function(r,i){return r?n(r):i.isDirectory()?void c(e,(function(e,r){if(e)return n(e);t(r)})):n(e+" is not directory")}))}))},e.loadFileJSON=function(t,n){e.loadFile(t,(function(e,t){return n(e,JSON.parse(t))}))},e.loadFile=function(e,t,n){void 0===n&&(n="utf8"),a.readFile(e,n,t)},e.saveJsonFile=function(t,n){return e.saveFile(JSON.stringify(t),n)},e.saveFile=function(e,t){return new Promise((function(n,r){a.writeFile(t,e,(function(e){e?r(e):n("The file was saved!")}))}))},e.removeFile=function(e){return new Promise((function(t,n){a.unlink(e,(function(e){e?n(e):t("The file was removed!")}))}))},e.checkExtension=function(e,t){return e.endsWith(t)?e:s.StringUtils.joinSingle(e,".",t)},e}();t.FileUtils=l},7962:(e,t)=>{"use strict";function n(e){return Array.isArray(e)?0===e.length?null:e[Math.floor(Math.random()*e.length)]:e}Object.defineProperty(t,"__esModule",{value:!0}),t.eachOther=t.makeUnique=t.getNRandom=t.getRandomItem=t.getLast=t.join=t.avg=t.sum=t.min=t.max=t.subArray=t.where=void 0,t.where=function(e,t){if(!Array.isArray(e))return e;if(!t||"object"!=typeof t)return[];var n=[],r=Object.entries(t);return e.forEach((function(e){r.some((function(t){return e[t[0]]===t[1]}))&&(n[n.length]=e)})),n},t.subArray=function(e,t,n){if(void 0===t&&(t=0),void 0===n&&(n=e.length-1),!Array.isArray(e))return e;for(var r=[],i=e.length<n?e.length-1:n,o=t;o<=i;o++)r[r.length]=e[o];return r},t.max=function(e){return Array.isArray(e)?0===e.length?0:e.reduce((function(e,t){return e>t?e:t})):e},t.min=function(e){return Array.isArray(e)?0===e.length?0:e.reduce((function(e,t){return e<t?e:t})):e},t.sum=function(e){return Array.isArray(e)?0===e.length?0:e.reduce((function(e,t){return e+t})):e},t.avg=function(e){return Array.isArray(e)?0===e.length?0:e.reduce((function(e,t){return e+t}))/e.length:e},t.join=function(e,t,n,r){return void 0===n&&(n=""),void 0===r&&(r=""),Array.isArray(e)?n+e.join(t)+r:n+e+r},t.getLast=function(e){return Array.isArray(e)?e[e.length-1]:e},t.getRandomItem=n,t.getNRandom=function(e,t){if(!Array.isArray(e))return e;if(0===e.length||0===t)return[];if(e.length<=t)return e;for(var r=new Set;r.size<=t;){var i=n(e);i&&r.add(i)}return Array.from(r)},t.makeUnique=function(e){return Array.isArray(e)?Array.from(new Set(e)):e},t.eachOther=function(e,t){e.forEach((function(n,r){for(var i=r+1;i<e.length;i++)t(n,e[i])}))}},7727:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseColor=t.rgb2int=t.hex2int=t.int2rgb=t.int2hex=t.rgb2hex=t.shadeColor=t.hex2rgb=t.lerpHexaColor=t.lerpColor=void 0;var r=n(8132),i={black:[0,0,0],white:[255,255,255],red:[255,0,0],green:[0,255,0],blue:[0,0,255]};function o(e){var t=parseInt(e.slice(1),16);return[t>>16,t>>8&255,255&t]}function a(e,t,n){return"#"+(16777216+65536*(e<255?e<1?0:e:255)+256*(t<255?t<1?0:t:255)+(n<255?n<1?0:n:255)).toString(16).slice(1)}t.lerpColor=function(e,t,n){var i=n*e[0]+(1-n)*t[0],o=n*e[1]+(1-n)*t[1],a=n*e[2]+(1-n)*t[2],u=n*e[3]+(1-n)*t[3];return[r.clamp(i,0,255),r.clamp(o,0,255),r.clamp(a,0,255),r.clamp(u,0,255)]},t.lerpHexaColor=function(e,t,n){var r=+e.replace("#","0x"),i=r>>16,o=r>>8&255,a=255&r,u=+t.replace("#","0x");return"#"+((1<<24)+(i+n*((u>>16)-i)<<16)+(o+n*((u>>8&255)-o)<<8)+(a+n*((255&u)-a))|0).toString(16).slice(1)},t.hex2rgb=o,t.shadeColor=function(e,t){var n=o(e),r=Math.round(2.55*t);return a(n[0]+r,n[1]+r,n[2]+r)},t.rgb2hex=a,t.int2hex=function(e){var t=e.toString(16);return"#"+("000000".substr(0,6-t.length)+t).toUpperCase()},t.int2rgb=function(e){return[e>>16,e>>8&255,255&e]},t.hex2int=function(e){return parseInt(e,16)},t.rgb2int=function(e,t,n){return e<<16|t<<8&65535|n},t.parseColor=function(e){if(i[e])return i[e];var t=e.match(/^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);if(t)return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)];var n=e.match(/rgba?\((\d{1,3}) *, *(\d{1,3}) *, *(\d{1,3})( *, *\d*.?\d*)\)/);if(n)return[parseInt(n[1],10),parseInt(n[2],10),parseInt(n[3],10)];throw new Error("Cannot parse color: "+e)}},4163:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.ArrayUtils=void 0;var a=o(n(7962)),u=function(){function e(){}return e.where=function(e,t){return a.where(e,t)},e.subArray=function(e,t,n){return void 0===t&&(t=0),void 0===n&&(n=e.length-1),a.subArray(e)},e.max=function(e){return a.max(e)},e.min=function(e){return a.min(e)},e.sum=function(e){return a.sum(e)},e.avg=function(e){return a.avg(e)},e.join=function(e,t,n,r){return void 0===n&&(n=""),void 0===r&&(r=""),a.join(e,t,n,r)},e.getLast=function(e){return a.getLast(e)},e.getRandom=function(e){return a.getRandomItem(e)},e.getNRandom=function(e,t){return a.getNRandom(e,t)},e.makeUnique=function(e){return a.makeUnique(e)},e}();t.ArrayUtils=u},1294:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.MathUtils=void 0;var a=o(n(8132)),u=function(){function e(){}return e.roundToDecimals=function(e,t,n){return void 0===t&&(t=2),void 0===n&&(n="round"),a.roundToDecimals(e,t,n)},e.pad=function(e,t){return a.pad(e,t)},e.clamp=function(e,t,n){return a.clamp(e,t,n)},e.binomialCoefficient=function(e,t){return a.binomialCoefficient(e,t)},e.lerp=function(e,t,n){return a.lerp(e,t,n)},e.log2i=function(e){return a.log2i(e)},e.lamp=function(e,t,n){return a.clamp(n,e,t)},e.randomInt=function(e,t){return a.randomInt(e,t)},e.random=function(e,t){return a.random(e,t)},e.average=function(e){return a.average(e)},e.diff=function(e,t){return a.getDiff(e,t)},e}();t.MathUtils=u},3451:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.MiscUtils=void 0;var a=o(n(5140)),u=o(n(9383)),s=o(n(1265)),c=o(n(9646)),l=function(){function e(){}return e.createClass=function(e,t){return c.createClass(e,t)},e.parseCookies=function(e){return a.parseCookies(e)},e.isIn=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return a.isIn(e,t)},e.parseJSONWithComments=function(e){return a.parseJSONWithComments(e)},e.setCookie=function(e,t,n){return a.setCookie(e,t,n)},e.getCookie=function(e,t){return void 0===t&&(t="undefined"!=typeof document?document.cookie:""),a.getCookie(e,t)},e.parseParams=function(e,t,n){return void 0===e&&(e="undefined"!=typeof window?window.location.search.substring(1):""),void 0===t&&(t="&"),void 0===n&&(n="="),a.parseParams(e,t,n)},e.roughSizeOfObject=function(e){return s.roughSizeOfObject(e)},e.objectToQueryParams=function(e){return a.objectToQueryParams(e)},e.includeFile=function(e){return u.includeFile(e)},e.serialize=function(e){return a.serialize(e)},e.parse=function(e){return a.parse(e)},e.prototype.map=function(e,t){return a.map(e,t)},e}();t.MiscUtils=l},9343:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectUtils=void 0;var a=o(n(1265)),u=function(){function e(){}return e.without=function(e,t){return a.without(e,t)},e.getNestedProperty=function(e,t,n){return void 0===n&&(n="."),a.getNestedProperty(e,t,n)},e.size=function(e){return a.size(e)},e.isPlain=function(e){return a.isPlain(e)},e.makeFlat=function(e,t,n){return void 0===n&&(n="."),a.makeFlat(e,t,n)},e}();t.ObjectUtils=u},3547:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.StringCheckers=void 0;var a=o(n(8592)),u=function(){function e(){}return e.isCamelCase=a.isCamelCase,e.isUpperCamelCase=a.isUpperCamelCase,e.isLowerCamelCase=a.isLowerCamelCase,e.isLowerSnakeCase=a.isLowerSnakeCase,e.isUpperSnakeCase=a.isUpperSnakeCase,e.isSnakeCase=a.isSnakeCase,e.isTimeFormat=a.isTimeFormat,e}();t.StringCheckers=u},8519:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.StringUtils=void 0;var a=n(5776),u=o(n(8592)),s=o(n(6131)),c=function(){function e(){}return e.removeAccentedCharacters=function(e){return s.removeAccentedCharacters(e)},e.join=function(e,t,n,r){return void 0===t&&(t=" "),void 0===n&&(n=""),void 0===r&&(r=""),s.joinString(e,t,n,r)},e.toUpperSnakeCase=function(e){return s.toUpperSnakeCase(e)},e.toLowerSnakeCase=function(e){return s.toLowerSnakeCase(e)},e.toLowerCamelCase=function(e){return s.toLowerCamelCase(e)},e.toUpperCamelCase=function(e){return s.toUpperCamelCase(e)},e.toCapital=function(e){return s.toCapital(e)},e.getLastPart=function(e,t){return void 0===t&&(t=" "),s.getLastPart(e,t)},e.count=function(e,t){return s.count(e,t)},e.repeat=function(e,t){return e.repeat(t)},e.removeAll=function(e,t){return s.removeAll(e,t)},e.template=function(e,t,n,r){return void 0===n&&(n="{{"),void 0===r&&(r="}}"),s.template(e,t,n,r)},e.removeEmptyLines=function(e){return s.removeEmptyLines(e)},e.between=function(e,t,n){return s.between(e,t,n)},e.occurrences=function(e,t){return s.occurrences(e,t)},e.collapseWhitespace=function(e){return s.collapseWhitespace(e)},e.capitalize=function(e){return s.toCapital(e)},e.isEmpty=function(e){return a.isEmpty(e)},e.swapCase=function(e){return s.swapCase(e)},e.transformToBasicFormat=function(e){return s.transformToBasicFormat(e)},e.isValidEmail=function(e){return u.isValidEmail(e)},e.isValidPhoneNumber=function(e){return u.isValidPhoneNumber(e)},e.getAsciiArray=function(e){return s.getAsciiArray(e)},e.toBasicForm=function(e){return s.toBasicForm(e)},e.contains=function(e,t){return s.contains(e,t)},e.joinSingle=function(e,t,n){return s.joinSingle(e,t,n)},e.getFormattedNumber=function(e,t){return void 0===t&&(t="+421"),s.getFormattedNumber(e,t)},e}();t.StringUtils=c},447:function(e,t,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r};Object.defineProperty(t,"__esModule",{value:!0}),t.getOrCreateAndAppend=t.getOrCreate=t.chooseColorUsingDefaultInput=t.CreateElement=t.createCheckbox=t.CreateImage=t.dragElement=t.elementToString=void 0;var i=n(6141);function o(e,t){var n=document.createElement(e);return t?(Object.entries(t).forEach((function(e){switch(e[0]){case"className":n.className=e[1];break;case"onChange":n.addEventListener("change",e[1]);break;case"onClick":n.addEventListener("click",e[1]);break;case"checked":n.checked=e[1];break;case"styles":Object.entries(e[1]).forEach((function(e){n.style[e[0]]=e[1]}));break;case"children":Array.isArray(e[1])?n.append.apply(n,e[1]):n.append(e[1]);break;case"content":e[1]&&(n.innerHTML=e[1]);break;default:n.setAttribute(e[0],e[1])}})),n):n}function a(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=e.querySelector(t+"."+n.join("."));return i||o(t,{className:n.join(" ")})}t.elementToString=function e(t,n){void 0===n&&(n=!0);var r=Array.from(t.classList).join("."),i=t.id?"#"+t.id:"";return(t.parentElement?e(t.parentElement,!1)+" > ":"")+t.localName+i+(r?"."+r:"")},t.dragElement=function(e,t){void 0===t&&(t=".header");var n=0,r=0,i=0,o=0,a=function(e){(e=e||window.event).preventDefault(),i=e.clientX,o=e.clientY,document.onpointerup=c,document.onpointermove=u},u=function(t){(t=t||window.event).preventDefault(),n=i-t.clientX,r=o-t.clientY,i=t.clientX,o=t.clientY,e.style.top=e.offsetTop-r+"px",e.style.left=e.offsetLeft-n+"px"},s=e.querySelector(t);function c(){document.onpointerup=null,document.onpointermove=null}return s?s.addEventListener("pointerdown",a):e.addEventListener("pointerdown",a),{clear:function(){s?s.removeEventListener("pointerdown",a):e.removeEventListener("pointerdown",a)}}},t.CreateImage=function(e){var t=o("img",e);return i.ALLOW_IMAGES_ONLY_WITH_ALLOWED_CORS&&(t.crossOrigin="Anonymous"),t},t.createCheckbox=function(e,t,n){void 0===n&&(n=!1);var r=o("input",{checked:n,type:"checkbox",onChange:function(){return t(r.checked)}});return o("label",{className:"checkbox-container",children:[e,r,o("span",{className:"checkmark"})]})},t.CreateElement=o,t.chooseColorUsingDefaultInput=function(){return new Promise((function(e){var t=o("input",{type:"color",className:"hidden",onChange:function(){e(t.value),document.body.removeChild(t)}});document.body.appendChild(t),t.click()}))},t.getOrCreate=a,t.getOrCreateAndAppend=function(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];var o=a.apply(void 0,r([e,t],n));return e.appendChild(o),o}},8132:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.toDegrees=t.getDiff=t.isPowerOf2=t.average=t.random=t.randomInt=t.lamp=t.log2i=t.lerp=t.binomialCoefficient=t.clamp=t.hash2Numbers=t.roundToDecimals=t.pad=void 0;var a=o(n(990));function u(e,t,n){return Math.max(t,Math.min(e,n))}t.pad=function(e,t){var n="00000000000000"+e;return n.substr(n.length-t)},t.roundToDecimals=function(e,t,n){void 0===t&&(t=2),void 0===n&&(n="round");var r=parseInt(1+new Array(t+1).join("0"),10);return(Math[n](e*r)/r).toFixed(t)},t.hash2Numbers=function(e,t){var n=e>=0?2*e:2*-e-1,r=t>=0?2*t:2*-t-1;return(n+r)*(n+r+1)/2+r},t.clamp=u,t.binomialCoefficient=function(e,t){var n=1;if(t>e)return 0;for(var r=1;r<=t;r++)n*=e,e--,n/=r;return n},t.lerp=function(e,t,n){return t*n+(1-n)*e},t.log2i=function(e){for(var t=0;(e>>=1)>0;)t++;return t},t.lamp=function(e,t,n){return u((t-e)*n+e,e,t)},t.randomInt=function(e,t){return a.randomIntBetween(e,t)},t.random=function(e,t){return a.randomFloatBetween(e,t)},t.average=function(e){for(var t=0,n=0,r=e;n<r.length;n++){t+=r[n]}return t/e.length},t.isPowerOf2=function(e){return 0==(e&e-1)},t.getDiff=function(e,t){return Math.abs(e-t)};var s=180/Math.PI;t.toDegrees=function(e){return e*s}},5140:(__unused_webpack_module,exports)=>{"use strict";function parseCookies(e){var t={};return(e?e.toString().split(";"):[]).forEach((function(e){var n=e.split("="),r=n.shift();r&&(t[r.trim()]=decodeURI(n.join("=")))})),t}function isIn(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(Array.isArray(t[0])){if(t[0].indexOf(e)>=0)return!0}else if(t.indexOf(e)>=0)return!0;return!1}function parseJSONWithComments(e){return JSON.parse(e.replace(/\/\/.*\n/g,""))}function setCookie(e,t,n){var r=new Date;r.setTime(r.getTime()+24*n*60*60*1e3);var i=e+"="+t+";expires="+r.toUTCString();return"undefined"!=typeof document&&(document.cookie=i),e+"="+t}function getCookie(e,t){void 0===t&&(t="undefined"!=typeof document?document.cookie:"");for(var n=e+"=",r=0,i=t.split(";");r<i.length;r++){for(var o=i[r];" "===o.charAt(0);)o=o.substring(1);if(0===o.indexOf(n))return o.substring(n.length,o.length)}return""}function parseParams(e,t,n){void 0===e&&(e="undefined"!=typeof window?window.location.search.substring(1):""),void 0===t&&(t="&"),void 0===n&&(n="=");for(var r={},i=0,o=e.split(t);i<o.length;i++){var a=o[i].split(n),u=a[0],s=a[1];void 0===r[u]?r[u]=decodeURIComponent(s):"string"==typeof r[u]?r[u]=[r[u],decodeURIComponent(s)]:r[u].push(decodeURIComponent(s))}return r}function objectToQueryParams(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t+=(t.length>0?"&":"?")+n+"="+e[n]);return t}function serialize(e){for(var t in e)e.hasOwnProperty(t)&&"function"==typeof e[t]&&(e[t]=e[t].toString());return JSON.stringify(e)}function parse(obj){var result=JSON.parse(obj);for(var i in result)if(result.hasOwnProperty(i)&&"string"==typeof result[i]&&(0===result[i].indexOf("function (")||result[i].match(/^\([_a-zA-Z0-9]+( *, *[_a-zA-Z0-9]+)*\) *=>/)))try{eval("result[i] = "+result[i])}catch(e){result[i]=e}return result}function map(e,t){var n={};return t.forEach((function(t){t.mapFunction?t.attrD?n[t.attrD]=t.mapFunction(e[t.attrS]):n[t.attrS]=t.mapFunction(e[t.attrS]):t.attrD?n[t.attrD]=e[t.attrS]:n[t.attrS]=e[t.attrS]})),n}Object.defineProperty(exports,"__esModule",{value:!0}),exports.map=exports.parse=exports.serialize=exports.objectToQueryParams=exports.parseParams=exports.getCookie=exports.setCookie=exports.parseJSONWithComments=exports.isIn=exports.parseCookies=void 0,exports.parseCookies=parseCookies,exports.isIn=isIn,exports.parseJSONWithComments=parseJSONWithComments,exports.setCookie=setCookie,exports.getCookie=getCookie,exports.parseParams=parseParams,exports.objectToQueryParams=objectToQueryParams,exports.serialize=serialize,exports.parse=parse,exports.map=map},9383:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}s((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.includeFile=t.clientDownloadFile=t.uploadFile=t.uploadImage=void 0;var o=n(2089),a=n(447);t.uploadImage=function(){return r(this,void 0,void 0,(function(){return i(this,(function(e){return[2,new Promise((function(e,t){var n=a.CreateElement("input",{type:"file",onChange:function(n){var r=new FileReader;r.onload=function(){e(a.CreateImage({src:r.result}))},r.onerror=t,r.readAsDataURL(n.target.files[0])}});n.style.display="none",document.body.appendChild(n),n.click(),document.body.removeChild(n)}))]}))}))},t.uploadFile=function(){return r(this,void 0,void 0,(function(){return i(this,(function(e){return[2,new Promise((function(e){var t=a.CreateElement("input",{type:"file",onChange:function(t){var n=new FileReader;n.onload=function(){e(n.result)},n.readAsText(t.target.files[0])}});t.style.display="none",document.body.appendChild(t),t.click(),document.body.removeChild(t)}))]}))}))},t.clientDownloadFile=function(e,t){var n=a.CreateElement("a",{href:"data:text/plain;charset=utf-8,"+encodeURIComponent(e),download:t});n.style.display="none",document.body.appendChild(n),n.click(),document.body.removeChild(n)},t.includeFile=function(e){if("undefined"==typeof document)throw new o.NotBrowserException;var t=document.createElement("script");t&&(t.src=e,t.type="text/javascript",t.defer=!0,document.head.appendChild(t))}},1265:(e,t)=>{"use strict";function n(e){var t=[];for(var n in e)e.hasOwnProperty(n)&&t.push({key:n,value:e[n]});return t}Object.defineProperty(t,"__esModule",{value:!0}),t.makeFlat=t.isPlain=t.size=t.roughSizeOfObject=t.setNestedProperty=t.getNestedProperty=t.getObjectEntries=t.without=void 0,t.without=function(e,t){return n(e).filter((function(e){return!t.includes(e.key)})).reduce((function(e,t){return e[t.key]=t.value,e}),{})},t.getObjectEntries=n,t.getNestedProperty=function(e,t,n){return void 0===n&&(n="."),t.split(n).reduce((function(e,t){return e?e[t]:void 0}),e)},t.setNestedProperty=function(e,t,n){for(var r=t,i=e.split("."),o=0;o<i.length-1;o++)r=r[i[o]];r[i[i.length-1]]=n},t.roughSizeOfObject=function(e){for(var t=[],n=[e],r=0;n.length;){var i=n.pop();if("boolean"==typeof i)r+=4;else if("string"==typeof i)r+=i.length<<1;else if("number"==typeof i)r+=8;else if("object"==typeof i&&-1===t.indexOf(i))for(var o in t.push(i),i)i.hasOwnProperty(o)&&n.push(i[o])}return r},t.size=function(e){var t=0;for(var n in e)e.hasOwnProperty(n)&&t++;return t},t.isPlain=function(e){for(var t in e)if(e.hasOwnProperty(t)&&"object"==typeof e[t])return!1;return!0},t.makeFlat=function(e,t,n,r){void 0===n&&(n="."),void 0===r&&(r=!1);var i=t.indexOf(n)>=0?t.split(n):[t];return e.reduce((function(e,t){var n=i.reduce((function(e,t){return e?e[t]:void 0}),t);return void 0===n&&r||e.push(n),e}),[])}},990:(e,t)=>{"use strict";function n(e,t){return e+Math.random()*(t-e)}Object.defineProperty(t,"__esModule",{value:!0}),t.randomItem=t.randomBoolean=t.randomIntBetween=t.randomFloatBetween=void 0,t.randomFloatBetween=n,t.randomIntBetween=function(e,t){return Math.floor(n(e,t))},t.randomBoolean=function(){return Math.random()<.5},t.randomItem=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e[Math.floor(Math.random()*e.length)]}},9646:function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}s((r=r.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.callFirstFunction=t.createClass=void 0,t.createClass=function(e,t){var n=Object.create(e.prototype);return e.apply(n,t),n},t.callFirstFunction=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n(this,void 0,void 0,(function(){var t,n,i;return r(this,(function(r){switch(r.label){case 0:t=0,n=e,r.label=1;case 1:return t<n.length?"function"!=typeof(i=n[t])?[3,3]:[4,i()]:[3,4];case 2:return[2,r.sent()];case 3:return t++,[3,1];case 4:return[2]}}))}))}},8592:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.isValidEmail=t.isValidPhoneNumber=t.isTimeFormat=t.isSnakeCase=t.isUpperSnakeCase=t.isLowerSnakeCase=t.isLowerCamelCase=t.isUpperCamelCase=t.isCamelCase=void 0;var a=o(n(1025)),u={HH:"(2[0-3]|[01]\\d)",H:"(2[0-3]|[01]?\\d)",mm:"([0-5]\\d)",m:"([0-5]?\\d)",MM:"(0\\d|1[0-2]|\\d)",M:"([1-9]|1[0-2])",ss:"([0-5]\\d)",s:"([0-5]?\\d)",YYYY:"([1-9]\\d{3,3})",YY:"(\\d{2,2})",DD:"([0-3]\\d)"};t.isCamelCase=function(e){return new RegExp("^[A-Z]?[a-z]+([A-Z][a-z]*)*$","g").test(e)},t.isUpperCamelCase=function(e){return new RegExp("^([A-Z][a-z]*)*$","g").test(e)},t.isLowerCamelCase=function(e){return new RegExp("^[a-z]+([A-Z][a-z]*)*$","g").test(e)},t.isLowerSnakeCase=function(e){return new RegExp("^[a-z]*(_[a-z]*)*$","g").test(e)},t.isUpperSnakeCase=function(e){return new RegExp("^[A-Z]*(_[A-Z]*)*$","g").test(e)},t.isSnakeCase=function(e){return new RegExp("^([a-z]*|[A-Z]*)(_[a-zA-Z]*)*$","g").test(e)},t.isTimeFormat=function(e,t){for(var n in u)u.hasOwnProperty(n)&&(t=t.replace(n,u[n]));return new RegExp("^"+t+"$").test(e)},t.isValidPhoneNumber=function(e){return a.isValidPhoneNumber(e)},t.isValidEmail=function(e){return a.isValidEmail(e)}},6131:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.replaceForAll=t.getFormattedNumber=t.joinString=t.joinSingle=t.contains=t.toBasicForm=t.getAsciiArray=t.transformToBasicFormat=t.swapCase=t.collapseWhitespace=t.occurrences=t.between=t.removeEmptyLines=t.template=t.removeAll=t.repeat=t.count=t.getLastPart=t.toCapital=t.capitalize=t.toUpperCamelCase=t.toLowerCamelCase=t.toLowerSnakeCase=t.toUpperSnakeCase=t.removeAccentedCharacters=void 0;var a=n(7962),u=o(n(8592)),s="ąàáäâãåæăćčĉďęèéëêĝĥìíïîĵłľńňòóöőôõðøśșşšŝťțţŭùúüűûñÿýçżźž",c="aaaaaaaaacccdeeeeeghiiiijllnnoooooooossssstttuuuuuunyyczzz",l=s+s.toUpperCase(),f=c+c.toUpperCase();function d(e){return e&&e.replace?e.replace(/./g,(function(e){var t=l.indexOf(e);return t>=0?f[t]:e})):e}function h(e){return u.isLowerCamelCase(e)?e:e.trim().replace(/([a-z])([A-Z])([A-Z])/g,"$1$2_$3").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase().replace(/(-|_| |\s)+(.)?/g,(function(e,t,n){return n?n.toUpperCase():""})).replace(/^./,(function(e){return e.toLowerCase()}))}function p(e){return e.replace(/./,(function(e){return e.toUpperCase()}))}function v(e){return e.replace(/[\s\uFEFF\xA0]{2,}/g," ")}t.removeAccentedCharacters=d,t.toUpperSnakeCase=function(e){return u.isCamelCase(e)?e.replace(/([a-z])([A-Z])/g,"$1_$2").replace(/([A-Z])([A-Z])/g,"$1_$2").toUpperCase():u.isUpperSnakeCase(e)?e:e.replace(/(-|_| |\s)+(.)?/g,(function(e,t,n){return n?"_"+n:""})).replace(/^_/,"").toUpperCase()},t.toLowerSnakeCase=function(e){return u.isCamelCase(e)?e.replace(/([a-z])([A-Z])/g,"$1_$2").replace(/([A-Z])([A-Z])/g,"$1_$2").toLowerCase():u.isLowerSnakeCase(e)?e:e.replace(/(-|_| |\s)+(.)?/g,(function(e,t,n){return n?"_"+n:""})).replace(/^_/,"").toLowerCase()},t.toLowerCamelCase=h,t.toUpperCamelCase=function(e){return u.isUpperCamelCase(e)?e:p(h(e))},t.capitalize=function(e){return e.toLowerCase().replace(/^./,(function(e){return e.toUpperCase()}))},t.toCapital=p,t.getLastPart=function(e,t){if(void 0===t&&(t=" "),!e||!e.split)return e;var n=e.split(t);return n[n.length-1]},t.count=function(e,t){return(e.match(new RegExp(t,"g"))||[]).length},t.repeat=function(e,t){return new Array(t+1).join(e)},t.removeAll=function(e,t){return e.replace(new RegExp("("+t.join("|")+")","g"),"")},t.template=function(e,t,n,r){void 0===n&&(n="{{"),void 0===r&&(r="}}"),n=n.replace(/[-[\]()*\s]/g,"\\$&").replace(/\$/g,"\\$"),r=r.replace(/[-[\]()*\s]/g,"\\$&").replace(/\$/g,"\\$");var i=new RegExp(n+"(.+?)'"+r,"g");return(e.match(i)||[]).forEach((function(i){var o=i.substring(n.length,i.length-r.length).trim(),a=t[o];a&&(e=e.replace(i,a))})),e},t.removeEmptyLines=function(e){return e.replace(/^\s*$(?:\r\n?|\n)/gm,"")},t.between=function(e,t,n){var r=e.indexOf(t),i=e.indexOf(n);return r<0&&i>=0?e.substring(0,i):i<0&&r>=0?e.substring(r+t.length,e.length):e.substring(r+t.length,i)},t.occurrences=function(e,t){return(e.match(new RegExp(t,"g"))||[]).length},t.collapseWhitespace=v,t.swapCase=function(e){return e.replace(/\S/g,(function(e){var t=e.toLowerCase();return t===e?e.toUpperCase():t}))},t.transformToBasicFormat=function(e){return v(d(e).toLowerCase()).trim()},t.getAsciiArray=function(e){for(var t=[],n=0,r=e;n<r.length;n++){var i=r[n];t[t.length]=i.charCodeAt(0)}return t},t.toBasicForm=function(e){return d(e.toLowerCase())},t.contains=function(e,t){return!!e&&d(e.toLowerCase()).indexOf(t)>=0},t.joinSingle=function(e,t,n){return n.startsWith(t)&&e.endsWith(t)?e+n.substring(t.length):n.startsWith(t)||e.endsWith(t)?e+n:e+t+n},t.joinString=function(e,t,n,r){return void 0===t&&(t=" "),void 0===n&&(n=""),void 0===r&&(r=""),a.join(e,t,n,r)},t.getFormattedNumber=function(e,t){return void 0===t&&(t="+421"),(e=e.replace(/[( )/-]/g,"")).startsWith("+")?e:e.startsWith("00")?e.substring(2):e.startsWith("09")||e.startsWith("02")?t+e.substring(1):e},t.replaceForAll=function(e,t,n){return t.map((function(t){return e.replace(n,t)}))}},7652:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getEndOfTheDay=t.getStartOfTheDay=t.format=t.dateAge=void 0;var n=Object.entries({year:31536e3,month:2592e3,week:604800,day:86400,hour:3600,minute:60,second:1});function r(e,t){return e?(isNaN(t.ms)||e.setMilliseconds(t.ms),isNaN(t.s)||e.setSeconds(t.s),isNaN(t.m)||e.setMinutes(t.m),isNaN(t.h)||e.setHours(t.h),e):new Date("")}t.dateAge=function(e){if(e){var t=Math.floor((+new Date-+new Date(e))/1e3);if(t<29)return"Just now";for(var r=void 0,i=0,o=n;i<o.length;i++){var a=o[i],u=a[0],s=a[1];if(!((r=Math.floor(t/s))<=0))return 1===r?r+" "+u+" ago":r+" "+u+"s ago"}}return e},t.format=function(e,t){var n=function(e){return e<10?"0"+e:""+e},r=new RegExp("(DD|MM|YYYY|YYY|YY|HH|mm|SS)","g"),i=n(e.getDate()),o=n(e.getMonth()+1),a=e.getFullYear()+"",u=a.substr(1,4),s=u.substr(1,4),c=n(e.getHours()),l=n(e.getMinutes()),f=n(e.getSeconds());return t.replace(r,(function(e){switch(e){case"DD":return i;case"MM":return o;case"YYYY":return a;case"YYY":return u;case"YY":return s;case"HH":return c;case"mm":return l;case"SS":return f;default:return e}}))},t.getStartOfTheDay=function(e){return r(e,{ms:0,s:0,m:0,h:0})},t.getEndOfTheDay=function(e){return r(e,{ms:999,s:59,m:59,h:23})}},5776:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(1025),t)},1025:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isValidEmail=t.isValidPhoneNumber=t.isEmpty=t.isElement=t.isUndefined=t.isFloat=t.isInt=t.isArray=t.isBoolean=t.isNumber=t.isObject=t.isString=t.isFunction=void 0;var n=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/i,r=/^([+]|00)?[(]?[0-9]{3,4}[)]?[-\s.]?[0-9]{2,3}[-\s.]?[0-9]{2,6}([-\s.]?[0-9]{3})?$/im;function i(e){return typeof e}function o(e){return"object"===i(e)}t.isFunction=function(e){return"function"===i(e)},t.isString=function(e){return"string"===i(e)},t.isObject=o,t.isNumber=function(e){return"number"===i(e)},t.isBoolean=function(e){return"boolean"===i(e)},t.isArray=function(e){return Array.isArray(e)},t.isInt=function(e){return"number"===i(e)&&e%1==0},t.isFloat=function(e){return"number"===i(e)&&e%1!=0},t.isUndefined=function(e){return"undefined"===i(e)},t.isElement=function(e){try{return e instanceof HTMLElement}catch(t){return o(e)&&1===e.nodeType&&o(e.style)&&o(e.ownerDocument)}},t.isEmpty=function(e){return!!e&&("string"==typeof e?e.length>0&&/^[\s\xa0]*$/.test(e):Array.isArray(e)?e.length>0:e.constructor!==Object||Object.keys(e).length>0)},t.isValidPhoneNumber=function(e){return!!e&&r.test(e.trim())},t.isValidEmail=function(e){return!!e&&n.test(e.trim())}},5202:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.get=t.canvas=t.check=t.stemmer=t.time=t.string=t.object=t.misc=t.dom=t.math=t.arrays=void 0;var a=n(4163);Object.defineProperty(t,"arrays",{enumerable:!0,get:function(){return a.ArrayUtils}});var u=n(1294);Object.defineProperty(t,"math",{enumerable:!0,get:function(){return u.MathUtils}});var s=n(5088);Object.defineProperty(t,"dom",{enumerable:!0,get:function(){return s.DomUtils}});var c=n(3451);Object.defineProperty(t,"misc",{enumerable:!0,get:function(){return c.MiscUtils}});var l=n(9343);Object.defineProperty(t,"object",{enumerable:!0,get:function(){return l.ObjectUtils}});var f=n(8519);Object.defineProperty(t,"string",{enumerable:!0,get:function(){return f.StringUtils}}),t.time=o(n(7652));var d=n(4491);Object.defineProperty(t,"stemmer",{enumerable:!0,get:function(){return d.SlovakStemmer}});var h=n(6577);Object.defineProperty(t,"check",{enumerable:!0,get:function(){return h.Checkers}});var p=n(4e3);Object.defineProperty(t,"canvas",{enumerable:!0,get:function(){return p.CanvasManager}});var v=n(4574);Object.defineProperty(t,"get",{enumerable:!0,get:function(){return v.DomGet}})},2993:()=>{},1386:()=>{}},__webpack_module_cache__={};function __webpack_require__(e){if(__webpack_module_cache__[e])return __webpack_module_cache__[e].exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(t.exports,t,t.exports,__webpack_require__),t.exports}return __webpack_require__(8022)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HNDNMaWIvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy9HVXRpbHMudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL2NvbW1vbi50cyIsIndlYnBhY2s6Ly9HNDNMaWIvLi9zcmMvY29tcG9uZW50cy9maWxlLW1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL2NvbXBvbmVudHMvZy1sb2dnZXIudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL2NvbXBvbmVudHMvZy1tYXAudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL2NvbXBvbmVudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL2NvbXBvbmVudHMva2V5LXZhbHVlLWNvdW50ZXIudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL2NvbXBvbmVudHMvbnVtYmVyLWNvdW50ZXIudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL2NvbXBvbmVudHMvcGFnaW5hdG9yLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy9jb25maWcvZ3Rvb2xzLWNvbmZpZy50cyIsIndlYnBhY2s6Ly9HNDNMaWIvLi9zcmMvY29uc3RhbnRzLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy9kZWNvcmF0b3JzL2RlcHJlY2F0ZWQuZGVjb3JhdG9yLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy9kZWNvcmF0b3JzL2ZpbmFsLWNsYXNzLmRlY29yYXRvci50cyIsIndlYnBhY2s6Ly9HNDNMaWIvLi9zcmMvZGVjb3JhdG9ycy9pbmRleC50cyIsIndlYnBhY2s6Ly9HNDNMaWIvLi9zcmMvZGVjb3JhdG9ycy9tYXBwZXIuZGVjb3JhdG9yLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy9kZWNvcmF0b3JzL3NpbmdsZXRvbi5kZWNvcmF0b3IudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL2RlY29yYXRvcnMvd2F0Y2guZGVjb3JhdG9yLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy9kb20vY2FudmFzLW1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL2RvbS9jYW52YXMtdXRpbHMudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL2RvbS9kZXByZWNhdGVkL0NoZWNrZXJzLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy9kb20vZGVwcmVjYXRlZC9jaGVja2Vycy50cyIsIndlYnBhY2s6Ly9HNDNMaWIvLi9zcmMvZG9tL2RvbS1nZXQudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL2VudW1zL2VuY29kaW5ncy5lbnVtLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy9lbnVtcy9maWxlLXR5cGVzLmVudW0udHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL2VudW1zL2h0dHAtc3RhdHVzLWNvZGVzLmVudW0udHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL2VudW1zL2tleXMuZW51bS50cyIsIndlYnBhY2s6Ly9HNDNMaWIvLi9zcmMvZXJyb3JzL25vdC1icm93c2VyLmV4Y2VwdGlvbi50cyIsIndlYnBhY2s6Ly9HNDNMaWIvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL21hdGgvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL21hdGgvdmVjdG9yMi50cyIsIndlYnBhY2s6Ly9HNDNMaWIvLi9zcmMvbWF0aC92ZWN0b3IyZi50cyIsIndlYnBhY2s6Ly9HNDNMaWIvLi9zcmMvbWF0aC92ZWN0b3IzLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy9tYXRoL3ZlY3RvcjQudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL21pc2MvU2xvdmFrU3RlbW1lci50cyIsIndlYnBhY2s6Ly9HNDNMaWIvLi9zcmMvbWlzYy9hamF4LnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy9taXNjL2luZGV4LnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy9taXNjL3J1bnRpbWUtdmFsaWRhdG9ycy50cyIsIndlYnBhY2s6Ly9HNDNMaWIvLi9zcmMvbW9kZWxzL2NvbG9yLm1vZGVsLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy9tb2RlbHMvZ2VuZGVyLm1vZGVsLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy9tb2RlbHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL25vZGUudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL3BoeXNpY3MvY2xvc2VzdC0yZC50cyIsIndlYnBhY2s6Ly9HNDNMaWIvLi9zcmMvcGh5c2ljcy9jb2xsaXNpb25zLTJkLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy9waHlzaWNzL2Rpc3RhbmNlcy0yZC50cyIsIndlYnBhY2s6Ly9HNDNMaWIvLi9zcmMvcGh5c2ljcy9kaXN0YW5jZXMtM2QudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL3BoeXNpY3MvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL3Rlc3RzL2Fic3RyYWN0LWRhdGFiYXNlLmZpeHR1cmUudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL3Rlc3RzL2Fic3RyYWN0LmZpeHR1cmUudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL3Rlc3RzL2Fic3RyYWN0Lm1hcHBlci50cyIsIndlYnBhY2s6Ly9HNDNMaWIvLi9zcmMvdGVzdHMvcGFnaW5hdGUubW9kZWwudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL3R5cGVzL2luZGV4LnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy91dGlscy9Eb21VdGlscy50cyIsIndlYnBhY2s6Ly9HNDNMaWIvLi9zcmMvdXRpbHMvRmlsZVV0aWxzLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy91dGlscy9hcnJheS11dGlscy50cyIsIndlYnBhY2s6Ly9HNDNMaWIvLi9zcmMvdXRpbHMvY29sb3ItdXRpbHMudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL3V0aWxzL2RlcHJlY2F0ZWQvQXJyYXlVdGlscy50cyIsIndlYnBhY2s6Ly9HNDNMaWIvLi9zcmMvdXRpbHMvZGVwcmVjYXRlZC9NYXRoVXRpbHMudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL3V0aWxzL2RlcHJlY2F0ZWQvTWlzY1V0aWxzLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy91dGlscy9kZXByZWNhdGVkL09iamVjdFV0aWxzLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy91dGlscy9kZXByZWNhdGVkL1N0cmluZ0NoZWNrZXJzLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy91dGlscy9kZXByZWNhdGVkL1N0cmluZ1V0aWxzLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy91dGlscy9odG1sLXV0aWxzLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy91dGlscy9tYXRoLXV0aWxzLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy91dGlscy9taXNjLXV0aWxzLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy91dGlscy9uZXQtY2xpZW50LXV0aWxzLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy91dGlscy9vYmplY3QtdXRpbHMudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL3V0aWxzL3JhbmRvbS11dGlscy50cyIsIndlYnBhY2s6Ly9HNDNMaWIvLi9zcmMvdXRpbHMvcmVmbGVjdGlvbi11dGlscy50cyIsIndlYnBhY2s6Ly9HNDNMaWIvLi9zcmMvdXRpbHMvc3RyaW5nLWNoZWNrZXJzLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy91dGlscy9zdHJpbmctdXRpbHMudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL3V0aWxzL3RpbWUtdXRpbHMudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL3ZhbGlkYXRvcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vRzQzTGliLy4vc3JjL3ZhbGlkYXRvcnMvbWlzYy12YWxpZGF0b3JzLnRzIiwid2VicGFjazovL0c0M0xpYi8uL3NyYy93ZWIudHMiLCJ3ZWJwYWNrOi8vRzQzTGliL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0c0M0xpYi93ZWJwYWNrL3N0YXJ0dXAiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsIkdlbmRlciIsImluaXRDb25maWciLCJ0aGlzIiwiaW5wdXQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJsaW5rIiwic2F2ZUZpbGUiLCJuYW1lIiwidGV4dCIsInR5cGUiLCJGaWxlVHlwZXMiLCJUWFQiLCJocmVmIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiQmxvYiIsImRvd25sb2FkIiwiY2xpY2siLCJzYXZlSW1hZ2UiLCJpbWFnZSIsInNyYyIsImxvYWRJbWFnZSIsImZ1bmMiLCJvbmNoYW5nZSIsImV2ZW50IiwiZmlsZXMiLCJ0YXJnZXQiLCJsZW5ndGgiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwiSW1hZ2UiLCJyZXN1bHQiLCJyZWFkQXNEYXRhVVJMIiwibG9hZEZpbGUiLCJlIiwicmVhZEFzVGV4dCIsImxvYWRCaW5hcnlGaWxlIiwicmVhZEFzQmluYXJ5U3RyaW5nIiwiRmlsZU1hbmFnZXIiLCJjb250ZXh0IiwibG9nIiwiR0xvZ2dlciIsInByaW50IiwibWVzc2FnZXMiLCJ3YXJuIiwiZXJyb3IiLCJHTG9nZ2VySW5zdGFuY2UiLCJnZXRMaW5lIiwic3RlcHMiLCJFcnJvciIsInN0YWNrIiwicmVzdWx0cyIsInNwbGl0IiwidHJpbSIsIm1hdGNoIiwicmVhbENvbnRleHQiLCJjb25zdHJ1Y3RvciIsInNraXBSZWdleHAiLCJwcmVmaXgiLCJjb25zb2xlIiwiZGF0YSIsIm1lc3NhZ2UiLCJza2lwQ29udGV4dHMiLCJSZWdFeHAiLCJqb2luIiwiZ2V0Iiwia2V5IiwiZGVmYXVsdFZhbHVlIiwiZ2V0T3JDcmVhdGUiLCJzZXQiLCJNYXAiLCJHTWFwIiwicHJvY2Vzc2VkIiwiYWRkIiwiaXRlbSIsImFkZEFsbCIsIml0ZW1zIiwiZm9yRWFjaCIsImdldEFsbCIsInByb2Nlc3MiLCJnZXRUb3BOIiwiY291bnQiLCJzbGljZSIsImdldENvdW50IiwiaGFzT3duUHJvcGVydHkiLCJwdXNoIiwic29ydCIsImEiLCJiIiwiS2V5VmFsdWVDb3VudGVyIiwibWluIiwiSW5maW5pdHkiLCJtYXgiLCJzdW0iLCJudW1iZXJzIiwidmFsdWUiLCJNYXRoIiwiZ2V0TWluIiwiZ2V0TWF4IiwiZ2V0QXZlcmFnZSIsIk51bWJlckNvdW50ZXIiLCJhbGxJdGVtcyIsIml0ZW1zUGVyUGFnZSIsIkdUb29sc0NvbmZpZyIsIlBBR0VfTElNSVQiLCJhY3R1YWxQYWdlIiwibGFzdFBhZ2UiLCJmbG9vciIsImFjdExpc3QiLCJfcmVDYWxjTGlzdCIsImdldEFjdHVhbFBhZ2UiLCJnZXRQYWdlcyIsImdldFBhZ2VzQXJvdW5kIiwiZ2V0TGlzdCIsImdvVG9OZXh0IiwiZ290VG8iLCJwYWdlIiwiZ29Ub1ByZXYiLCJnb1RvRmlyc3QiLCJnb1RvTGFzdCIsInN0YXJ0IiwiUGFnaW5hdG9yIiwiY29uZmlnIiwiY2hlY2tDb25maWciLCJVUkxfQVBJIiwiTEFOR1VBR0UiLCJWRVJTSU9OIiwiQ2xhc3NHVG9vbHNDb25maWciLCJhcHBDb25maWciLCJBTExPV19JTUFHRVNfT05MWV9XSVRIX0FMTE9XRURfQ09SUyIsInByb3BlcnR5S2V5IiwiZGVzY3JpcHRvciIsIm9sZE1ldGhvZCIsImFwcGx5IiwiYXJncyIsIkZpbmFsIiwicGFyYW1zIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIm5ld05hbWUiLCJvbkdldCIsIm9uU2V0IiwibmV3VmFsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJpbnN0YW5jZXMiLCJjbGFzc05hbWUiLCJvcHRpb25zIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiSFRNTENhbnZhc0VsZW1lbnQiLCJsb2NhbENhbnZhcyIsInNldENhbnZhc1NpemUiLCJIVE1MSW1hZ2VFbGVtZW50IiwiQ2FudmFzTWFuYWdlciIsImltYWdlVG9DYW52YXMiLCJOb3RCcm93c2VyRXhjZXB0aW9uIiwibG9jYWxDb250ZXh0IiwiZ2V0Q29udGV4dCIsImNsZWFyQ2FudmFzIiwiY3R4IiwiY2xlYXJSZWN0IiwiY2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJzZXRTaGFkb3ciLCJ4IiwieSIsImNvbG9yIiwiYmx1ciIsInNoYWRvd0NvbG9yIiwic2hhZG93Qmx1ciIsInNoYWRvd09mZnNldFgiLCJzaGFkb3dPZmZzZXRZIiwiZHJhd0ltYWdlIiwic2V0TGluZURhc2giLCJjYWxjVGV4dFdpZHRoIiwiZm9udCIsIm1lYXN1cmVUZXh0IiwiY2FudmFzVG9JbWFnZSIsImZvcm1hdCIsInRvRGF0YVVSTCIsImdldEltYWdlIiwic2hvdyIsIm9wZW4iLCJhcHBlbmRUbyIsImVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsInJlcyIsInNoYWRvdyIsImJnSW1hZ2UiLCJzYXZlIiwiY2xpcCIsImltZyIsInciLCJoIiwicmVzdG9yZSIsImZpbGwiLCJmaWxsU3R5bGUiLCJmaWxsQ29sb3IiLCJsaW5lQ2FwIiwibGluZUpvaW4iLCJqb2luVHlwZSIsImxpbmVEYXNoIiwiZHJhdyIsImxpbmVXaWR0aCIsImJvcmRlcldpZHRoIiwic3Ryb2tlU3R5bGUiLCJib3JkZXJDb2xvciIsInN0cm9rZSIsInJlbWFrZVBvc0FuZFNpemUiLCJkZWYiLCJvYmoiLCIkIiwiZXh0ZW5kIiwiY2hlY2tBdHRyaWJ1dGUiLCJhdHRyTmFtZSIsInBhcnRBIiwicGFydEIiLCJDaGVja2VycyIsImlzTnVtYmVyIiwiQXJyYXkiLCJpc0FycmF5IiwiY2VudGVyIiwiY2hlY2tQb3NBbmRTaXplIiwicG9zaXRpb24iLCJzaXplIiwiZW5kQW5nbGUiLCJQSSIsIm9mZnNldCIsInJhZGl1cyIsInRsIiwidHIiLCJiciIsImJsIiwic3RhcnRBbmdsZSIsImluaXREZWYiLCJkb0FyYyIsImJlZ2luUGF0aCIsImVsbGlwc2UiLCJyZWN0IiwiZG9SZWN0IiwibW92ZVRvIiwibGluZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsImNsb3NlUGF0aCIsIkNhbnZhc1V0aWxzIiwiaXNGdW5jdGlvbiIsIk1pc2NWYWxpZGF0b3JzIiwiaXNTdHJpbmciLCJpc09iamVjdCIsImlzQm9vbGVhbiIsImlzRW1wdHkiLCJpc0ludCIsImlzRmxvYXQiLCJpc1VuZGVmaW5lZCIsImlzRWxlbWVudCIsInNldENvbnRleHQiLCJieUNsYXNzIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImJ5TGluayIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJieUlkIiwiaWQiLCJnZXRFbGVtZW50QnlJZCIsImJ5TmFtZSIsImdldEVsZW1lbnRzQnlOYW1lIiwiYnlUYWciLCJ0YWdOYW1lIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJEb21HZXQiLCJFbmNvZGluZ3MiLCJIdHRwU3RhdHVzQ29kZXMiLCJLZXlzIiwiRU5URVIiLCJUQUIiLCJXIiwiQSIsIlMiLCJEIiwiUSIsIkUiLCJGIiwiTENPTlRST0wiLCJFU0NBUEUiLCJMQUxUIiwiTFNISUZUIiwiU1BBQ0UiLCJBUlJPV19VUCIsIkFSUk9XX0RPV04iLCJBUlJPV19SSUdIVCIsIkFSUk9XX0xFRlQiLCJLZXlzT2xkIiwiZ2V0VGV4dCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiVmVjdG9yMiIsImlzWmVybyIsImVxdWFscyIsInZlY0EiLCJ2ZWNCIiwic3ViIiwiaXNWaXNpYmxlIiwib2JzWCIsIm9ic1kiLCJhbmdsZSIsImN1dE9mZiIsInB4IiwicHkiLCJhdGFuMiIsImFuZ2xlQmV0d2VlblBvaW50cyIsInB4MSIsInB5MSIsInB4MiIsInB5MiIsIm11bE51bSIsInZhbCIsImRpc3QiLCJzcXJ0IiwicG93IiwiZ2V0Tm9ybWFsaXplZCIsImNsb25lIiwibm9ybWFsaXplIiwibXVsIiwidmVjIiwiZnJvbSIsInZhbEEiLCJ2YWxCIiwib3AiLCJkaXYiLCJWZWN0b3IyZiIsInoiLCJWZWN0b3IzIiwidG9BcnJheSIsImNyZWF0ZUZyb21TcGhlcmljYWxDb29yZHMiLCJwaGkiLCJ0aGV0YSIsInNpblBoaVJhZGl1cyIsInNpbiIsImNvcyIsImZyb21BcnJheSIsInZhbEMiLCJpc1ZlY3RvciIsImlzTmFOIiwiVmVjdG9yNCIsInZhbEQiLCJzZXRGcm9tVmFsdWVzIiwic3RlbWUiLCJ3b3JkIiwicyIsImxlbiIsImNoYXIiLCJlbmRzV2l0aCIsInN1YnN0cmluZyIsInJlbW92ZUNhc2UiLCJzdGFydHNXaXRoIiwic3Vic3RyIiwicmVwbGFjZSIsImkiLCJTbG92YWtTdGVtbWVyIiwiYWpheEhhbmRsZXIiLCJtZXRob2QiLCJ1cmwiLCJvblJlc3BvbnNlIiwiY29udGVudCIsImhlYWRlcnMiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzcG9uc2VUZXh0IiwiZW50cmllcyIsImVudHJ5Iiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJBamF4V3JhcHBlciIsImdldEFzU3RyaW5nIiwiZ2V0QXNOdW1iZXIiLCJjaGVja0NvbG9yVmFsdWUiLCJhc3NlcnQiLCJyZWQiLCJncmVlbiIsImJsdWUiLCJhbHBoYSIsImZyb21IZXgiLCJoZXgycmdiIiwiQ29sb3IiLCJmcm9tSW50IiwiaW50MnJnYiIsIm5vcm1hbGl6ZWQiLCJyZ2IyaGV4IiwicmdiMmludCIsIkJMQUNLIiwiV0hJVEUiLCJHUkFZIiwiUkVEIiwiR1JFRU4iLCJCTFVFIiwibWFsZVJlZ2V4cCIsImZlbWFsZVJlZ2V4cCIsInBhcnNlR2VuZGVyIiwiZ2VuZGVyIiwiZ2VuZGVyTG93ZXJDYXNlIiwidG9Mb3dlckNhc2UiLCJNQU4iLCJXT01BTiIsInBhcnNlIiwiR2VuZGVyQ2xhc3MiLCJzeDEiLCJzeTEiLCJzeDIiLCJzeTIiLCJ4RGVsdGEiLCJ5RGVsdGEiLCJ1IiwibGluZUxpbmUyZENvbGxpc2lvbiIsImFTdGFydFgiLCJhU3RhcnRZIiwiYUVuZFgiLCJhRW5kWSIsImJTdGFydFgiLCJiU3RhcnRZIiwiYkVuZFgiLCJiRW5kWSIsImRlbm9taW5hdG9yIiwibnVtZXJhdG9yMSIsIm51bWVyYXRvcjIiLCJyIiwicG9pbnRSZWN0MmRDb2xsaXNpb24iLCJwb2ludFgiLCJwb2ludFkiLCJyZWN0WCIsInJlY3RZIiwicmVjdFciLCJyZWN0SCIsImNQb3NYIiwiY1Bvc1kiLCJjUmFkaXVzIiwiclBvc1giLCJyUG9zWSIsInJTaXplWCIsInJTaXplWSIsImNpcmNsZURpc3RhbmNlWCIsImFicyIsImNpcmNsZURpc3RhbmNlWSIsImJQb3NYIiwiYlBvc1kiLCJiU2l6ZVgiLCJiU2l6ZVkiLCJheCIsImF5IiwiYXciLCJhaCIsImJ4IiwiYnkiLCJidyIsImJoIiwiYVgiLCJhWSIsImFSYWRpdXMiLCJiWCIsImJZIiwiYlJhZGl1cyIsInBvaW50UG9pbnQyZERpc3RhbmNlIiwibWluWCIsIm1pblkiLCJtYXhYIiwibWF4WSIsImNpcmNsZVgiLCJjaXJjbGVZIiwiY2lyY2xlUmFkaXVzIiwicG9pbnRQb2ludFNxcnQyZERpc3RhbmNlIiwiZGlzdFgiLCJkaXN0WSIsInBvaW50TGluZVNxcnQyZERpc3RhbmNlIiwicFgiLCJwWSIsInh4IiwieXkiLCJDIiwibGVuZ3RoU3F1YXJlIiwicGFyYW0iLCJkeCIsImR5IiwicG9pbnRQb2ludDNkRGlzdGFuY2UiLCJheiIsImJ6IiwicG9pbnRQb2ludFNxcjNkRGlzdGFuY2UiLCJkaXN0WiIsInZlY3RvclBvaW50M2REaXN0YW5jZSIsInN0YXJ0WCIsInN0YXJ0WSIsInN0YXJ0WiIsImVuZFgiLCJlbmRZIiwiZW5kWiIsInBvaW50WiIsInN0YXJ0U3ViRW5kWCIsInN0YXJ0U3ViRW5kWSIsInN0YXJ0U3ViRW5kWiIsImVuZFN1YlBvaW50WCIsImVuZFN1YlBvaW50WSIsImVuZFN1YlBvaW50WiIsImNyb3NzWCIsImNyb3NzWSIsImNyb3NzWiIsImFTdGFydFoiLCJhRW5kWiIsImJDZW50ZXJYIiwiYkNlbnRlclkiLCJiQ2VudGVyWiIsImFOb3JtYWwiLCJhUG9pbnQiLCJiUG9pbnQiLCJkIiwibGlzdCIsIm1hcHBlciIsImxpc3REdG8iLCJtYXAiLCJtYXBUb0R0byIsImRldGFpbER0byIsIkFic3RyYWN0Rml4dHVyZSIsIkFic3RyYWN0RGF0YWJhc2VGaXh0dXJlIiwiZGV0YWlsIiwiQWJzdHJhY3RNYXBwZXIiLCJQYWdpbmF0ZU1vZGVsIiwiSVRFTVNfUEVSX1BBR0UiLCJsaW1pdCIsInZhbGlkYXRlIiwicGFnaW5hdGUiLCJnZXRXaW5kb3dIZWlnaHQiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRIZWlnaHQiLCJib2R5IiwiZ2V0V2luZG93V2lkdGgiLCJjbGllbnRXaWR0aCIsImFwcGVuZCIsInRleHRDb250ZW50IiwiaHRtbCIsImlubmVySFRNTCIsImNsYXNzIiwiZm9yY2UiLCJEb21VdGlscyIsImNsYXNzTGlzdCIsInJlbW92ZSIsInRvZ2dsZSIsImNvbnRhaW5zIiwiYXR0ciIsImNvbnQiLCJzdHlsZSIsImVsIiwicGFyZW50RWxlbWVudCIsInJlbW92ZUNoaWxkIiwidG9wIiwibGVmdCIsIm9mZnNldFRvcCIsIm9mZnNldExlZnQiLCJvZmZzZXRQYXJlbnQiLCJpbmRleE9mIiwiaW5kZXgiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwib2Zmc2V0SGVpZ2h0Iiwib2Zmc2V0V2lkdGgiLCJzZXJpYWxpemUiLCJmb3JtIiwiZWxlbWVudHMiLCJnZXRBdHRyaWJ1dGUiLCJ3YWxrIiwiZGlyIiwiZG9uZSIsImZzIiwicmVhZGRpciIsImVyciIsInBlbmRpbmciLCJmaWxlIiwicGF0aCIsInJlc29sdmUiLCJzdGF0IiwiZXJyMSIsImlzRGlyZWN0b3J5IiwiZXJyMiIsInNjYW5EaXJSZWN1cnNpdmUiLCJQcm9taXNlIiwic3VjY2VzcyIsInJlamVjdCIsImVycjAiLCJzdGF0cyIsImxvYWRGaWxlSlNPTiIsImNhbGxiYWNrIiwiRmlsZVV0aWxzIiwiSlNPTiIsImVuY29kaW5nIiwicmVhZEZpbGUiLCJzYXZlSnNvbkZpbGUiLCJmaWxlTmFtZSIsInN0cmluZ2lmeSIsIndyaXRlRmlsZSIsInJlbW92ZUZpbGUiLCJ1bmxpbmsiLCJjaGVja0V4dGVuc2lvbiIsImV4dGVuc2lvbiIsIlN0cmluZ1V0aWxzIiwiam9pblNpbmdsZSIsImdldFJhbmRvbUl0ZW0iLCJhcnJheSIsInJhbmRvbSIsImNvbmRpdGlvbiIsImNvbmRpdGlvbkVudHJpZXMiLCJzb21lIiwiY29uZGl0aW9uRW50cnkiLCJtaW5JbmRleCIsIm1heEluZGV4IiwiZmluYWwiLCJyZWR1Y2UiLCJkZWxpbWl0ZXIiLCJwb3N0Zml4IiwiU2V0IiwicmFuZG9tSXRlbSIsImFyciIsImoiLCJjb2xvcnMiLCJibGFjayIsIndoaXRlIiwibnVtIiwicGFyc2VJbnQiLCJSIiwiRyIsIkIiLCJ0b1N0cmluZyIsImZyb21Db2xvciIsInRvQ29sb3IiLCJwcm9ncmVzcyIsImNsYW1wIiwiYW1vdW50IiwiYXIiLCJhZyIsImFiIiwicGVyY2VudCIsImFtdCIsInJvdW5kIiwidG9VcHBlckNhc2UiLCJoZXhhTWF0Y2giLCJyZ2JhTWF0aCIsIndoZXJlIiwiQXJyYXlzIiwic3ViQXJyYXkiLCJhdmciLCJnZXRMYXN0IiwiZ2V0UmFuZG9tIiwiZ2V0TlJhbmRvbSIsIm1ha2VVbmlxdWUiLCJBcnJheVV0aWxzIiwicm91bmRUb0RlY2ltYWxzIiwiZGVjaW1hbHMiLCJNYXRocyIsInBhZCIsImJpbm9taWFsQ29lZmZpY2llbnQiLCJuIiwiayIsImxlcnAiLCJsb2cyaSIsImxhbXAiLCJzY2FsZSIsInJhbmRvbUludCIsImF2ZXJhZ2UiLCJkaWZmIiwibnVtMSIsIm51bTIiLCJnZXREaWZmIiwiTWF0aFV0aWxzIiwiY3JlYXRlQ2xhc3MiLCJSZWZsZWN0aW9uIiwicGFyc2VDb29raWVzIiwiY29va2llcyIsIk1pc2MiLCJpc0luIiwicGFyc2VKU09OV2l0aENvbW1lbnRzIiwic2V0Q29va2llIiwiZGF5cyIsImdldENvb2tpZSIsImNuYW1lIiwic291cmNlIiwiY29va2llIiwicGFyc2VQYXJhbXMiLCJxdWVyeSIsInNlcGFyYXRvciIsImxvY2F0aW9uIiwic2VhcmNoIiwicm91Z2hTaXplT2ZPYmplY3QiLCJvYmplY3QiLCJPYmplY3RzIiwib2JqZWN0VG9RdWVyeVBhcmFtcyIsImluY2x1ZGVGaWxlIiwiTmV0Q2xpZW50IiwiTWlzY1V0aWxzIiwid2l0aG91dCIsImdldE5lc3RlZFByb3BlcnR5IiwicHJvcGVydHlQYXRoIiwiaXNQbGFpbiIsIm1ha2VGbGF0IiwiT2JqZWN0VXRpbHMiLCJpc0NhbWVsQ2FzZSIsImlzVXBwZXJDYW1lbENhc2UiLCJpc0xvd2VyQ2FtZWxDYXNlIiwiaXNMb3dlclNuYWtlQ2FzZSIsImlzVXBwZXJTbmFrZUNhc2UiLCJpc1NuYWtlQ2FzZSIsImlzVGltZUZvcm1hdCIsIlN0cmluZ0NoZWNrZXJzIiwicmVtb3ZlQWNjZW50ZWRDaGFyYWN0ZXJzIiwiU3RyaW5ncyIsImpvaW5TdHJpbmciLCJ0b1VwcGVyU25ha2VDYXNlIiwidG9Mb3dlclNuYWtlQ2FzZSIsInRvTG93ZXJDYW1lbENhc2UiLCJ0b1VwcGVyQ2FtZWxDYXNlIiwidG9DYXBpdGFsIiwiZ2V0TGFzdFBhcnQiLCJkaXZpZGVyIiwicmVwZWF0IiwicmVtb3ZlQWxsIiwid29yZHMiLCJ0ZW1wbGF0ZSIsInZhbHVlcyIsImVuZCIsInJlbW92ZUVtcHR5TGluZXMiLCJiZXR3ZWVuIiwia2V5MSIsImtleTIiLCJvY2N1cnJlbmNlcyIsImNvbGxhcHNlV2hpdGVzcGFjZSIsImNhcGl0YWxpemUiLCJzd2FwQ2FzZSIsInRyYW5zZm9ybVRvQmFzaWNGb3JtYXQiLCJpc1ZhbGlkRW1haWwiLCJlbWFpbCIsImlzVmFsaWRQaG9uZU51bWJlciIsImdldEFzY2lpQXJyYXkiLCJ0b0Jhc2ljRm9ybSIsImdldEZvcm1hdHRlZE51bWJlciIsIkNyZWF0ZUVsZW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiY2hlY2tlZCIsInN0eWxlRW50cnkiLCJwYXJlbnQiLCJxdWVyeVNlbGVjdG9yIiwiY2xhc3NlcyIsImVsZW1lbnRUb1N0cmluZyIsInNob3dQYXJlbnQiLCJsb2NhbE5hbWUiLCJoZWFkZXJTZWxlY3RvciIsInBvczEiLCJwb3MyIiwicG9zMyIsInBvczQiLCJkcmFnTW91c2VEb3duIiwicHJldmVudERlZmF1bHQiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9ucG9pbnRlcnVwIiwiY2xvc2VEcmFnRWxlbWVudCIsIm9ucG9pbnRlcm1vdmUiLCJlbGVtZW50RHJhZyIsImhlYWRlciIsImNsZWFyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNyb3NzT3JpZ2luIiwibGFiZWwiLCJvbkNoYW5nZSIsImlucHV0RWxlbWVudCIsImNoaWxkcmVuIiwidG9GaXhlZCIsInhGaW5hbCIsInlGaW5hbCIsIlJhbmRvbSIsInJhbmRvbUludEJldHdlZW4iLCJyYW5kb21GbG9hdEJldHdlZW4iLCJyYXRpbyIsInJhZGlhbnMiLCJwYXJ0cyIsInNoaWZ0UGFydCIsInNoaWZ0IiwiZGVjb2RlVVJJIiwiRGF0ZSIsInNldFRpbWUiLCJnZXRUaW1lIiwiZmluYWxDb29raWVzIiwidG9VVENTdHJpbmciLCJjIiwiY2hhckF0IiwicXVlcnlTdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJvYmpLZXkiLCJldmFsIiwiZGVzdGluYXRpb24iLCJtYXBGdW5jdGlvbiIsImF0dHJEIiwiYXR0clMiLCJDcmVhdGVJbWFnZSIsIm9uZXJyb3IiLCJkaXNwbGF5IiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2NyaXB0IiwiZGVmZXIiLCJoZWFkIiwiZ2V0T2JqZWN0RW50cmllcyIsImZpbHRlciIsImluY2x1ZGVzIiwicHJldiIsImN1cnJlbnROZXN0ZWRQcm9wZXJ0eVZhbHVlIiwicHJvcGVydHlOYW1lIiwidW5kZWZpbmVkIiwic3BsaXRLZXkiLCJvYmplY3RMaXN0IiwiYnl0ZXMiLCJwb3AiLCJza2lwVW5kZWZpbmVkIiwicHJvcGVydHlMaXN0IiwiYWNjIiwiY3VyciIsInByb3BWYWwiLCJ0ZW1wIiwiY3JlYXRlIiwiZnVuY3Rpb25zIiwidGltZUZvcm1hdHMiLCJISCIsIkgiLCJtbSIsIm0iLCJNTSIsIk0iLCJzcyIsIllZWVkiLCJZWSIsIkREIiwidGVzdCIsImFjY2VudGVkTG93ZXJDaGFyYWN0ZXJzIiwibm9ybWFsTG93ZXJDaGFyYWN0ZXJzIiwiYWNjZW50ZWRDaGFyYWN0ZXJzIiwibm9ybWFsQ2hhcmFjdGVycyIsIm1hdGgiLCJzZXAiLCJzcGxpdFRleHQiLCJudW1iZXJPZlJlcGV0aXRpb25zIiwicmVnZXhwIiwic3RhcnRQb3MiLCJlbmRQb3MiLCJsb3dlckNhc2UiLCJ0aGlzQXJnIiwibGV0dGVyIiwiY2hhckNvZGVBdCIsInBsYWNlSG9sZGVyIiwiaW50ZXJ2YWxFbnRyaWVzIiwic2V0RGF0ZSIsImRhdGUiLCJvcHQiLCJtcyIsInNldE1pbGxpc2Vjb25kcyIsInNldFNlY29uZHMiLCJzZXRNaW51dGVzIiwic2V0SG91cnMiLCJzZWNvbmRzIiwiY291bnRlciIsImludGVydmFsIiwicGF0dGVybiIsInRpbWUiLCJyZWdleCIsImdldERhdGUiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwiWVlZIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiU1MiLCJnZXRTZWNvbmRzIiwidmFsaWRFbWFpbFJlZ2V4IiwidmFsaWRQaG9uZU51bWJlclJlZ2V4IiwidHlwZU9mIiwiYXJnIiwiSFRNTEVsZW1lbnQiLCJub2RlVHlwZSIsIm93bmVyRG9jdW1lbnQiLCJrZXlzIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNhbGwiXSwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxJQUNRLG1CQUFYRyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sU0FBVSxHQUFJSCxHQUNLLGlCQUFaQyxRQUNkQSxRQUFnQixPQUFJ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QUNibFMsRUFBSWtTLFNBQVMsVUFDYmxTLEVBQUlrUyxTQUFTLFVBQ2JsUyxFQUFJa1MsU0FBUyxVQUNibFMsRUFBSWtTLFNBQVMsVUFDYmxTLEVBQUlrUyxTQUFTLFVBQ2JsUyxFQUFJa1MsU0FBUyxVQUNibFMsRUFBSWtTLFNBQVMsVUFDYmxTLEVBQUlrUyxTQUFTLFVBRWIsT0FBT2xTLEVBQUltUyxVQUFVLEVBQUdILEVBQU0sR0FHbEMsR0FBSUEsRUFBTSxJQUNMaFMsRUFBSWtTLFNBQVMsU0FDVmxTLEVBQUlrUyxTQUFTLFNBQ2JsUyxFQUFJa1MsU0FBUyxTQUNibFMsRUFBSWtTLFNBQVMsU0FDYmxTLEVBQUlrUyxTQUFTLFNBQ2JsUyxFQUFJa1MsU0FBUyxTQUNibFMsRUFBSWtTLFNBQVMsU0FDYmxTLEVBQUlrUyxTQUFTLFNBQ2JsUyxFQUFJa1MsU0FBUyxTQUNibFMsRUFBSWtTLFNBQVMsU0FDYmxTLEVBQUlrUyxTQUFTLFNBQ2JsUyxFQUFJa1MsU0FBUyxTQUNibFMsRUFBSWtTLFNBQVMsU0FFYmxTLEVBQUlrUyxTQUFTLFNBQ2pCLE9BQU9sUyxFQUFJbVMsVUFBVSxFQUFHSCxFQUFNLEdBR2xDLEdBQUlBLEVBQU0sSUFDTGhTLEVBQUlrUyxTQUFTLFFBQ1ZsUyxFQUFJa1MsU0FBUyxRQUNibFMsRUFBSWtTLFNBQVMsUUFDYmxTLEVBQUlrUyxTQUFTLFFBQ2JsUyxFQUFJa1MsU0FBUyxRQUNibFMsRUFBSWtTLFNBQVMsUUFDYmxTLEVBQUlrUyxTQUFTLFFBQ2JsUyxFQUFJa1MsU0FBUyxRQUVibFMsRUFBSWtTLFNBQVMsUUFDYmxTLEVBQUlrUyxTQUFTLFFBQ2JsUyxFQUFJa1MsU0FBUyxRQUNibFMsRUFBSWtTLFNBQVMsUUFDYmxTLEVBQUlrUyxTQUFTLFFBSWJsUyxFQUFJa1MsU0FBUyxRQUNibFMsRUFBSWtTLFNBQVMsUUFDYmxTLEVBQUlrUyxTQUFTLFFBQ2JsUyxFQUFJa1MsU0FBUyxRQUNibFMsRUFBSWtTLFNBQVMsUUFDYmxTLEVBQUlrUyxTQUFTLFFBQ2JsUyxFQUFJa1MsU0FBUyxRQUNibFMsRUFBSWtTLFNBQVMsUUFDYmxTLEVBQUlrUyxTQUFTLFFBQ2JsUyxFQUFJa1MsU0FBUyxRQUNibFMsRUFBSWtTLFNBQVMsUUFDYmxTLEVBQUlrUyxTQUFTLFFBQ2JsUyxFQUFJa1MsU0FBUyxRQUNibFMsRUFBSWtTLFNBQVMsUUFFYmxTLEVBQUlrUyxTQUFTLFFBQ2JsUyxFQUFJa1MsU0FBUyxRQUNibFMsRUFBSWtTLFNBQVMsUUFDYmxTLEVBQUlrUyxTQUFTLFFBQ2JsUyxFQUFJa1MsU0FBUyxRQUNibFMsRUFBSWtTLFNBQVMsUUFDYmxTLEVBQUlrUyxTQUFTLFFBRWpCLE9BQU9sUyxFQUFJbVMsVUFBVSxFQUFHSCxFQUFNLEdBR2xDLEdBQUlBLEVBQU0sSUFFRmhTLEVBQUlrUyxTQUFTLE9BQ2JsUyxFQUFJa1MsU0FBUyxPQUNibFMsRUFBSWtTLFNBQVMsT0FDYmxTLEVBQUlrUyxTQUFTLE9BQ2JsUyxFQUFJa1MsU0FBUyxPQUNibFMsRUFBSWtTLFNBQVMsT0FDYmxTLEVBQUlrUyxTQUFTLE9BQ2JsUyxFQUFJa1MsU0FBUyxPQUNibFMsRUFBSWtTLFNBQVMsT0FDYmxTLEVBQUlrUyxTQUFTLE9BQ2JsUyxFQUFJa1MsU0FBUyxPQUNibFMsRUFBSWtTLFNBQVMsT0FDYmxTLEVBQUlrUyxTQUFTLE9BQ2JsUyxFQUFJa1MsU0FBUyxPQUNibFMsRUFBSWtTLFNBQVMsT0FDYmxTLEVBQUlrUyxTQUFTLE9BQ2JsUyxFQUFJa1MsU0FBUyxPQUNibFMsRUFBSWtTLFNBQVMsT0FDYmxTLEVBQUlrUyxTQUFTLE9BQ2JsUyxFQUFJa1MsU0FBUyxPQUNibFMsRUFBSWtTLFNBQVMsT0FDYmxTLEVBQUlrUyxTQUFTLE9BQ2JsUyxFQUFJa1MsU0FBUyxPQUNibFMsRUFBSWtTLFNBQVMsT0FDYmxTLEVBQUlrUyxTQUFTLE9BQ2JsUyxFQUFJa1MsU0FBUyxPQUNibFMsRUFBSWtTLFNBQVMsT0FDYmxTLEVBQUlrUyxTQUFTLE9BQ2pCLE9BQU9sUyxFQUFJbVMsVUFBVSxFQUFHSCxFQUFNLEdBR2xDLEdBQUlB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QUFTdEMsRUFBSThwQixpQkFHekIsbUJBQXdCdnhCLEdBQ3BCLFFBQUtBLElBSWUsaUJBQVZBLEVBQ0NBLEVBQU1yRSxPQUFTLEdBQUssY0FBYzh5QixLQUFLenVCLEdBRTlDa0ksTUFBTUMsUUFBUW5JLEdBQ1BBLEVBQU1yRSxPQUFTLEVBR3RCcUUsRUFBTXZDLGNBQWdCdUYsUUFDZkEsT0FBT3d1QixLQUFLeHhCLEdBQU9yRSxPQUFTLElBTTNDLDhCQUFtQzBsQixHQUMvQixRQUFLQSxHQUlFNlAsRUFBc0J6QyxLQUFLcE4sRUFBSS9qQixTQUcxQyx3QkFBNkIrcUIsR0FDekIsUUFBS0EsR0FJRTRJLEVBQWdCeEMsS0FBS3BHLEVBQU0vcUIsVSw4c0JDbEZ0QyxjQUFTLHdFQUFBMmxCLGNBQ1QsY0FBUyxzRUFBQWtCLGFBQ1QsY0FBUyxxRUFBQS9ILFlBQ1QsY0FBUyxzRUFBQXdKLGFBQ1QsY0FBUzVpQixPQUFBLGlFQUFBa2pCLGVBQ1QsY0FBUyx3RUFBQW5HLGVBQ1Qsa0JBRUEsY0FBUyx5RUFBQW5QLGlCQUlULGNBQVMsdUVBQUE1SSxZQUNULGFBQVMsd0VBQUFwRSxpQkFDVCxjQUFTLHFFQUFBdUgsVyx5QkNqQkxzbUIseUJBQTJCLEdBRy9CLFNBQVNDLG9CQUFvQkMsR0FFNUIsR0FBR0YseUJBQXlCRSxHQUMzQixPQUFPRix5QkFBeUJFLEdBQVVsNEIsUUFHM0MsSUFBSUMsRUFBUyszQix5QkFBeUJFLEdBQVksQ0FHakRsNEIsUUFBUyxJQU9WLE9BSEFtNEIsb0JBQW9CRCxHQUFVRSxLQUFLbjRCLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNpNEIscUJBR3BFaDRCLEVBQU9ELFFDakJmLE9BQU9pNEIsb0JBQW9CLE8iLCJmaWxlIjoiZzQzLWxpYi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcIkc0M0xpYlwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJHNDNMaWJcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiRzQzTGliXCJdID0gZmFjdG9yeSgpO1xufSkoc2VsZiwgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiZXhwb3J0ICogZnJvbSBcIi4vbm9kZVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi93ZWJcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY29tbW9uXCI7XHJcblxyXG5cclxuZXhwb3J0ICogZnJvbSBcIi4vY29tcG9uZW50c1wiO1xyXG5cclxuZXhwb3J0ICogZnJvbSBcIi4vY29uZmlnL2d0b29scy1jb25maWcuaW50ZXJmYWNlXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2NvbmZpZy9ndG9vbHMtY29uZmlnXCI7XHJcblxyXG5leHBvcnQgKiBmcm9tIFwiLi9kZWNvcmF0b3JzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2RvbS9jYW52YXMtbWFuYWdlclwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9kb20vY2FudmFzLXV0aWxzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2RvbS9kZXByZWNhdGVkL2NoZWNrZXJzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2RvbS9kb20tZ2V0XCI7XHJcblxyXG4vLyBUT0RPIG5vdCB3b3JrIG9uIGJhY2tlbmRcclxuLy8gZXhwb3J0ICogZnJvbSBcIi4vZG9tL2VsZW1lbnQtYnVpbGRlclwiO1xyXG5cclxuLy8gZXhwb3J0ICogZnJvbSBcIi4vZW51bXNcIjtcclxuXHJcbi8vIGV4cG9ydCAqIGZyb20gXCIuL2Vycm9yc1wiO1xyXG5cclxuZXhwb3J0ICogZnJvbSBcIi4vdmFsaWRhdG9yc1wiO1xyXG5cclxuZXhwb3J0ICogZnJvbSBcIi4vbWlzY1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9tYXRoXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3BoeXNpY3NcIjtcclxuXHJcbmV4cG9ydCAqIGZyb20gXCIuL21vZGVsc1wiO1xyXG5cclxuZXhwb3J0ICogZnJvbSBcIi4vdGVzdHMvYWJzdHJhY3QtZGF0YWJhc2UuZml4dHVyZVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi90ZXN0cy9hYnN0cmFjdC5maXh0dXJlXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3Rlc3RzL2Fic3RyYWN0Lm1hcHBlclwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi90ZXN0cy9wYWdpbmF0ZS5tb2RlbFwiO1xyXG5cclxuZXhwb3J0ICogZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbi8vIGV4cG9ydCAqIGZyb20gXCIuL3V0aWxzXCI7XHJcbiIsIi8vIFVUSUxTXHJcblxyXG5leHBvcnQgKiBmcm9tIFwiLi91dGlscy9kZXByZWNhdGVkL1N0cmluZ0NoZWNrZXJzXCI7XHJcblxyXG4vLyBNT0RFTFNcclxuXHJcbmV4cG9ydCB7IEdlbmRlclR5cGUsIEdlbmRlciB9IGZyb20gXCIuL21vZGVscy9nZW5kZXIubW9kZWxcIjtcclxuXHJcbi8vIEVOVU1TXHJcblxyXG5leHBvcnQgKiBmcm9tIFwiLi9lbnVtcy9lbmNvZGluZ3MuZW51bVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9lbnVtcy9maWxlLXR5cGVzLmVudW1cIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vZW51bXMvaHR0cC1zdGF0dXMtY29kZXMuZW51bVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9lbnVtcy9rZXlzLmVudW1cIjtcclxuXHJcbi8vIENPTVBPTkVOVFNcclxuXHJcbmV4cG9ydCAqIGZyb20gXCIuL2NvbXBvbmVudHMva2V5LXZhbHVlLWNvdW50ZXJcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY29tcG9uZW50cy9udW1iZXItY291bnRlclwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jb21wb25lbnRzL2ZpbGUtbWFuYWdlclwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jb21wb25lbnRzL3BhZ2luYXRvclwiO1xyXG5cclxuLy8gTUFUSFNcclxuXHJcbmV4cG9ydCAqIGZyb20gXCIuL21hdGgvdmVjdG9yMmZcIjtcclxuXHJcbi8vIENPTkZJR1xyXG5cclxuZXhwb3J0IHsgaW5pdENvbmZpZyB9IGZyb20gXCIuL2NvbmZpZy9ndG9vbHMtY29uZmlnXCI7XHJcblxyXG4vLyBJTlRFUkZBQ0VTXHJcblxyXG5leHBvcnQgKiBmcm9tIFwiLi90eXBlcy9rZXktdmFsdWUuaW50ZXJmYWNlXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3R5cGVzL3N0cmluZy1tYXAuaW50ZXJmYWNlXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3R5cGVzL3NpemUuaW50ZXJhZmFjZVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi90eXBlcy9wb2ludC5pbnRlcmFmYWNlXCI7XHJcblxyXG4vLyBURVNUU1xyXG5cclxuZXhwb3J0ICogZnJvbSBcIi4vdGVzdHMvYWJzdHJhY3QtZGF0YWJhc2UuZml4dHVyZVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi90ZXN0cy9hYnN0cmFjdC5maXh0dXJlXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3Rlc3RzL2Fic3RyYWN0Lm1hcHBlclwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi90ZXN0cy9wYWdpbmF0ZS5tb2RlbFwiO1xyXG4iLCJpbXBvcnQgeyBGaWxlVHlwZXMgfSBmcm9tIFwiLi4vZW51bXMvZmlsZS10eXBlcy5lbnVtXCI7XHJcblxyXG4vKipcclxuICogIEZpbGVNYW5hZ2VyIGlzIGNsYXNzIHVzZWQgZm9yIG9wZW4gYW5kIHNhdmUgZmlsZXNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBGaWxlTWFuYWdlciB7XHJcbiAgICAvKipcclxuICAgICAqIHByaXZhdGUgaW5wdXQgdXNlZCBmb3Igb3BlbmluZyBzeXN0ZW0gd2luZG93IGZvciB1cGxvYWQgZmlsZXNcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBpbnB1dDogSFRNTElucHV0RWxlbWVudDtcclxuICAgIC8qKlxyXG4gICAgICogcHJpdmF0ZSBpbnB1dCB1c2VkIGZvciBvcGVuaW5nIHN5c3RlbSB3aW5kb3cgZm9yIGRvd25sb2FkIGZpbGVzXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgbGluazogSFRNTEFuY2hvckVsZW1lbnQ7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICAgICAgdGhpcy5pbnB1dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiZmlsZVwiKTtcclxuICAgICAgICB0aGlzLmlucHV0LnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIFwiZmlsZXNcIik7XHJcbiAgICAgICAgdGhpcy5pbnB1dC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImhpZGVcIik7XHJcblxyXG4gICAgICAgIHRoaXMubGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xyXG4gICAgICAgIHRoaXMubGluay5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImhpZGVcIik7XHJcbiAgICAgICAgdGhpcy5saW5rLnNldEF0dHJpYnV0ZShcImhyZWZcIiwgXCJcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTYXZlIHRleHQgY29udGVudCBpbnRvIGZpbGUgd2l0aCBzcGVjaWZpYyBleHRlbnNpb25zXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWUgZmlsZSBuYW1lXHJcbiAgICAgKiBAcGFyYW0gdGV4dCBmaWxlIGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB0eXBlIGZpbGUge0BsaW5rIEZpbGVUeXBlc30uIERlZmF1bCB2YWx1ZSBpcyB7QGxpbmsgRmlsZVR5cGVzLlRYVH1cclxuICAgICAqL1xyXG4gICAgcHVibGljIHNhdmVGaWxlKG5hbWU6IHN0cmluZywgdGV4dDogc3RyaW5nLCB0eXBlOiBGaWxlVHlwZXMgPSBGaWxlVHlwZXMuVFhUKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5saW5rLmhyZWYgICAgID0gVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihbdGV4dF0sIHt0eXBlfSkpO1xyXG4gICAgICAgIHRoaXMubGluay5kb3dubG9hZCA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5saW5rLmNsaWNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTYXZlIGltYWdlIGludG8gZmlsZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuYW1lIGltYWdlIG5hbWVcclxuICAgICAqIEBwYXJhbSBpbWFnZSBpbWFnZSBlbGVtZW50IG9yIHBhdGggdG8gaW1hZ2VcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNhdmVJbWFnZShuYW1lOiBzdHJpbmcsIGltYWdlOiBzdHJpbmcgfCBIVE1MSW1hZ2VFbGVtZW50KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5saW5rLmhyZWYgICAgID0gdHlwZW9mIGltYWdlID09PSBcInN0cmluZ1wiID8gaW1hZ2UgOiBpbWFnZS5zcmM7XHJcbiAgICAgICAgdGhpcy5saW5rLmRvd25sb2FkID0gbmFtZTtcclxuICAgICAgICB0aGlzLmxpbmsuY2xpY2soKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIExvYWQgaW1hZ2UgdXNpbmcgc3lzdGVtIGZpbGUgcGlja2VyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtICBmdW5jIGxvYWRpbmcgY2FsbGJhY2tcclxuICAgICAqL1xyXG4gICAgcHVibGljIGxvYWRJbWFnZShmdW5jOiAocmVzdWx0OiBhbnksIGZpbGVOYW1lOiBzdHJpbmcpID0+IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaW5wdXQub25jaGFuZ2UgPSAoZXZlbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBmaWxlcyAgICAgICAgICAgICAgPSBldmVudC50YXJnZXQuZmlsZXM7XHJcbiAgICAgICAgICAgIGlmIChmaWxlcy5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHJlYWRlcjogRmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgIHJlYWRlci5vbmxvYWQgICAgICAgICAgICA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgICAgICAgICBpbWFnZS5zcmMgICA9IHJlYWRlci5yZXN1bHQgYXMgc3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgZnVuYyhpbWFnZSwgZmlsZXNbMF0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlc1swXSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmlucHV0LmNsaWNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMb2FkIGZpbGUgdXNpbmcgc3lzdGVtIGZpbGUgcGlja2VyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGZ1bmMgbG9hZGluZyBjYWxsYmFja1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbG9hZEZpbGUoZnVuYzogKHJlc3VsdDogYW55LCBmaWxlczogYW55KSA9PiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmlucHV0Lm9uY2hhbmdlID0gKGU6IEV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVzICA9IChlLnRhcmdldCBhcyBhbnkpLmZpbGVzO1xyXG4gICAgICAgICAgICBpZiAoZmlsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IGZ1bmMocmVhZGVyLnJlc3VsdCwgZmlsZXMpO1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZXNbMF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmlucHV0LmNsaWNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMb2FkIGJpbmFyeSBmaWxlIHVzaW5nIHN5c3RlbSBmaWxlIHBpY2tlclxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBmdW5jIGxvYWRpbmcgY2FsbGJhY2tcclxuICAgICAqL1xyXG4gICAgcHVibGljIGxvYWRCaW5hcnlGaWxlKGZ1bmM6IChyZXN1bHQ6IGFueSwgZmlsZU5hbWU6IHN0cmluZykgPT4gYW55KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5pbnB1dC5vbmNoYW5nZSA9IChldmVudDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVzICA9IGV2ZW50LnRhcmdldC5maWxlcztcclxuICAgICAgICAgICAgaWYgKGZpbGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHJlYWRlci5vbmxvYWQgPSAoKSA9PiBmdW5jKHJlYWRlci5yZXN1bHQsIGZpbGVzWzBdLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlYWRBc0JpbmFyeVN0cmluZyhmaWxlc1swXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuaW5wdXQuY2xpY2soKTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgR0xvZ2dlckluc3RhbmNlIHtcclxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGNvbnRleHQ/OiBzdHJpbmcgfCB7IGNvbnN0cnVjdG9yOiB7IG5hbWU6IHN0cmluZyB9IH0pIHtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbG9nKC4uLm1lc3NhZ2VzOiBhbnlbXSk6IHZvaWQge1xyXG4gICAgICAgIEdMb2dnZXIucHJpbnQoXCJsb2dcIiwgdGhpcy5jb250ZXh0LCAuLi5tZXNzYWdlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHdhcm4oLi4ubWVzc2FnZXM6IGFueVtdKTogdm9pZCB7XHJcbiAgICAgICAgR0xvZ2dlci5wcmludChcIndhcm5cIiwgdGhpcy5jb250ZXh0LCAuLi5tZXNzYWdlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGVycm9yKC4uLm1lc3NhZ2VzOiBhbnlbXSk6IHZvaWQge1xyXG4gICAgICAgIEdMb2dnZXIucHJpbnQoXCJlcnJvclwiLCB0aGlzLmNvbnRleHQsIC4uLm1lc3NhZ2VzKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEdMb2dnZXIgZXh0ZW5kcyBHTG9nZ2VySW5zdGFuY2Uge1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXRMaW5lKHN0ZXBzID0gMik6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoKTtcclxuICAgICAgICBpZiAoZXJyb3Iuc3RhY2spIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0cyA9IGVycm9yLnN0YWNrLnNwbGl0KFwiXFxuXCIpW3N0ZXBzXS50cmltKCkubWF0Y2goL1xcKC4qXFwpLyk7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHRzICYmIHJlc3VsdHNbMF0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImF0IFwiICsgcmVzdWx0c1swXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRleHQ/OiBzdHJpbmcgfCB7IGNvbnN0cnVjdG9yOiB7IG5hbWU6IHN0cmluZyB9IH0pIHtcclxuICAgICAgICBzdXBlcihjb250ZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBza2lwQ29udGV4dHMgPSBbXCJyZW5kZXJXb3JsZFN0YXRpY1wiLCBcIkNhbnZhc0RpcmVjdGl2ZVwiLCBcIldvcmxkUmVuZGVyZXJTZXJ2aWNlXCIsIFwidmlld3BvcnRcIiwgXCJXb3JsZElucHV0U2VydmljZVwiXTtcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IHNraXBSZWdleHAgICA9IG5ldyBSZWdFeHAoYCR7R0xvZ2dlci5za2lwQ29udGV4dHMuam9pbihcInxcIil9YCwgXCJnaVwiKTtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHByaW50KHR5cGU6IFwibG9nXCIgfCBcIndhcm5cIiB8IFwiZXJyb3JcIiwgY29udGV4dDogc3RyaW5nIHwgeyBjb25zdHJ1Y3RvcjogeyBuYW1lOiBzdHJpbmcgfSB9ID0gXCJcIiwgLi4uZGF0YTogYW55W10pOiB2b2lkIHtcclxuICAgICAgICBjb25zdCByZWFsQ29udGV4dCA9IGNvbnRleHQgJiYgKHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiID8gY29udGV4dCA6IGNvbnRleHQ/LmNvbnN0cnVjdG9yPy5uYW1lKTtcclxuICAgICAgICBjb25zdCByZXN1bHQgICAgICA9IHJlYWxDb250ZXh0ICYmIHJlYWxDb250ZXh0Lm1hdGNoKEdMb2dnZXIuc2tpcFJlZ2V4cCk7XHJcbiAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHByZWZpeCA9IHJlYWxDb250ZXh0ID8gYFske3JlYWxDb250ZXh0fV0gYCA6IFwiXCI7XHJcbiAgICAgICAgY29uc29sZVt0eXBlXShwcmVmaXgsIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgbG9nKG1lc3NhZ2U6IHN0cmluZyB8IHN0cmluZ1tdLCBjb250ZXh0Pzogc3RyaW5nIHwgeyBjb25zdHJ1Y3RvcjogeyBuYW1lOiBzdHJpbmcgfSB9KTogdm9pZCB7XHJcbiAgICAgICAgR0xvZ2dlci5wcmludChcImxvZ1wiLCBjb250ZXh0LCBtZXNzYWdlKTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgR01hcDxULCBTPiBleHRlbmRzIE1hcDxULCBTPiB7XHJcbiAgICBwdWJsaWMgZ2V0KGtleTogVCwgZGVmYXVsdFZhbHVlPzogUyk6IFMgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiBzdXBlci5nZXQoa2V5KSB8fCBkZWZhdWx0VmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldE9yQ3JlYXRlKGtleTogVCwgZGVmYXVsdFZhbHVlOiBTKTogUyB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuZ2V0KGtleSk7XHJcbiAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldChrZXksIGRlZmF1bHRWYWx1ZSk7XHJcblxyXG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0ICogZnJvbSBcIi4vZmlsZS1tYW5hZ2VyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2ctbG9nZ2VyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2ctbWFwXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2tleS12YWx1ZS1jb3VudGVyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL251bWJlci1jb3VudGVyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3BhZ2luYXRvclwiO1xyXG4iLCJleHBvcnQgaW50ZXJmYWNlIFNpbXBsZVdyYXBwZXIge1xyXG4gICAga2V5OiBzdHJpbmc7XHJcbiAgICBjb3VudDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgS2V5VmFsdWVDb3VudGVyPFQ+IHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZGF0YToge1trZXk6IHN0cmluZ106IG51bWJlciB9ICAgICAgICAgICAgICAgID0ge307XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJlc3VsdHM6IFNpbXBsZVdyYXBwZXJbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBwcm9jZXNzZWQgICAgICAgICAgICAgICAgICAgICAgICAgPSBmYWxzZTtcclxuXHJcbiAgICBwdWJsaWMgYWRkKGl0ZW06IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIGlmIChpdGVtIGluIHRoaXMuZGF0YSkge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFbaXRlbV0hKys7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhW2l0ZW1dID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucHJvY2Vzc2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRBbGwoaXRlbXM6IHN0cmluZ1tdKTogdm9pZCB7XHJcbiAgICAgICAgaXRlbXMuZm9yRWFjaCh0aGlzLmFkZCwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEFsbCgpOiBTaW1wbGVXcmFwcGVyW10ge1xyXG4gICAgICAgIGlmICghdGhpcy5wcm9jZXNzZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5yZXN1bHRzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRUb3BOKGNvdW50OiBudW1iZXIpOiBTaW1wbGVXcmFwcGVyW10ge1xyXG4gICAgICAgIGlmICghdGhpcy5wcm9jZXNzZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5yZXN1bHRzLnNsaWNlKDAsIGNvdW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Q291bnQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRBbGwoKS5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwcm9jZXNzKCk6IHZvaWQge1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuZGF0YSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0cy5wdXNoKHtrZXksIGNvdW50OiB0aGlzLmRhdGFba2V5XSF9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlc3VsdHMuc29ydCgoYSwgYikgPT4gYi5jb3VudCAtIGEuY291bnQpO1xyXG4gICAgICAgIHRoaXMucHJvY2Vzc2VkID0gdHJ1ZTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgTnVtYmVyQ291bnRlciB7XHJcbiAgICBwcml2YXRlIG1pbiAgICAgICAgICAgICAgICAgICAgICAgID0gSW5maW5pdHk7XHJcbiAgICBwcml2YXRlIG1heCAgICAgICAgICAgICAgICAgICAgICAgID0gLUluZmluaXR5O1xyXG4gICAgcHJpdmF0ZSBzdW0gICAgICAgICAgICAgICAgICAgICAgICA9IDA7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG51bWJlcnM6IG51bWJlcltdID0gW107XHJcblxyXG4gICAgcHVibGljIGFkZCh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5udW1iZXJzLnB1c2godmFsdWUpO1xyXG5cclxuICAgICAgICB0aGlzLm1pbiA9IE1hdGgubWluKHRoaXMubWluLCB2YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5tYXggPSBNYXRoLm1heCh0aGlzLm1heCwgdmFsdWUpO1xyXG4gICAgICAgIHRoaXMuc3VtICs9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRNaW4oKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5taW47XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldE1heCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1heDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Q291bnQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5udW1iZXJzLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0QXZlcmFnZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN1bSAvIHRoaXMubnVtYmVycy5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZEFsbChpdGVtczogbnVtYmVyW10pOiB2b2lkIHtcclxuICAgICAgICBpdGVtcy5mb3JFYWNoKHRoaXMuYWRkLCB0aGlzKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBHVG9vbHNDb25maWcgfSBmcm9tIFwiLi4vY29uZmlnL2d0b29scy1jb25maWdcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQYWdpbmF0b3I8VCA9IHVua25vd24+IHtcclxuICAgIHByaXZhdGUgYWN0TGlzdDogVFtdO1xyXG4gICAgcHJpdmF0ZSBhY3R1YWxQYWdlICAgICAgICAgICAgICAgICAgID0gMDtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgbGFzdFBhZ2U6IG51bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBhbGxJdGVtczogVFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHByaXZhdGUgcmVhZG9ubHkgaXRlbXNQZXJQYWdlID0gR1Rvb2xzQ29uZmlnLlBBR0VfTElNSVQpIHtcclxuICAgICAgICB0aGlzLmxhc3RQYWdlID0gYWxsSXRlbXMgPyBNYXRoLmZsb29yKGFsbEl0ZW1zLmxlbmd0aCAvIHRoaXMuaXRlbXNQZXJQYWdlKSA6IDA7XHJcbiAgICAgICAgdGhpcy5hY3RMaXN0ICA9IHRoaXMuX3JlQ2FsY0xpc3QoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0QWN0dWFsUGFnZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFjdHVhbFBhZ2UgKyAxO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRQYWdlcygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxhc3RQYWdlICsgMTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0UGFnZXNBcm91bmQoKTogbnVtYmVyW10ge1xyXG4gICAgICAgIGlmICh0aGlzLmFjdHVhbFBhZ2UgPCAyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbMSwgMiwgMywgNCwgNV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmFjdHVhbFBhZ2UgPiB0aGlzLmxhc3RQYWdlIC0gMykge1xyXG4gICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0UGFnZSAtIDMsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RQYWdlIC0gMixcclxuICAgICAgICAgICAgICAgIHRoaXMubGFzdFBhZ2UgLSAxLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0UGFnZSxcclxuICAgICAgICAgICAgICAgIHRoaXMubGFzdFBhZ2UgKyAxLFxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgdGhpcy5hY3R1YWxQYWdlIC0gMSxcclxuICAgICAgICAgICAgdGhpcy5hY3R1YWxQYWdlLFxyXG4gICAgICAgICAgICB0aGlzLmFjdHVhbFBhZ2UgKyAxLFxyXG4gICAgICAgICAgICB0aGlzLmFjdHVhbFBhZ2UgKyAyLFxyXG4gICAgICAgICAgICB0aGlzLmFjdHVhbFBhZ2UgKyAzLFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldExpc3QoKTogVFtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hY3RMaXN0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnb1RvTmV4dCgpOiBUW10ge1xyXG4gICAgICAgIGlmICh0aGlzLmFjdHVhbFBhZ2UgPCB0aGlzLmxhc3RQYWdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0dWFsUGFnZSsrO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlQ2FsY0xpc3QoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldExpc3QoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ290VG8ocGFnZTogbnVtYmVyKTogVFtdIHtcclxuICAgICAgICBpZiAocGFnZSA+PSAwICYmIHBhZ2UgPD0gdGhpcy5sYXN0UGFnZSkge1xyXG4gICAgICAgICAgICB0aGlzLmFjdHVhbFBhZ2UgPSBwYWdlO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlQ2FsY0xpc3QoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldExpc3QoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ29Ub1ByZXYoKTogVFtdIHtcclxuICAgICAgICBpZiAodGhpcy5hY3R1YWxQYWdlID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmFjdHVhbFBhZ2UtLTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZUNhbGNMaXN0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRMaXN0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdvVG9GaXJzdCgpOiBUW10ge1xyXG4gICAgICAgIHRoaXMuYWN0dWFsUGFnZSA9IDA7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZUNhbGNMaXN0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdvVG9MYXN0KCk6IFRbXSB7XHJcbiAgICAgICAgdGhpcy5hY3R1YWxQYWdlID0gdGhpcy5sYXN0UGFnZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlQ2FsY0xpc3QoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9yZUNhbGNMaXN0KCk6IFRbXSB7XHJcbiAgICAgICAgY29uc3Qgc3RhcnQgID0gdGhpcy5hY3R1YWxQYWdlICogdGhpcy5pdGVtc1BlclBhZ2U7XHJcbiAgICAgICAgdGhpcy5hY3RMaXN0ID0gdGhpcy5hbGxJdGVtcyA/IHRoaXMuYWxsSXRlbXMuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgdGhpcy5pdGVtc1BlclBhZ2UpIDogW107XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmFjdExpc3Q7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgR1Rvb2xzQ29uZmlnSW50ZXJmYWNlIH0gZnJvbSBcIi4vZ3Rvb2xzLWNvbmZpZy5pbnRlcmZhY2VcIjtcclxuXHJcbmxldCBjb25maWc6IEdUb29sc0NvbmZpZ0ludGVyZmFjZTtcclxuXHJcbmNvbnN0IGNoZWNrQ29uZmlnID0gKCk6IEdUb29sc0NvbmZpZ0ludGVyZmFjZSA9PiB7XHJcbiAgICBpZiAoIWNvbmZpZykge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFVSTF9BUEkgICA6IFwiXCIsXHJcbiAgICAgICAgICAgIExBTkdVQUdFICA6IFwiXCIsXHJcbiAgICAgICAgICAgIFZFUlNJT04gICA6IFwiXCIsXHJcbiAgICAgICAgICAgIFBBR0VfTElNSVQ6IDAsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY29uZmlnO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGNsYXNzIENsYXNzT3duQ29uZmlnIGV4dGVuZHMgQ2xhc3NHVG9vbHNDb25maWcgaW1wbGVtZW50cyBPd25Db25maWdJbnRlcmZhY2Uge1xyXG4gKiAgICAgcHVibGljIG5hbWUgPSBcIlwiO1xyXG4gKiB9XHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBPd25Db25maWcgPSBuZXcgQ2xhc3NPd25Db25maWcoKTtcclxuICpcclxuICogQHNlZSBHVG9vbHNDb25maWdJbnRlcmZhY2VcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDbGFzc0dUb29sc0NvbmZpZyBpbXBsZW1lbnRzIEdUb29sc0NvbmZpZ0ludGVyZmFjZSB7XHJcbiAgICBwdWJsaWMgZ2V0IFVSTF9BUEkoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gY2hlY2tDb25maWcoKS5VUkxfQVBJO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgUEFHRV9MSU1JVCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBjaGVja0NvbmZpZygpLlBBR0VfTElNSVQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBMQU5HVUFHRSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBjaGVja0NvbmZpZygpLkxBTkdVQUdFO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgVkVSU0lPTigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBjaGVja0NvbmZpZygpLlZFUlNJT047XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5pdENvbmZpZyhhcHBDb25maWc6IEdUb29sc0NvbmZpZ0ludGVyZmFjZSk6IHZvaWQge1xyXG4gICAgY29uZmlnID0gYXBwQ29uZmlnO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgR1Rvb2xzQ29uZmlnID0gbmV3IENsYXNzR1Rvb2xzQ29uZmlnKCk7XHJcbiIsImV4cG9ydCBjb25zdCBBTExPV19JTUFHRVNfT05MWV9XSVRIX0FMTE9XRURfQ09SUyA9IHRydWU7XHJcblxyXG4iLCJpbXBvcnQgeyBQcm9wZXJ0eURlY29yYXRvciB9IGZyb20gXCIuLi90eXBlcy9wcm9wZXJ0eS1kZWNvcmF0b3IudHlwZVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIERlcHJlY2F0ZWQodmFsdWU/OiBzdHJpbmcpOiBQcm9wZXJ0eURlY29yYXRvciB7XHJcbiAgICByZXR1cm4gKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpOiBhbnkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG9sZE1ldGhvZCAgPSB0YXJnZXRbcHJvcGVydHlLZXldO1xyXG4gICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSAoLi4uYXJnczogYW55W10pOiBhbnkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJNZXRob2QgXCIgKyB0YXJnZXQuY29uc3RydWN0b3IubmFtZSArIFwiLlwiICsgcHJvcGVydHlLZXkgKyBcIiBpcyBkZXByZWNhdGVkLiBcIiArICh2YWx1ZSB8fCBcIlwiKSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gb2xkTWV0aG9kLmFwcGx5KHRhcmdldCwgYXJncyk7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbn1cclxuIiwiZXhwb3J0IGZ1bmN0aW9uIEZpbmFsQ2xhc3M8VCBleHRlbmRzIG5ldyguLi5hcmdzOiBhbnlbXSkgPT4gb2JqZWN0Pih0YXJnZXQ6IFQpOiBUIHtcclxuICAgIHJldHVybiBjbGFzcyBGaW5hbCBleHRlbmRzIHRhcmdldCB7XHJcbiAgICAgICAgY29uc3RydWN0b3IoLi4uYXJnczogYW55W10pIHtcclxuICAgICAgICAgICAgaWYgKG5ldy50YXJnZXQgIT09IEZpbmFsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgaW5oZXJpdCBmcm9tIGZpbmFsIGNsYXNzXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN1cGVyKC4uLmFyZ3MpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuIiwiZXhwb3J0ICogZnJvbSBcIi4vZGVwcmVjYXRlZC5kZWNvcmF0b3JcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vZmluYWwtY2xhc3MuZGVjb3JhdG9yXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL21hcHBlci5kZWNvcmF0b3JcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vc2luZ2xldG9uLmRlY29yYXRvclwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi93YXRjaC5kZWNvcmF0b3JcIjtcclxuIiwiZXhwb3J0IGZ1bmN0aW9uIE1hcHBlcihwYXJhbXM6IHsgb25HZXQ/OiAob2xkVmFsdWU6IGFueSkgPT4gYW55LCBvblNldD86IChvbGRWYWx1ZTogYW55KSA9PiBhbnkgfSA9IHt9LCBwcmVmaXggPSBcIl9cIik6IGFueSB7XHJcbiAgICByZXR1cm4gKHRhcmdldDogYW55LCBrZXk6IHN0cmluZyk6IGFueSA9PiB7XHJcbiAgICAgICAgaWYgKCFkZWxldGUgdGFyZ2V0W2tleV0pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IgPSB7XHJcbiAgICAgICAgICAgIGVudW1lcmFibGUgIDogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgbmV3TmFtZSAgICAgICAgICAgICAgICAgICAgICAgID0gcHJlZml4ICsga2V5O1xyXG4gICAgICAgIGlmIChwYXJhbXMpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMub25HZXQgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvci5nZXQgPSAoKSA9PiBwYXJhbXMub25HZXQodGFyZ2V0W25ld05hbWVdKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IuZ2V0ID0gKCkgPT4gdGFyZ2V0W25ld05hbWVdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy5vblNldCA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLnNldCA9IChuZXdWYWw6IGFueSkgPT4gdGFyZ2V0W25ld05hbWVdID0gcGFyYW1zLm9uU2V0KG5ld1ZhbCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLnNldCA9ICh2YWx1ZSkgPT4gdGFyZ2V0W25ld05hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKTtcclxuICAgIH07XHJcbn1cclxuIiwiY29uc3QgaW5zdGFuY2VzOiB7IFtjbGFzc05hbWU6IHN0cmluZ106IGFueSB9ID0ge307XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gU2luZ2xldG9uPFQgZXh0ZW5kcyBuZXcoLi4uYXJnczogYW55W10pID0+IHt9Pihjb25zdHJ1Y3RvcjogVCk6IGFueSB7XHJcbiAgICBjb25zdCBjbGFzc05hbWUgPSBjb25zdHJ1Y3Rvci5uYW1lO1xyXG5cclxuICAgIHJldHVybiBjbGFzcyBleHRlbmRzIGNvbnN0cnVjdG9yIHtcclxuICAgICAgICBjb25zdHJ1Y3RvciguLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgICAgICAgICBzdXBlciguLi5hcmdzKTtcclxuICAgICAgICAgICAgaWYgKGluc3RhbmNlc1tjbGFzc05hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnN0YW5jZSBvZiBcIiArIGNsYXNzTmFtZSArIFwiIGlzIGFscmVhZHkgY3JlYXRlZFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbnN0YW5jZXNbY2xhc3NOYW1lXSA9IHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBQcm9wZXJ0eURlY29yYXRvciB9IGZyb20gXCIuLi90eXBlcy9wcm9wZXJ0eS1kZWNvcmF0b3IudHlwZVwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBXYXRjaE9wdGlvbnMge1xyXG4gICAgZW51bWVyYWJsZT86IGJvb2xlYW47XHJcbiAgICBjb25maWd1cmFibGU/OiBib29sZWFuO1xyXG4gICAgcHJlZml4Pzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gV2F0Y2gob25TZXQ/OiAobmV3VmFsdWU6IGFueSwgb2xkVmFsdWU6IGFueSkgPT4gYW55LCBvcHRpb25zPzogV2F0Y2hPcHRpb25zKTogUHJvcGVydHlEZWNvcmF0b3Ige1xyXG4gICAgY29uc3QgcHJlZml4ID0gb3B0aW9ucyAmJiBvcHRpb25zLnByZWZpeCB8fCBcIl9cIjtcclxuXHJcbiAgICByZXR1cm4gKHRhcmdldDogYW55LCBrZXk6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNldHRlciA9IChuZXdWYWw6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAob25TZXQpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldFtwcmVmaXggKyBrZXldID0gb25TZXQobmV3VmFsLCB0YXJnZXRbcHJlZml4ICsga2V5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGFyZ2V0W3ByZWZpeCArIGtleV0gPSBuZXdWYWw7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKCFkZWxldGUgdGFyZ2V0W2tleV0pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHtcclxuICAgICAgICAgICAgZ2V0ICAgICAgICAgOiAoKSA9PiB0YXJnZXRbcHJlZml4ICsga2V5XSxcclxuICAgICAgICAgICAgc2V0ICAgICAgICAgOiBzZXR0ZXIsXHJcbiAgICAgICAgICAgIGVudW1lcmFibGUgIDogKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMuZW51bWVyYWJsZSA9PT0gXCJib29sZWFuXCIpID8gb3B0aW9ucy5lbnVtZXJhYmxlIDogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5jb25maWd1cmFibGUgPT09IFwiYm9vbGVhblwiKSA/IG9wdGlvbnMuY29uZmlndXJhYmxlIDogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgTm90QnJvd3NlckV4Y2VwdGlvbiB9IGZyb20gXCIuLi9lcnJvcnMvbm90LWJyb3dzZXIuZXhjZXB0aW9uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FudmFzTWFuYWdlciB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxvY2FsQ2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgbG9jYWxDb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgfCBudWxsO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihhcmcxOiBIVE1MQ2FudmFzRWxlbWVudCB8IEhUTUxJbWFnZUVsZW1lbnQsIGFyZzI6IG51bWJlciwgYXJnMzogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKGFyZzEgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLmxvY2FsQ2FudmFzID0gYXJnMTtcclxuICAgICAgICAgICAgaWYgKGFyZzIgJiYgYXJnMykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDYW52YXNTaXplKGFyZzIsIGFyZzMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFyZzEgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9jYWxDYW52YXMgPSBDYW52YXNNYW5hZ2VyLmltYWdlVG9DYW52YXMoYXJnMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTm90QnJvd3NlckV4Y2VwdGlvbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubG9jYWxDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGFyZzEgJiYgYXJnMikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDYW52YXNTaXplKGFyZzEsIGFyZzIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubG9jYWxDb250ZXh0ID0gdGhpcy5sb2NhbENhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBjYW52YXMoKTogSFRNTENhbnZhc0VsZW1lbnQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsQ2FudmFzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgY29udGV4dCgpOiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgfCBudWxsIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbENvbnRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBjbGVhckNhbnZhcyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk6IHZvaWQge1xyXG4gICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY3R4LmNhbnZhcy53aWR0aCwgY3R4LmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgc2V0Q2FudmFzU2l6ZShjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LCB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoLCBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQpOiB2b2lkIHtcclxuICAgICAgICBjYW52YXMud2lkdGggID0gd2lkdGg7XHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHNldFNoYWRvdyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgeDogbnVtYmVyLCB5OiBudW1iZXIsIGNvbG9yOiBzdHJpbmcsIGJsdXI6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGN0eC5zaGFkb3dDb2xvciAgID0gY29sb3I7XHJcbiAgICAgICAgY3R4LnNoYWRvd0JsdXIgICAgPSBibHVyO1xyXG4gICAgICAgIGN0eC5zaGFkb3dPZmZzZXRYID0geDtcclxuICAgICAgICBjdHguc2hhZG93T2Zmc2V0WSA9IHk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBpbWFnZVRvQ2FudmFzKGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50KTogSFRNTENhbnZhc0VsZW1lbnQge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEJyb3dzZXJFeGNlcHRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY2FudmFzICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgY2FudmFzLndpZHRoICA9IGltYWdlLndpZHRoO1xyXG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XHJcbiAgICAgICAgY29uc3QgY3R4ICAgICA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgaWYgKGN0eCkge1xyXG4gICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltYWdlLCAwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjYW52YXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBzZXRMaW5lRGFzaChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgLi4uYXJnczogbnVtYmVyW10pOiB2b2lkIHtcclxuICAgICAgICBpZiAodHlwZW9mIGN0eC5zZXRMaW5lRGFzaCA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaChhcmdzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBjYWxjVGV4dFdpZHRoKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB2YWx1ZTogc3RyaW5nLCBmb250Pzogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAoZm9udCkge1xyXG4gICAgICAgICAgICBjdHguZm9udCA9IGZvbnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY3R4Lm1lYXN1cmVUZXh0KHZhbHVlKS53aWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGNhbnZhc1RvSW1hZ2UoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgZm9ybWF0ID0gXCJpbWFnZS9wbmdcIik6IEhUTUxJbWFnZUVsZW1lbnQge1xyXG4gICAgICAgIGNvbnN0IGltYWdlICA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIGltYWdlLnNyYyAgICA9IGNhbnZhcy50b0RhdGFVUkwoZm9ybWF0KTtcclxuICAgICAgICBpbWFnZS53aWR0aCAgPSBjYW52YXMud2lkdGg7XHJcbiAgICAgICAgaW1hZ2UuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGltYWdlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRJbWFnZSgpOiBIVE1MSW1hZ2VFbGVtZW50IHtcclxuICAgICAgICByZXR1cm4gQ2FudmFzTWFuYWdlci5jYW52YXNUb0ltYWdlKHRoaXMubG9jYWxDYW52YXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRTaGFkb3coeDogbnVtYmVyLCB5OiBudW1iZXIsIGNvbG9yOiBzdHJpbmcsIGJsdXI6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmxvY2FsQ29udGV4dCkge1xyXG4gICAgICAgICAgICBDYW52YXNNYW5hZ2VyLnNldFNoYWRvdyh0aGlzLmxvY2FsQ29udGV4dCwgeCwgeSwgY29sb3IsIGJsdXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2hvdyhmb3JtYXQgPSBcImltYWdlL3BuZ1wiKTogdm9pZCB7XHJcbiAgICAgICAgd2luZG93Lm9wZW4odGhpcy5sb2NhbENhbnZhcy50b0RhdGFVUkwoZm9ybWF0KSwgXCJfYmxhbmtcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsZWFyQ2FudmFzKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmxvY2FsQ29udGV4dCkge1xyXG4gICAgICAgICAgICBDYW52YXNNYW5hZ2VyLmNsZWFyQ2FudmFzKHRoaXMubG9jYWxDb250ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldENhbnZhc1NpemUod2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCwgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0KTogdm9pZCB7XHJcbiAgICAgICAgQ2FudmFzTWFuYWdlci5zZXRDYW52YXNTaXplKHRoaXMubG9jYWxDYW52YXMsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhcHBlbmRUbyhlbGVtZW50OiBFbGVtZW50KTogRWxlbWVudCB7XHJcbiAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmxvY2FsQ2FudmFzKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVmVjdG9yMmYgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3IyZlwiO1xyXG5pbXBvcnQgeyBDYW52YXNNYW5hZ2VyIH0gZnJvbSBcIi4vY2FudmFzLW1hbmFnZXJcIjtcclxuaW1wb3J0IHsgQ2hlY2tlcnMgfSBmcm9tIFwiLi9kZXByZWNhdGVkL0NoZWNrZXJzXCI7XHJcblxyXG5kZWNsYXJlIGNvbnN0ICQ6IGFueTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FudmFzU2hhZG93Q29uZmlnIHtcclxuICAgIHg6IG51bWJlcjtcclxuICAgIHk6IG51bWJlcjtcclxuICAgIGNvbG9yOiBzdHJpbmc7XHJcbiAgICBibHVyOiBudW1iZXI7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBDYW52YXNDb25maWcge1xyXG4gICAgc2hhZG93PzogQ2FudmFzU2hhZG93Q29uZmlnO1xyXG4gICAgcG9zaXRpb24/OiBudW1iZXIgfCBWZWN0b3IyZjtcclxuICAgIGNlbnRlcj86IGJvb2xlYW47XHJcbiAgICBzaXplPzogbnVtYmVyIHwgVmVjdG9yMmY7XHJcbiAgICBiZ0ltYWdlPzoge1xyXG4gICAgICAgIGltZzogSFRNTEltYWdlRWxlbWVudDtcclxuICAgICAgICB4OiBudW1iZXI7XHJcbiAgICAgICAgeTogbnVtYmVyO1xyXG4gICAgICAgIHc6IG51bWJlcjtcclxuICAgICAgICBoOiBudW1iZXI7XHJcbiAgICB9O1xyXG4gICAgZmlsbDogYm9vbGVhbjtcclxuICAgIGZpbGxDb2xvcjogc3RyaW5nO1xyXG4gICAgZHJhdzogYm9vbGVhbjtcclxuICAgIGJvcmRlcldpZHRoOiBudW1iZXI7XHJcbiAgICByYWRpdXM6IG51bWJlciB8IHtcclxuICAgICAgICB0bDogbnVtYmVyO1xyXG4gICAgICAgIHRyOiBudW1iZXI7XHJcbiAgICAgICAgYnI6IG51bWJlcjtcclxuICAgICAgICBibDogbnVtYmVyO1xyXG4gICAgfTtcclxuICAgIGJvcmRlckNvbG9yOiBzdHJpbmc7XHJcbiAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuICAgIGxpbmVDYXA6IFwiYnV0dFwiIHwgXCJyb3VuZFwiIHwgXCJzcXVhcmVcIjtcclxuICAgIGpvaW5UeXBlOiBcImJldmVsXCIgfCBcInJvdW5kXCIgfCBcIm1pdGVyXCI7XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcbiAgICBzdGFydEFuZ2xlOiBudW1iZXI7XHJcbiAgICBlbmRBbmdsZTogbnVtYmVyO1xyXG4gICAgb2Zmc2V0OiBhbnk7XHJcbiAgICBsaW5lRGFzaDogbnVtYmVyW107XHJcbiAgICB3aWR0aDogbnVtYmVyO1xyXG4gICAgaGVpZ2h0OiBudW1iZXI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFNoYWRvdyhjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGNvbmZpZz86IENhbnZhc1NoYWRvd0NvbmZpZyk6IHZvaWQge1xyXG4gICAgaWYgKGNvbmZpZykge1xyXG4gICAgICAgIENhbnZhc01hbmFnZXIuc2V0U2hhZG93KGNvbnRleHQsIGNvbmZpZy54LCBjb25maWcueSwgY29uZmlnLmNvbG9yLCBjb25maWcuYmx1cik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBDYW52YXNNYW5hZ2VyLnNldFNoYWRvdyhjb250ZXh0LCAwLCAwLCBcImJsYWNrXCIsIDApO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9jZXNzKHJlczogQ2FudmFzQ29uZmlnKTogdm9pZCB7XHJcbiAgICBpZiAocmVzLnNoYWRvdykge1xyXG4gICAgICAgIHNldFNoYWRvdyhyZXMuY3R4LCByZXMuc2hhZG93KTtcclxuICAgIH1cclxuICAgIGlmIChyZXMuYmdJbWFnZSkge1xyXG4gICAgICAgIHJlcy5jdHguc2F2ZSgpO1xyXG4gICAgICAgIHJlcy5jdHguY2xpcCgpO1xyXG4gICAgICAgIGlmIChyZXMuYmdJbWFnZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmVzLmN0eC5kcmF3SW1hZ2UocmVzLmJnSW1hZ2UsIHJlcy54LCByZXMueSwgcmVzLndpZHRoLCByZXMuaGVpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlcy5jdHguZHJhd0ltYWdlKHJlcy5iZ0ltYWdlLmltZyxcclxuICAgICAgICAgICAgICAgIHJlcy5iZ0ltYWdlLngsXHJcbiAgICAgICAgICAgICAgICByZXMuYmdJbWFnZS55LFxyXG4gICAgICAgICAgICAgICAgcmVzLmJnSW1hZ2UudyxcclxuICAgICAgICAgICAgICAgIHJlcy5iZ0ltYWdlLmgsXHJcbiAgICAgICAgICAgICAgICByZXMueCxcclxuICAgICAgICAgICAgICAgIHJlcy55LFxyXG4gICAgICAgICAgICAgICAgcmVzLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgcmVzLmhlaWdodCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlcy5jdHgucmVzdG9yZSgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocmVzLmZpbGwpIHtcclxuICAgICAgICByZXMuY3R4LmZpbGxTdHlsZSA9IHJlcy5maWxsQ29sb3I7XHJcbiAgICAgICAgcmVzLmN0eC5maWxsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHJlcy5zaGFkb3cpIHtcclxuICAgICAgICBzZXRTaGFkb3cocmVzLmN0eCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzLmN0eC5saW5lQ2FwICA9IHJlcy5saW5lQ2FwO1xyXG4gICAgcmVzLmN0eC5saW5lSm9pbiA9IHJlcy5qb2luVHlwZTtcclxuICAgIGlmICh0eXBlb2YgcmVzLmN0eC5zZXRMaW5lRGFzaCA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgcmVzLmN0eC5zZXRMaW5lRGFzaChyZXMubGluZURhc2gpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghcmVzLmRyYXcpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICByZXMuY3R4LmxpbmVXaWR0aCAgID0gcmVzLmJvcmRlcldpZHRoO1xyXG4gICAgcmVzLmN0eC5zdHJva2VTdHlsZSA9IHJlcy5ib3JkZXJDb2xvcjtcclxuICAgIHJlcy5jdHguc3Ryb2tlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXREZWYob2JqOiBhbnkpOiBDYW52YXNDb25maWcge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBib3JkZXJDb2xvcjogXCJibGFja1wiLFxyXG4gICAgICAgIGJvcmRlcldpZHRoOiAxLFxyXG4gICAgICAgIGNlbnRlcjogZmFsc2UsXHJcbiAgICAgICAgY3R4OiBvYmouY3R4LFxyXG4gICAgICAgIGRyYXc6IHR5cGVvZiBvYmouYm9yZGVyQ29sb3IgIT09IFwidW5kZWZpbmVkXCIgfHwgdHlwZW9mIG9iai5ib3JkZXJXaWR0aCAhPT0gXCJ1bmRlZmluZWRcIixcclxuICAgICAgICBlbmRBbmdsZTogTWF0aC5QSSAqIDIsXHJcbiAgICAgICAgZmlsbDogdHlwZW9mIG9iai5maWxsQ29sb3IgIT09IFwidW5kZWZpbmVkXCIsXHJcbiAgICAgICAgZmlsbENvbG9yOiBcIndoaXRlXCIsXHJcbiAgICAgICAgaGVpZ2h0OiAwLFxyXG4gICAgICAgIGpvaW5UeXBlOiBcImJldmVsXCIsXHJcbiAgICAgICAgbGluZUNhcDogXCJyb3VuZFwiLFxyXG4gICAgICAgIGxpbmVEYXNoOiBbXSxcclxuICAgICAgICBvZmZzZXQ6IG51bGwsXHJcbiAgICAgICAgcmFkaXVzOiB7dGw6IDAsIHRyOiAwLCBicjogMCwgYmw6IDB9LFxyXG4gICAgICAgIHN0YXJ0QW5nbGU6IDAsXHJcbiAgICAgICAgd2lkdGg6IDAsXHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiAwLFxyXG4gICAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtYWtlUG9zQW5kU2l6ZShkZWY6IENhbnZhc0NvbmZpZywgb2JqOiBhbnkpOiBDYW52YXNDb25maWcge1xyXG4gICAgY29uc3QgcmVzOiBDYW52YXNDb25maWcgPSAkLmV4dGVuZChkZWYsIG9iaikgYXMgQ2FudmFzQ29uZmlnO1xyXG4gICAgY29uc3QgY2hlY2tBdHRyaWJ1dGUgICAgPSAoYXR0ck5hbWU6IGtleW9mIENhbnZhc0NvbmZpZywgcGFydEE6IGtleW9mIENhbnZhc0NvbmZpZywgcGFydEI6IGtleW9mIENhbnZhc0NvbmZpZyk6IHZvaWQgPT4ge1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmVzW2F0dHJOYW1lXSA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gcmVzW2F0dHJOYW1lXTtcclxuICAgICAgICBpZiAoQ2hlY2tlcnMuaXNOdW1iZXIodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgcmVzW3BhcnRBXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJlc1twYXJ0Ql0gPSB2YWx1ZTtcclxuICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgcmVzW3BhcnRBXSA9IHZhbHVlWzBdO1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJlc1twYXJ0Ql0gPSB2YWx1ZVsxXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJlc1twYXJ0QV0gPSAodmFsdWUgYXMgVmVjdG9yMmYpLng7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgcmVzW3BhcnRCXSA9ICh2YWx1ZSBhcyBWZWN0b3IyZikueTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNoZWNrQXR0cmlidXRlKFwic2l6ZVwiLCBcIndpZHRoXCIsIFwic2l6ZVwiKTtcclxuICAgIGNoZWNrQXR0cmlidXRlKFwicG9zaXRpb25cIiwgXCJ4XCIsIFwieVwiKTtcclxuXHJcbiAgICBpZiAocmVzLmNlbnRlcikge1xyXG4gICAgICAgIHJlcy54IC09IHJlcy53aWR0aCA+PiAxO1xyXG4gICAgICAgIHJlcy55IC09IHJlcy5oZWlnaHQgPj4gMTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja1Bvc0FuZFNpemUob2JqOiBDYW52YXNDb25maWcsIG5hbWU6IHN0cmluZyk6IENhbnZhc0NvbmZpZyB7XHJcblxyXG4gICAgaWYgKCh0eXBlb2Ygb2JqLnggPT09IFwidW5kZWZpbmVkXCIgfHwgdHlwZW9mIG9iai55ID09PSBcInVuZGVmaW5lZFwiKSAmJiB0eXBlb2Ygb2JqLnBvc2l0aW9uID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1TR19UUllfRFJBV19XSVRIT1VUX1BPU0lUSU9OOiBcIiArIG5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICgodHlwZW9mIG9iai53aWR0aCA9PT0gXCJ1bmRlZmluZWRcIiB8fCB0eXBlb2Ygb2JqLmhlaWdodCA9PT0gXCJ1bmRlZmluZWRcIikgJiYgdHlwZW9mIG9iai5zaXplID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1TR19UUllfRFJBV19XSVRIT1VUX1NJWkU6IFwiICsgbmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9iai53aWR0aCA8PSAwIHx8IG9iai5oZWlnaHQgPD0gMCkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNU0dfVFJZX0RSQVdfV0lUSF9ORUdfUE9TSVRJT046IFwiICsgbmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGluaXREZWYob2JqKTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENhbnZhc1V0aWxzIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgZG9BcmMob2JqOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCByZXMgPSByZW1ha2VQb3NBbmRTaXplKGNoZWNrUG9zQW5kU2l6ZShvYmosIFwiQXJjXCIpLCBvYmopO1xyXG5cclxuICAgICAgICByZXMuY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmVzLmN0eC5lbGxpcHNlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgcmVzLmN0eC5lbGxpcHNlKHJlcy54ICsgKHJlcy53aWR0aCA+PiAxKSxcclxuICAgICAgICAgICAgICAgIHJlcy55ICsgKHJlcy5oZWlnaHQgPj4gMSksXHJcbiAgICAgICAgICAgICAgICByZXMud2lkdGggPj4gMSxcclxuICAgICAgICAgICAgICAgIHJlcy5oZWlnaHQgPj4gMSxcclxuICAgICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgICByZXMuc3RhcnRBbmdsZSxcclxuICAgICAgICAgICAgICAgIHJlcy5lbmRBbmdsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXMuY3R4LnJlY3QocmVzLnggKyAocmVzLndpZHRoID4+IDEpLFxyXG4gICAgICAgICAgICAgICAgcmVzLnkgKyAocmVzLmhlaWdodCA+PiAxKSxcclxuICAgICAgICAgICAgICAgIHJlcy53aWR0aCA+PiAxLFxyXG4gICAgICAgICAgICAgICAgcmVzLmhlaWdodCA+PiAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb2Nlc3MocmVzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGRvUmVjdChvYmo6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGRlZiA9IGNoZWNrUG9zQW5kU2l6ZShvYmosIFwiUmVjdFwiKTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBvYmoucmFkaXVzICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgIGlmIChDaGVja2Vycy5pc051bWJlcihvYmoucmFkaXVzKSkge1xyXG4gICAgICAgICAgICAgICAgb2JqLnJhZGl1cyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBibDogb2JqLnJhZGl1cyxcclxuICAgICAgICAgICAgICAgICAgICBicjogb2JqLnJhZGl1cyxcclxuICAgICAgICAgICAgICAgICAgICB0bDogb2JqLnJhZGl1cyxcclxuICAgICAgICAgICAgICAgICAgICB0cjogb2JqLnJhZGl1cyxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkZWYucmFkaXVzIGFzIGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWYucmFkaXVzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnJhZGl1c1trZXldID0gb2JqLnJhZGl1c1trZXldIHx8IChkZWYucmFkaXVzIGFzIGFueSlba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHJlcyA9IHJlbWFrZVBvc0FuZFNpemUoZGVmLCBvYmopO1xyXG5cclxuICAgICAgICByZXMuY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIHJlcy5jdHgubW92ZVRvKHJlcy54ICsgKHJlcy5yYWRpdXMgYXMgYW55KS50bCwgcmVzLnkpO1xyXG4gICAgICAgIHJlcy5jdHgubGluZVRvKHJlcy54ICsgcmVzLndpZHRoIC0gKHJlcy5yYWRpdXMgYXMgYW55KS50ciwgcmVzLnkpO1xyXG4gICAgICAgIHJlcy5jdHgucXVhZHJhdGljQ3VydmVUbyhyZXMueCArIHJlcy53aWR0aCwgcmVzLnksIHJlcy54ICsgcmVzLndpZHRoLCByZXMueSArIChyZXMucmFkaXVzIGFzIGFueSkudHIpO1xyXG4gICAgICAgIHJlcy5jdHgubGluZVRvKHJlcy54ICsgcmVzLndpZHRoLCByZXMueSArIHJlcy5oZWlnaHQgLSAocmVzLnJhZGl1cyBhcyBhbnkpLmJyKTtcclxuICAgICAgICByZXMuY3R4LnF1YWRyYXRpY0N1cnZlVG8ocmVzLnggKyByZXMud2lkdGgsIHJlcy55ICsgcmVzLmhlaWdodCwgcmVzLnggKyByZXMud2lkdGggLSAocmVzLnJhZGl1cyBhcyBhbnkpLmJyLCByZXMueSArIHJlcy5oZWlnaHQpO1xyXG4gICAgICAgIHJlcy5jdHgubGluZVRvKHJlcy54ICsgKHJlcy5yYWRpdXMgYXMgYW55KS5ibCwgcmVzLnkgKyByZXMuaGVpZ2h0KTtcclxuICAgICAgICByZXMuY3R4LnF1YWRyYXRpY0N1cnZlVG8ocmVzLngsIHJlcy55ICsgcmVzLmhlaWdodCwgcmVzLngsIHJlcy55ICsgcmVzLmhlaWdodCAtIChyZXMucmFkaXVzIGFzIGFueSkuYmwpO1xyXG4gICAgICAgIHJlcy5jdHgubGluZVRvKHJlcy54LCByZXMueSArIChyZXMucmFkaXVzIGFzIGFueSkudGwpO1xyXG4gICAgICAgIHJlcy5jdHgucXVhZHJhdGljQ3VydmVUbyhyZXMueCwgcmVzLnksIHJlcy54ICsgKHJlcy5yYWRpdXMgYXMgYW55KS50bCwgcmVzLnkpO1xyXG4gICAgICAgIHJlcy5jdHguY2xvc2VQYXRoKCk7XHJcblxyXG4gICAgICAgIHByb2Nlc3MocmVzKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBNaXNjVmFsaWRhdG9ycyBmcm9tIFwiLi4vLi4vdmFsaWRhdG9ycy9taXNjLXZhbGlkYXRvcnNcIjtcclxuXHJcbi8qKlxyXG4gKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIE1pc2NWYWxpZGF0b3JzfSBpbnN0ZWFkXHJcbiAqIFRPRE86IG1vdmUgdGhpcyB0byB2YWxpZGF0b3JzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2hlY2tlcnMge1xyXG4gICAgcHVibGljIHN0YXRpYyBpc0Z1bmN0aW9uID0gTWlzY1ZhbGlkYXRvcnMuaXNGdW5jdGlvbjtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGlzU3RyaW5nID0gTWlzY1ZhbGlkYXRvcnMuaXNTdHJpbmc7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBpc09iamVjdCA9IE1pc2NWYWxpZGF0b3JzLmlzT2JqZWN0O1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaXNOdW1iZXIgPSBNaXNjVmFsaWRhdG9ycy5pc051bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGlzQm9vbGVhbiA9IE1pc2NWYWxpZGF0b3JzLmlzQm9vbGVhbjtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGlzQXJyYXkgPSBNaXNjVmFsaWRhdG9ycy5pc0FycmF5O1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaXNFbXB0eSA9IE1pc2NWYWxpZGF0b3JzLmlzRW1wdHk7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBpc0ludCA9IE1pc2NWYWxpZGF0b3JzLmlzSW50O1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaXNGbG9hdCA9IE1pc2NWYWxpZGF0b3JzLmlzRmxvYXQ7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBpc1VuZGVmaW5lZCA9IE1pc2NWYWxpZGF0b3JzLmlzVW5kZWZpbmVkO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaXNFbGVtZW50ID0gTWlzY1ZhbGlkYXRvcnMuaXNFbGVtZW50O1xyXG59XHJcbiIsImltcG9ydCAqIGFzIE1pc2NWYWxpZGF0b3JzIGZyb20gXCIuLi8uLi92YWxpZGF0b3JzL21pc2MtdmFsaWRhdG9yc1wiO1xyXG5cclxuLyoqXHJcbiAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgTWlzY1ZhbGlkYXRvcnN9IGluc3RlYWRcclxuICogVE9ETzogbW92ZSB0aGlzIHRvIHZhbGlkYXRvcnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDaGVja2VycyB7XHJcbiAgICBwdWJsaWMgc3RhdGljIGlzRnVuY3Rpb24gPSBNaXNjVmFsaWRhdG9ycy5pc0Z1bmN0aW9uO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaXNTdHJpbmcgPSBNaXNjVmFsaWRhdG9ycy5pc1N0cmluZztcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGlzT2JqZWN0ID0gTWlzY1ZhbGlkYXRvcnMuaXNPYmplY3Q7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBpc051bWJlciA9IE1pc2NWYWxpZGF0b3JzLmlzTnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaXNCb29sZWFuID0gTWlzY1ZhbGlkYXRvcnMuaXNCb29sZWFuO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaXNBcnJheSA9IE1pc2NWYWxpZGF0b3JzLmlzQXJyYXk7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBpc0VtcHR5ID0gTWlzY1ZhbGlkYXRvcnMuaXNFbXB0eTtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGlzSW50ID0gTWlzY1ZhbGlkYXRvcnMuaXNJbnQ7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBpc0Zsb2F0ID0gTWlzY1ZhbGlkYXRvcnMuaXNGbG9hdDtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGlzVW5kZWZpbmVkID0gTWlzY1ZhbGlkYXRvcnMuaXNVbmRlZmluZWQ7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBpc0VsZW1lbnQgPSBNaXNjVmFsaWRhdG9ycy5pc0VsZW1lbnQ7XHJcbn1cclxuIiwiLy8gVE9ETzogbmVlZCB0byBiZSBjaGVja2VkIGlmIGFwcCBpcyBydW5uaW5nIGluIGJyb3dzZXJcclxuXHJcbmxldCBsb2NhbENvbnRleHQ6IERvY3VtZW50IHwgbnVsbCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiA/IGRvY3VtZW50IDogbnVsbDtcclxuXHJcbmV4cG9ydCBjbGFzcyBEb21HZXQge1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNvbnRleHQgZG9jdW1lbnQgY29udGV4dFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHNldENvbnRleHQoY29udGV4dDogRG9jdW1lbnQpOiB2b2lkIHtcclxuICAgICAgICBsb2NhbENvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBjbGFzc05hbWUgbmFtZSBvZiBjbGFzc1xyXG4gICAgICogQHBhcmFtIGNvbnRleHQgc2VhcmNoZWQgY29udGV4dFxyXG4gICAgICogQHJldHVybnMgY29sbGVjdGlvbiBvZiBmb3VuZCBlbGVtZW50c1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGJ5Q2xhc3MoY2xhc3NOYW1lOiBzdHJpbmcsIGNvbnRleHQ6IERvY3VtZW50ID0gbG9jYWxDb250ZXh0IGFzIERvY3VtZW50KTogSFRNTENvbGxlY3Rpb25PZjxFbGVtZW50PiB7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjbGFzc05hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBsaW5rIG5hbWUgb2YgbGlua1xyXG4gICAgICogQHBhcmFtIGNvbnRleHQgc2VhcmNoZWQgY29udGV4dFxyXG4gICAgICogQHJldHVybnMgbm9kZUxpc3Qgb2YgZm91bmQgZWxlbWVudHNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBieUxpbmsobGluazogc3RyaW5nLCBjb250ZXh0OiBEb2N1bWVudCA9IGxvY2FsQ29udGV4dCBhcyBEb2N1bWVudCk6IE5vZGVMaXN0T2Y8SFRNTEVsZW1lbnRUYWdOYW1lTWFwW2tleW9mIEhUTUxFbGVtZW50VGFnTmFtZU1hcF0+IHtcclxuICAgICAgICByZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKGBhW2F0dHI9XCIke2xpbmt9XCJdYCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlkIHNlYXJjaGVkIElEXHJcbiAgICAgKiBAcGFyYW0gY29udGV4dCBzZWFyY2hlZCBjb250ZXh0XHJcbiAgICAgKiBAcmV0dXJucyBmb3VuZCBlbGVtZW50IG9yIG51bGxcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBieUlkKGlkOiBzdHJpbmcsIGNvbnRleHQ6IERvY3VtZW50ID0gbG9jYWxDb250ZXh0IGFzIERvY3VtZW50KTogSFRNTEVsZW1lbnQgfCBudWxsIHtcclxuICAgICAgICByZXR1cm4gY29udGV4dC5nZXRFbGVtZW50QnlJZChpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWUgZWxlbWVudHMgbmFtZVxyXG4gICAgICogQHBhcmFtIGNvbnRleHQgc2VhcmNoZWQgY29udGV4dFxyXG4gICAgICogQHJldHVybnMgbm9kZUxpc3Qgb2YgZm91bmQgZWxlbWVudHNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBieU5hbWUobmFtZTogc3RyaW5nLCBjb250ZXh0OiBEb2N1bWVudCA9IGxvY2FsQ29udGV4dCBhcyBEb2N1bWVudCk6IE5vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+IHtcclxuICAgICAgICByZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZShuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdGFnTmFtZSBlbGVtZW50cyB0YWdOYW1lXHJcbiAgICAgKiBAcGFyYW0gY29udGV4dCBzZWFyY2hlZCBjb250ZXh0XHJcbiAgICAgKiBAcmV0dXJucyBub2RlTGlzdCBvZiBmb3VuZCBlbGVtZW50c1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGJ5VGFnKHRhZ05hbWU6IHN0cmluZywgY29udGV4dDogRG9jdW1lbnQgPSBsb2NhbENvbnRleHQgYXMgRG9jdW1lbnQpOiBOb2RlTGlzdE9mPEVsZW1lbnQ+IHtcclxuICAgICAgICByZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lKSBhcyBhbnk7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGVudW0gRW5jb2RpbmdzIHtcclxuICAgIC8qXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFVURjggICAgPSBcInV0ZjhcIjtcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgVVRGMTYgICA9IFwidXRmMTZcIjtcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgVU5JQ09ERSA9IFwidW5pY29kZVwiO1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBBU0NJSSAgID0gXCJhc2NpaVwiO1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBVQ1MyICAgID0gXCJ1Y3MyXCI7XHJcbiAgICAqL1xyXG4gICAgVVRGOCAgICA9IFwidXRmOFwiLFxyXG4gICAgVVRGMTYgICA9IFwidXRmMTZcIixcclxuICAgIFVOSUNPREUgPSBcInVuaWNvZGVcIixcclxuICAgIEFTQ0lJICAgPSBcImFzY2lpXCIsXHJcbiAgICBVQ1MyICAgID0gXCJ1Y3MyXCIsXHJcbn1cclxuIiwiZXhwb3J0IGVudW0gRmlsZVR5cGVzIHtcclxuICAgIENTUyAgPSBcInRleHQvY3NzXCIsXHJcbiAgICBIVE1MID0gXCJ0ZXh0L2h0bWxcIixcclxuICAgIEpTICAgPSBcImFwcGxpY2F0aW9uL2phdmFzY3JpcHRcIixcclxuICAgIE1QMyAgPSBcImF1ZGlvL21wZWdcIixcclxuICAgIE1QNCAgPSBcInZpZGVvL21wNFwiLFxyXG4gICAgT0dHICA9IFwiYXBwbGljYXRpb24vb2dnXCIsXHJcbiAgICBPR1YgID0gXCJ2aWRlby9vZ2dcIixcclxuICAgIE9HQSAgPSBcImF1ZGlvL29nZ1wiLFxyXG4gICAgVFhUICA9IFwidGV4dC9wbGFpblwiLFxyXG4gICAgV0FWICA9IFwiYXVkaW8veC13YXZcIixcclxuICAgIFdFQk0gPSBcInZpZGVvL3dlYm1cIixcclxufVxyXG4iLCJleHBvcnQgZW51bSBIdHRwU3RhdHVzQ29kZXMge1xyXG4gICAgQ09OVElOVUUgICAgICAgICAgICAgICAgICAgICAgICA9IDEwMCxcclxuICAgIFNXSVRDSElOR19QUk9UT0NPTFMgICAgICAgICAgICAgPSAxMDEsXHJcbiAgICBPSyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gMjAwLFxyXG4gICAgQ1JFQVRFRCAgICAgICAgICAgICAgICAgICAgICAgICA9IDIwMSxcclxuICAgIEFDQ0VQVEVEICAgICAgICAgICAgICAgICAgICAgICAgPSAyMDIsXHJcbiAgICBOT05fQVVUSE9SSVRBVElWRV9JTkZPUk1BVElPTiAgID0gMjAzLFxyXG4gICAgTk9fQ09OVEVOVCAgICAgICAgICAgICAgICAgICAgICA9IDIwNCxcclxuICAgIFJFU0VUX0NPTlRFTlQgICAgICAgICAgICAgICAgICAgPSAyMDUsXHJcbiAgICBQQVJUSUFMX0NPTlRFTlQgICAgICAgICAgICAgICAgID0gMjA2LFxyXG4gICAgTVVMVElQTEVfQ0hPSUNFUyAgICAgICAgICAgICAgICA9IDMwMCxcclxuICAgIE1PVkVEX1BFUk1BTkVOVExZICAgICAgICAgICAgICAgPSAzMDEsXHJcbiAgICBGT1VORCAgICAgICAgICAgICAgICAgICAgICAgICAgID0gMzAyLFxyXG4gICAgU0VFX09USEVSICAgICAgICAgICAgICAgICAgICAgICA9IDMwMyxcclxuICAgIE5PVF9NT0RJRklFRCAgICAgICAgICAgICAgICAgICAgPSAzMDQsXHJcbiAgICBVU0VfUFJPWFkgICAgICAgICAgICAgICAgICAgICAgID0gMzA1LFxyXG4gICAgVEVNUE9SQVJZX1JFRElSRUNUICAgICAgICAgICAgICA9IDMwNyxcclxuICAgIEJBRF9SRVFVRVNUICAgICAgICAgICAgICAgICAgICAgPSA0MDAsXHJcbiAgICBVTkFVVEhPUklaRUQgICAgICAgICAgICAgICAgICAgID0gNDAxLFxyXG4gICAgUEFZTUVOVF9SRVFVSVJFRCAgICAgICAgICAgICAgICA9IDQwMixcclxuICAgIEZPUkJJRERFTiAgICAgICAgICAgICAgICAgICAgICAgPSA0MDMsXHJcbiAgICBOT1RfRk9VTkQgICAgICAgICAgICAgICAgICAgICAgID0gNDA0LFxyXG4gICAgTUVUSE9EX05PVF9BTExPV0VEICAgICAgICAgICAgICA9IDQwNSxcclxuICAgIE5PVF9BQ0NFUFRBQkxFICAgICAgICAgICAgICAgICAgPSA0MDYsXHJcbiAgICBQUk9YWV9BVVRIRU5USUNBVElPTl9SRVFVSVJFRCAgID0gNDA3LFxyXG4gICAgUkVRVUVTVF9USU1FT1VUICAgICAgICAgICAgICAgICA9IDQwOCxcclxuICAgIENPTkZMSUNUICAgICAgICAgICAgICAgICAgICAgICAgPSA0MDksXHJcbiAgICBHT05FICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gNDEwLFxyXG4gICAgTEVOR1RIX1JFUVVJUkVEICAgICAgICAgICAgICAgICA9IDQxMSxcclxuICAgIFBSRUNPTkRJVElPTl9GQUlMRUQgICAgICAgICAgICAgPSA0MTIsXHJcbiAgICBSRVFVRVNUX0VOVElUWV9UT09fTEFSR0UgICAgICAgID0gNDEzLFxyXG4gICAgUkVRVUVTVF9VUklfVE9PX0xPTkcgICAgICAgICAgICA9IDQxNCxcclxuICAgIFVOU1VQUE9SVEVEX01FRElBX1RZUEUgICAgICAgICAgPSA0MTUsXHJcbiAgICBSRVFVRVNURURfUkFOR0VfTk9UX1NBVElTRklBQkxFID0gNDE2LFxyXG4gICAgRVhQRUNUQVRJT05fRkFJTEVEICAgICAgICAgICAgICA9IDQxNyxcclxuICAgIFVOUFJPQ0VTU0FCTEVfRU5USVRZICAgICAgICAgICAgPSA0MjIsXHJcbiAgICBUT09fTUFOWV9SRVFVRVNUUyAgICAgICAgICAgICAgID0gNDI5LFxyXG4gICAgSU5URVJOQUxfU0VSVkVSX0VSUk9SICAgICAgICAgICA9IDUwMCxcclxuICAgIE5PVF9JTVBMRU1FTlRFRCAgICAgICAgICAgICAgICAgPSA1MDEsXHJcbiAgICBCQURfR0FURVdBWSAgICAgICAgICAgICAgICAgICAgID0gNTAyLFxyXG4gICAgU0VSVklDRV9VTkFWQUlMQUJMRSAgICAgICAgICAgICA9IDUwMyxcclxuICAgIEdBVEVXQVlfVElNRU9VVCAgICAgICAgICAgICAgICAgPSA1MDQsXHJcbiAgICBIVFRQX1ZFUlNJT05fTk9UX1NVUFBPUlRFRCAgICAgID0gNTA1LFxyXG59XHJcbiIsImV4cG9ydCBlbnVtIEtleXMge1xyXG4gICAgQVJST1dfVVAgICAgPSBcIkFycm93VXBcIixcclxuICAgIEFSUk9XX0RPV04gID0gXCJBcnJvd0Rvd25cIixcclxuICAgIEFSUk9XX0xFRlQgID0gXCJBcnJvd0xlZnRcIixcclxuICAgIEFSUk9XX1JJR0hUID0gXCJBcnJvd1JpZ2h0XCIsXHJcbiAgICBERUxFVEUgICAgICA9IFwiRGVsZXRlXCIsXHJcbiAgICBDT05UUk9MICAgICA9IFwiQ29udHJvbExlZnRcIixcclxuICAgIFNISUZUICAgICAgID0gXCJTaGlmdExlZnRcIixcclxuICAgIFBBR0VfVVAgICAgID0gXCJQYWdlVXBcIixcclxuICAgIFBBR0VfRE9XTiAgID0gXCJQYWdlRG93blwiLFxyXG4gICAgRVNDQVBFICAgICAgPSBcIkVzY2FwZVwiLFxyXG4gICAgVyAgICAgICAgICAgPSBcIktleVdcIixcclxuICAgIEYgICAgICAgICAgID0gXCJLZXlGXCIsXHJcbiAgICBBICAgICAgICAgICA9IFwiS2V5QVwiLFxyXG4gICAgUCAgICAgICAgICAgPSBcIktleVBcIixcclxuICAgIFMgICAgICAgICAgID0gXCJLZXlTXCIsXHJcbiAgICBEICAgICAgICAgICA9IFwiS2V5RFwiLFxyXG4gICAgUiAgICAgICAgICAgPSBcIktleVJcIixcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEtleXNPbGQge1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBFTlRFUiAgICAgICA9IDEzO1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBUQUIgICAgICAgICA9IDk7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFcgICAgICAgICAgID0gODc7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEEgICAgICAgICAgID0gNjU7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFMgICAgICAgICAgID0gODM7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEQgICAgICAgICAgID0gNjg7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFEgICAgICAgICAgID0gODE7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEUgICAgICAgICAgID0gNjk7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEYgICAgICAgICAgID0gNzA7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IExDT05UUk9MICAgID0gMTc7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEVTQ0FQRSAgICAgID0gMjc7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IExBTFQgICAgICAgID0gMTg7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IExTSElGVCAgICAgID0gMTY7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFNQQUNFICAgICAgID0gMzI7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFSUk9XX1VQICAgID0gMzg7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFSUk9XX0RPV04gID0gNDA7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFSUk9XX1JJR0hUID0gMzk7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFSUk9XX0xFRlQgID0gMzc7XHJcbn1cclxuIiwiZnVuY3Rpb24gZ2V0VGV4dCh0ZXh0Pzogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0ZXh0ID8gYDogJHt0ZXh0fWAgOiBcIlwiO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTm90QnJvd3NlckV4Y2VwdGlvbiBleHRlbmRzIEVycm9yIHtcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXh0Pzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoYEFwcCBpcyBub3QgcnVubmluZyBpbiBicm93c2VyJHtnZXRUZXh0KHRleHQpfSFgKTtcclxuXHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIE5vdEJyb3dzZXJFeGNlcHRpb24ucHJvdG90eXBlKTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgKiBmcm9tIFwiLi9HVXRpbHNcIjtcclxuXHJcbiIsImV4cG9ydCAqIGZyb20gXCIuL3NpbXBsZS12ZWN0b3IyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3NpbXBsZS12ZWN0b3IzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3NpbXBsZS12ZWN0b3I0XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3ZlY3RvcjJcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vdmVjdG9yM1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi92ZWN0b3I0XCI7XHJcbiIsImltcG9ydCB7IFNpbXBsZVZlY3RvcjIgfSBmcm9tIFwiLi9zaW1wbGUtdmVjdG9yMlwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFZlY3RvcjIgaW1wbGVtZW50cyBTaW1wbGVWZWN0b3IyIHtcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgeCA9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgcHVibGljIHkgPSAwKSB7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgWkVSTygpOiBWZWN0b3IyIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoMCwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgT05FKCk6IFZlY3RvcjIge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMigxLCAxKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNaZXJvKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnggPT09IDAgJiYgdGhpcy55ID09PSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZXF1YWxzKHZlY0E6IFNpbXBsZVZlY3RvcjIsIHZlY0I6IFNpbXBsZVZlY3RvcjIpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodmVjQSA9PT0gdmVjQikge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB2ZWNBLnggPT09IHZlY0IueCAmJiB2ZWNBLnkgPT09IHZlY0IueTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHN1Yih2ZWNBOiBTaW1wbGVWZWN0b3IyLCB2ZWNCOiBTaW1wbGVWZWN0b3IyKTogVmVjdG9yMiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHZlY0EueCAtIHZlY0IueCwgdmVjQS55IC0gdmVjQi55KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGlzVmlzaWJsZShvYnNYOiBudW1iZXIsIG9ic1k6IG51bWJlciwgYW5nbGU6IG51bWJlciwgY3V0T2ZmOiBudW1iZXIsIHB4OiBudW1iZXIsIHB5OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gKGFuZ2xlIC0gTWF0aC5hdGFuMihcclxuICAgICAgICAgICAgcHkgLSBvYnNZLFxyXG4gICAgICAgICAgICBweCAtIG9ic1gsXHJcbiAgICAgICAgKSkgPD0gY3V0T2ZmO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgYW5nbGVCZXR3ZWVuUG9pbnRzKG9ic1g6IG51bWJlciwgb2JzWTogbnVtYmVyLCBweDE6IG51bWJlciwgcHkxOiBudW1iZXIsIHB4MjogbnVtYmVyLCBweTI6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguYXRhbjIoXHJcbiAgICAgICAgICAgIHB5MSAtIG9ic1ksXHJcbiAgICAgICAgICAgIHB4MSAtIG9ic1gsXHJcbiAgICAgICAgKSAtIE1hdGguYXRhbjIoXHJcbiAgICAgICAgICAgIHB5MiAtIG9ic1ksXHJcbiAgICAgICAgICAgIHB4MiAtIG9ic1gsXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGF2ZygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAodGhpcy54ICsgdGhpcy55KSAvIDI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBzdW0odmVjQTogU2ltcGxlVmVjdG9yMiwgdmVjQjogU2ltcGxlVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih2ZWNBLnggKyB2ZWNCLngsIHZlY0EueSArIHZlY0IueSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBtdWxOdW0odmVjQTogU2ltcGxlVmVjdG9yMiwgdmFsOiBudW1iZXIpOiBWZWN0b3IyIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIodmVjQS54ICogdmFsLCB2ZWNBLnkgKiB2YWwpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgbWluKHZlY0E6IFNpbXBsZVZlY3RvcjIsIHZlY0I6IFNpbXBsZVZlY3RvcjIpOiBWZWN0b3IyIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoTWF0aC5taW4odmVjQS54LCB2ZWNCLngpLCBNYXRoLm1pbih2ZWNBLnksIHZlY0IueSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgbWF4KHZlY0E6IFNpbXBsZVZlY3RvcjIsIHZlY0I6IFNpbXBsZVZlY3RvcjIpOiBWZWN0b3IyIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoTWF0aC5tYXgodmVjQS54LCB2ZWNCLngpLCBNYXRoLm1heCh2ZWNBLnksIHZlY0IueSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZGlzdCh2ZWNBOiBTaW1wbGVWZWN0b3IyLCB2ZWNCOiBTaW1wbGVWZWN0b3IyKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHZlY0EueCAtIHZlY0IueCwgMikgKyBNYXRoLnBvdyh2ZWNBLnkgLSB2ZWNCLnksIDIpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Tm9ybWFsaXplZCgpOiBTaW1wbGVWZWN0b3IyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLm5vcm1hbGl6ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgbGVuZ3RoKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbG9uZSgpOiBWZWN0b3IyIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIodGhpcy54LCB0aGlzLnkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBub3JtYWxpemUoKTogdGhpcyB7XHJcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy54IC89IGxlbmd0aDtcclxuICAgICAgICB0aGlzLnkgLz0gbGVuZ3RoO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbXVsKHZhbHVlOiBTaW1wbGVWZWN0b3IyIHwgbnVtYmVyKTogdGhpcyB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICB0aGlzLnggKj0gdmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMueSAqPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy54ICo9IHZhbHVlLng7XHJcbiAgICAgICAgICAgIHRoaXMueSAqPSB2YWx1ZS55O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZCh2ZWM6IFNpbXBsZVZlY3RvcjIpOiB0aGlzIHtcclxuICAgICAgICB0aGlzLnggKz0gdmVjLng7XHJcbiAgICAgICAgdGhpcy55ICs9IHZlYy55O1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3ViKHZlYzogU2ltcGxlVmVjdG9yMik6IHRoaXMge1xyXG4gICAgICAgIHRoaXMueCAtPSB2ZWMueDtcclxuICAgICAgICB0aGlzLnkgLT0gdmVjLnk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZnJvbSh2YWxBOiBudW1iZXIsIHZhbEIgPSB2YWxBKTogVmVjdG9yMiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHZhbEEsIHZhbEIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQodmVjOiBTaW1wbGVWZWN0b3IyKTogdGhpcyB7XHJcbiAgICAgICAgdGhpcy54ID0gdmVjLng7XHJcbiAgICAgICAgdGhpcy55ID0gdmVjLnk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG59XHJcbiIsImNvbnN0IHByb2Nlc3MgPSAob3A6ICh4OiBudW1iZXIsIHk6IG51bWJlcikgPT4gdm9pZCxcclxuICAgICAgICAgICAgICAgICBhcmcxOiBWZWN0b3IyZiB8IG51bWJlcixcclxuICAgICAgICAgICAgICAgICBhcmcyPzogbnVtYmVyKSA9PiB7XHJcbiAgICBpZiAodHlwZW9mIGFyZzIgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICBvcChhcmcxIGFzIG51bWJlciwgYXJnMik7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcxID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgb3AoYXJnMSwgYXJnMSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIG9wKGFyZzEueCwgYXJnMS55KTtcclxuICAgIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyBpcyB1c2VkIGZvciBob2xkaW5nIDIgbnVtZXJpYyB2YWx1ZXMgYW5kIG1hbmlwdWxhdGlvbiB3aXRoIHRoZW1cclxuICovXHJcbmV4cG9ydCBjbGFzcyBWZWN0b3IyZiB7XHJcbiAgICAvKipcclxuICAgICAqIHRoZSBYIHZhbHVlIG9mIHZlY3RvclxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgeSA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiB0aGUgWSB2YWx1ZSBvZiB2ZWN0b3JcclxuICAgICAqL1xyXG4gICAgcHVibGljIHggPSAwO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIHNldCB2ZWN0b3JzIHZhbHVlcyBhbmQgcmV0dXJuIG9iamVjdCBpdHNlbGZcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYXJnMSBwYXJhbWV0ZXIgY2FuIGJ5IHtAbGluayBWZWN0b3IyZn0gb3IgbnVtYmVyIHJlcHJlc2VudGluZyB7QGxpbmsgeH0gaWYgYXJnMiBpcyBwYXNzZWQgb3RoZXJ3aXNlIHtAbGluayB4fSBhbmQge0BsaW5rIHl9XHJcbiAgICAgKiBAcGFyYW0gYXJnMiBpcyB7QGxpbmsgeX0gdmFsdWUgZm9yIHZlY3RvclxyXG4gICAgICogQHJldHVybnMgY3JlYXRlZCB7QGxpbmsgVmVjdG9yMmZ9XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXQoYXJnMTogVmVjdG9yMmYgfCBudW1iZXIsIGFyZzI/OiBudW1iZXIpOiBWZWN0b3IyZiB7XHJcbiAgICAgICAgcHJvY2VzcygoeCwgeSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnggPSB4O1xyXG4gICAgICAgICAgICB0aGlzLnkgPSB5O1xyXG4gICAgICAgIH0sIGFyZzEsIGFyZzIpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIGFkZCB2YWx1ZXMgaW50byBjdXJyZW50IHZhbHVlcyBhbmQgcmV0dXJuIG9iamVjdCBpdHNlbGZcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYXJnMSBwYXJhbWV0ZXIgY2FuIGJ5IHtAbGluayBWZWN0b3IyZn0gb3IgbnVtYmVyIHJlcHJlc2VudGluZyB7QGxpbmsgeH0gaWYgYXJnMiBpcyBwYXNzZWQgb3RoZXJ3aXNlIHtAbGluayB4fSBhbmQge0BsaW5rIHl9XHJcbiAgICAgKiBAcGFyYW0gYXJnMiBpcyB7QGxpbmsgeX0gdmFsdWUgZm9yIHZlY3RvclxyXG4gICAgICogQHJldHVybnMgdXBkYXRlZCB7QGxpbmsgVmVjdG9yMmZ9XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhZGQoYXJnMTogVmVjdG9yMmYgfCBudW1iZXIsIGFyZzI/OiBudW1iZXIpOiBWZWN0b3IyZiB7XHJcbiAgICAgICAgcHJvY2VzcygoeCwgeSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnggKz0geDtcclxuICAgICAgICAgICAgdGhpcy55ICs9IHk7XHJcbiAgICAgICAgfSwgYXJnMSwgYXJnMik7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRnVuY3Rpb24gZGl2aWRlIGN1cnJlbnQgdmFsdWVzIGFuZCByZXR1cm4gb2JqZWN0IGl0c2VsZlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBhcmcxIHBhcmFtZXRlciBjYW4gYnkge0BsaW5rIFZlY3RvcjJmfSBvciBudW1iZXIgcmVwcmVzZW50aW5nIHtAbGluayB4fSBpZiBhcmcyIGlzIHBhc3NlZCBvdGhlcndpc2Uge0BsaW5rIHh9IGFuZCB7QGxpbmsgeX1cclxuICAgICAqIEBwYXJhbSBhcmcyIGlzIHtAbGluayB5fSB2YWx1ZSBmb3IgdmVjdG9yXHJcbiAgICAgKiBAcmV0dXJucyB1cGRhdGVkIHtAbGluayBWZWN0b3IyZn1cclxuICAgICAqL1xyXG4gICAgcHVibGljIGRpdihhcmcxOiBWZWN0b3IyZiB8IG51bWJlciwgYXJnMj86IG51bWJlcik6IFZlY3RvcjJmIHtcclxuICAgICAgICBwcm9jZXNzKCh4LCB5KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMueCAvPSB4O1xyXG4gICAgICAgICAgICB0aGlzLnkgLz0geTtcclxuICAgICAgICB9LCBhcmcxLCBhcmcyKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiBtdWx0aXBseSBjdXJyZW50IHZhbHVlcyBhbmQgcmV0dXJuIG9iamVjdCBpdHNlbGZcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYXJnMSBwYXJhbWV0ZXIgY2FuIGJ5IHtAbGluayBWZWN0b3IyZn0gb3IgbnVtYmVyIHJlcHJlc2VudGluZyB7QGxpbmsgeH0gaWYgYXJnMiBpcyBwYXNzZWQgb3RoZXJ3aXNlIHtAbGluayB4fSBhbmQge0BsaW5rIHl9XHJcbiAgICAgKiBAcGFyYW0gYXJnMiBpcyB7QGxpbmsgeX0gdmFsdWUgZm9yIHZlY3RvclxyXG4gICAgICogQHJldHVybnMgdXBkYXRlZCB7QGxpbmsgVmVjdG9yMmZ9XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtdWwoYXJnMTogVmVjdG9yMmYgfCBudW1iZXIsIGFyZzI/OiBudW1iZXIpOiBWZWN0b3IyZiB7XHJcbiAgICAgICAgcHJvY2VzcygoeCwgeSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnggKj0geDtcclxuICAgICAgICAgICAgdGhpcy55ICo9IHk7XHJcbiAgICAgICAgfSwgYXJnMSwgYXJnMik7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRnVuY3Rpb24gc3VidHJhY3QgdmFsdWVzIGZyb20gY3VycmVudCB2YWx1ZXMgYW5kIHJldHVybiBvYmplY3QgaXRzZWxmXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGFyZzEgcGFyYW1ldGVyIGNhbiBieSB7QGxpbmsgVmVjdG9yMmZ9IG9yIG51bWJlciByZXByZXNlbnRpbmcge0BsaW5rIHh9IGlmIGFyZzIgaXMgcGFzc2VkIG90aGVyd2lzZSB7QGxpbmsgeH0gYW5kIHtAbGluayB5fVxyXG4gICAgICogQHBhcmFtIGFyZzIgaXMge0BsaW5rIHl9IHZhbHVlIGZvciB2ZWN0b3JcclxuICAgICAqIEByZXR1cm5zIHVwZGF0ZWQge0BsaW5rIFZlY3RvcjJmfVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3ViKGFyZzE6IFZlY3RvcjJmIHwgbnVtYmVyLCBhcmcyPzogbnVtYmVyKTogVmVjdG9yMmYge1xyXG4gICAgICAgIHByb2Nlc3MoKHgsIHkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy54IC09IHg7XHJcbiAgICAgICAgICAgIHRoaXMueSAtPSB5O1xyXG4gICAgICAgIH0sIGFyZzEsIGFyZzIpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBTaW1wbGVWZWN0b3IzZiB9IGZyb20gXCIuLi9waHlzaWNzL2Rpc3RhbmNlcy0zZFwiO1xyXG5pbXBvcnQgeyBTaW1wbGVWZWN0b3IzIH0gZnJvbSBcIi4vc2ltcGxlLXZlY3RvcjNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBWZWN0b3IzIGltcGxlbWVudHMgU2ltcGxlVmVjdG9yMyB7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIHggPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHB1YmxpYyB5ID0gMCxcclxuICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWMgeiA9IDApIHtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldCBVUCgpOiBWZWN0b3IzIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjMoMCwgMSwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgWkVSTygpOiBWZWN0b3IzIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjMoMCwgMCwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgT05FKCk6IFZlY3RvcjMge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMygxLCAxLCAxKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdG9BcnJheSgpOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0ge1xyXG4gICAgICAgIHJldHVybiBbdGhpcy54LCB0aGlzLnksIHRoaXMuel07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBlcXVhbHModmVjQTogU2ltcGxlVmVjdG9yMywgdmVjQjogU2ltcGxlVmVjdG9yMyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh2ZWNBID09PSB2ZWNCKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHZlY0EueCA9PT0gdmVjQi54ICYmIHZlY0EueSA9PT0gdmVjQi55ICYmIHZlY0EueiA9PT0gdmVjQi56O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgc3ViKHZlY0E6IFNpbXBsZVZlY3RvcjMsIHZlY0I6IFNpbXBsZVZlY3RvcjMpOiBWZWN0b3IzIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjModmVjQS54IC0gdmVjQi54LCB2ZWNBLnkgLSB2ZWNCLnksIHZlY0EueiAtIHZlY0Iueik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBhdmcoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMueCArIHRoaXMueSArIHRoaXMueikgLyAzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgc3VtKHZlY0E6IFNpbXBsZVZlY3RvcjMsIHZlY0I6IFNpbXBsZVZlY3RvcjMpOiBWZWN0b3IzIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjModmVjQS54ICsgdmVjQi54LCB2ZWNBLnkgKyB2ZWNCLnksIHZlY0EueiArIHZlY0Iueik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBtdWxOdW0odmVjQTogU2ltcGxlVmVjdG9yMywgdmFsOiBudW1iZXIpOiBWZWN0b3IzIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjModmVjQS54ICogdmFsLCB2ZWNBLnkgKiB2YWwsIHZlY0EueiAqIHZhbCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3VtKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMueCArIHRoaXMueSArIHRoaXMuejtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIG11bCh2ZWNBOiBTaW1wbGVWZWN0b3IzZiwgdmVjQjogU2ltcGxlVmVjdG9yM2YpOiBWZWN0b3IzIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjModmVjQS54ICsgdmVjQi54LCB2ZWNBLnkgKyB2ZWNCLnksIHZlY0EueiArIHZlY0Iueik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBtaW4odmVjQTogU2ltcGxlVmVjdG9yMywgdmVjQjogU2ltcGxlVmVjdG9yMyk6IFZlY3RvcjMge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyhNYXRoLm1pbih2ZWNBLngsIHZlY0IueCksIE1hdGgubWluKHZlY0EueSwgdmVjQi55KSwgTWF0aC5taW4odmVjQS56LCB2ZWNCLnopKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUZyb21TcGhlcmljYWxDb29yZHMoIHJhZGl1czogbnVtYmVyLCBwaGk6IG51bWJlciwgdGhldGE6IG51bWJlciApOiBWZWN0b3IzIHtcclxuICAgICAgICBjb25zdCBzaW5QaGlSYWRpdXMgPSBNYXRoLnNpbiggcGhpICkgKiByYWRpdXM7XHJcblxyXG4gICAgICAgIGNvbnN0IHggPSBzaW5QaGlSYWRpdXMgKiBNYXRoLnNpbiggdGhldGEgKTtcclxuICAgICAgICBjb25zdCB5ID0gTWF0aC5jb3MoIHBoaSApICogcmFkaXVzO1xyXG4gICAgICAgIGNvbnN0IHogPSBzaW5QaGlSYWRpdXMgKiBNYXRoLmNvcyggdGhldGEgKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKHgsIHksIHopO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgbWF4KHZlY0E6IFNpbXBsZVZlY3RvcjMsIHZlY0I6IFNpbXBsZVZlY3RvcjMpOiBWZWN0b3IzIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjMoTWF0aC5tYXgodmVjQS54LCB2ZWNCLngpLCBNYXRoLm1heCh2ZWNBLnksIHZlY0IueSksIE1hdGgubWF4KHZlY0EueiwgdmVjQi56KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBkaXN0KHZlY0E6IFNpbXBsZVZlY3RvcjMsIHZlY0I6IFNpbXBsZVZlY3RvcjMpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3codmVjQS54IC0gdmVjQi54LCAyKSArIE1hdGgucG93KHZlY0EueSAtIHZlY0IueSwgMikgKyBNYXRoLnBvdyh2ZWNBLnogLSB2ZWNCLnosIDIpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIG5vcm1hbGl6ZTxUIGV4dGVuZHMgU2ltcGxlVmVjdG9yMz4odmVjOiBUKTogVCB7XHJcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gTWF0aC5zcXJ0KHZlYy54ICogdmVjLnggKyB2ZWMueSAqIHZlYy55ICsgdmVjLnogKiB2ZWMueik7XHJcbiAgICAgICAgdmVjLnggLz0gbGVuZ3RoO1xyXG4gICAgICAgIHZlYy55IC89IGxlbmd0aDtcclxuICAgICAgICB2ZWMueiAvPSBsZW5ndGg7XHJcblxyXG4gICAgICAgIHJldHVybiB2ZWM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldE5vcm1hbGl6ZWQoKTogU2ltcGxlVmVjdG9yMyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5ub3JtYWxpemUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGxlbmd0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xvbmUoKTogVmVjdG9yMyB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKHRoaXMueCwgdGhpcy55LCB0aGlzLnopO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBub3JtYWxpemUoKTogdGhpcyB7XHJcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy54IC89IGxlbmd0aDtcclxuICAgICAgICB0aGlzLnkgLz0gbGVuZ3RoO1xyXG4gICAgICAgIHRoaXMueiAvPSBsZW5ndGg7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBtdWwodmFsdWU6IFNpbXBsZVZlY3RvcjMgfCBudW1iZXIpOiB0aGlzIHtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMueCAqPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy55ICo9IHZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLnogKj0gdmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy54ICo9IHZhbHVlLng7XHJcbiAgICAgICAgICAgIHRoaXMueSAqPSB2YWx1ZS55O1xyXG4gICAgICAgICAgICB0aGlzLnogKj0gdmFsdWUuejtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGQodmVjOiBTaW1wbGVWZWN0b3IzKTogdGhpcyB7XHJcbiAgICAgICAgdGhpcy54ICs9IHZlYy54O1xyXG4gICAgICAgIHRoaXMueSArPSB2ZWMueTtcclxuICAgICAgICB0aGlzLnogKz0gdmVjLno7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdWIodmVjOiBTaW1wbGVWZWN0b3IzKTogdGhpcyB7XHJcbiAgICAgICAgdGhpcy54IC09IHZlYy54O1xyXG4gICAgICAgIHRoaXMueSAtPSB2ZWMueTtcclxuICAgICAgICB0aGlzLnogLT0gdmVjLno7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZnJvbUFycmF5KHZhbHVlOiBudW1iZXJbXSB8IEZsb2F0MzJBcnJheSk6IFZlY3RvcjMge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyh2YWx1ZVswXSwgdmFsdWVbMV0sIHZhbHVlWzJdKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBmcm9tKHZhbEE6IG51bWJlciwgdmFsQiA9IHZhbEEsIHZhbEMgPSB2YWxBKTogVmVjdG9yMyB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKHZhbEEsIHZhbEIsIHZhbEMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaXNWZWN0b3IoaXRlbTogYW55KTogaXRlbSBpcyBTaW1wbGVWZWN0b3IzIHtcclxuICAgICAgICByZXR1cm4gaXRlbSAmJiAhaXNOYU4oaXRlbS54KSAmJiAhaXNOYU4oaXRlbS55KSAmJiAhaXNOYU4oaXRlbS56KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0KHZlYzogU2ltcGxlVmVjdG9yMyk6IHRoaXMge1xyXG4gICAgICAgIHRoaXMueCA9IHZlYy54O1xyXG4gICAgICAgIHRoaXMueSA9IHZlYy55O1xyXG4gICAgICAgIHRoaXMueiA9IHZlYy56O1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBTaW1wbGVWZWN0b3I0IH0gZnJvbSBcIi4vc2ltcGxlLXZlY3RvcjRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBWZWN0b3I0IGltcGxlbWVudHMgU2ltcGxlVmVjdG9yNCB7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIHggPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHB1YmxpYyB5ID0gMCxcclxuICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWMgeiA9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgcHVibGljIHcgPSAwKSB7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgWkVSTygpOiBWZWN0b3I0IHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjQoMCwgMCwgMCwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgT05FKCk6IFZlY3RvcjQge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNCgxLCAxLCAxLCAxKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdG9BcnJheSgpOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSB7XHJcbiAgICAgICAgcmV0dXJuIFt0aGlzLngsIHRoaXMueSwgdGhpcy56LCB0aGlzLnddO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZXF1YWxzKHZlY0E6IFNpbXBsZVZlY3RvcjQsIHZlY0I6IFNpbXBsZVZlY3RvcjQpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodmVjQSA9PT0gdmVjQikge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB2ZWNBLnggPT09IHZlY0IueCAmJiB2ZWNBLnkgPT09IHZlY0IueSAmJiB2ZWNBLnogPT09IHZlY0IueiAmJiB2ZWNBLncgPT09IHZlY0IudztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGF2ZygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAodGhpcy54ICsgdGhpcy55ICsgdGhpcy56ICsgdGhpcy53KSAvIDQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBtaW4odmVjQTogU2ltcGxlVmVjdG9yNCwgdmVjQjogU2ltcGxlVmVjdG9yNCk6IFZlY3RvcjQge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNChcclxuICAgICAgICAgICAgTWF0aC5taW4odmVjQS54LCB2ZWNCLngpLFxyXG4gICAgICAgICAgICBNYXRoLm1pbih2ZWNBLnksIHZlY0IueSksXHJcbiAgICAgICAgICAgIE1hdGgubWluKHZlY0EueiwgdmVjQi56KSxcclxuICAgICAgICAgICAgTWF0aC5taW4odmVjQS53LCB2ZWNCLncpLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBtYXgodmVjQTogU2ltcGxlVmVjdG9yNCwgdmVjQjogU2ltcGxlVmVjdG9yNCk6IFZlY3RvcjQge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNChcclxuICAgICAgICAgICAgTWF0aC5tYXgodmVjQS54LCB2ZWNCLngpLFxyXG4gICAgICAgICAgICBNYXRoLm1heCh2ZWNBLnksIHZlY0IueSksXHJcbiAgICAgICAgICAgIE1hdGgubWF4KHZlY0EueiwgdmVjQi56KSxcclxuICAgICAgICAgICAgTWF0aC5tYXgodmVjQS53LCB2ZWNCLncpLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBkaXN0KHZlY0E6IFNpbXBsZVZlY3RvcjQsIHZlY0I6IFNpbXBsZVZlY3RvcjQpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoXHJcbiAgICAgICAgICAgIE1hdGgucG93KHZlY0EueCAtIHZlY0IueCwgMikgK1xyXG4gICAgICAgICAgICBNYXRoLnBvdyh2ZWNBLnkgLSB2ZWNCLnksIDIpICtcclxuICAgICAgICAgICAgTWF0aC5wb3codmVjQS56IC0gdmVjQi56LCAyKSArXHJcbiAgICAgICAgICAgIE1hdGgucG93KHZlY0EudyAtIHZlY0IudywgMiksXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIG5vcm1hbGl6ZTxUIGV4dGVuZHMgU2ltcGxlVmVjdG9yND4odmVjOiBUKTogVCB7XHJcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gTWF0aC5zcXJ0KHZlYy54ICogdmVjLnggKyB2ZWMueSAqIHZlYy55ICsgdmVjLnogKiB2ZWMueiArIHZlYy53ICogdmVjLncpO1xyXG4gICAgICAgIHZlYy54IC89IGxlbmd0aDtcclxuICAgICAgICB2ZWMueSAvPSBsZW5ndGg7XHJcbiAgICAgICAgdmVjLnogLz0gbGVuZ3RoO1xyXG4gICAgICAgIHZlYy53IC89IGxlbmd0aDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHZlYztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Tm9ybWFsaXplZCgpOiBTaW1wbGVWZWN0b3I0IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLm5vcm1hbGl6ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgbGVuZ3RoKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLnogKyB0aGlzLncgKiB0aGlzLncpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbG9uZSgpOiBWZWN0b3I0IHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjQodGhpcy54LCB0aGlzLnksIHRoaXMueiwgdGhpcy53KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbm9ybWFsaXplKCk6IHRoaXMge1xyXG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMueCAvPSBsZW5ndGg7XHJcbiAgICAgICAgdGhpcy55IC89IGxlbmd0aDtcclxuICAgICAgICB0aGlzLnogLz0gbGVuZ3RoO1xyXG4gICAgICAgIHRoaXMudyAvPSBsZW5ndGg7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBtdWwodmFsdWU6IFNpbXBsZVZlY3RvcjQgfCBudW1iZXIpOiB0aGlzIHtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMueCAqPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy55ICo9IHZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLnogKj0gdmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMudyAqPSB2YWx1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnggKj0gdmFsdWUueDtcclxuICAgICAgICAgICAgdGhpcy55ICo9IHZhbHVlLnk7XHJcbiAgICAgICAgICAgIHRoaXMueiAqPSB2YWx1ZS56O1xyXG4gICAgICAgICAgICB0aGlzLncgKj0gdmFsdWUudztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGQodmVjOiBTaW1wbGVWZWN0b3I0KTogdGhpcyB7XHJcbiAgICAgICAgdGhpcy54ICs9IHZlYy54O1xyXG4gICAgICAgIHRoaXMueSArPSB2ZWMueTtcclxuICAgICAgICB0aGlzLnogKz0gdmVjLno7XHJcbiAgICAgICAgdGhpcy53ICs9IHZlYy53O1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3ViKHZlYzogU2ltcGxlVmVjdG9yNCk6IHRoaXMge1xyXG4gICAgICAgIHRoaXMueCAtPSB2ZWMueDtcclxuICAgICAgICB0aGlzLnkgLT0gdmVjLnk7XHJcbiAgICAgICAgdGhpcy56IC09IHZlYy56O1xyXG4gICAgICAgIHRoaXMudyAtPSB2ZWMudztcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBmcm9tQXJyYXkodmFsdWU6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdIHwgRmxvYXQzMkFycmF5KTogVmVjdG9yNCB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3I0KHZhbHVlWzBdLCB2YWx1ZVsxXSwgdmFsdWVbMl0sIHZhbHVlWzNdKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGZyb20odmFsQTogbnVtYmVyLCB2YWxCID0gdmFsQSwgdmFsQyA9IHZhbEIsIHZhbEQgPSB2YWxDKTogVmVjdG9yNCB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3I0KHZhbEEsIHZhbEIsIHZhbEMsIHZhbEQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaXNWZWN0b3IoaXRlbTogYW55KTogaXRlbSBpcyBTaW1wbGVWZWN0b3I0IHtcclxuICAgICAgICByZXR1cm4gaXRlbSAmJiAhaXNOYU4oaXRlbS54KSAmJiAhaXNOYU4oaXRlbS55KSAmJiAhaXNOYU4oaXRlbS56KSAmJiAhaXNOYU4oaXRlbS53KTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXRGcm9tVmFsdWVzKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIsIHc6IG51bWJlcik6IHRoaXMge1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgICAgICB0aGlzLnogPSB6O1xyXG4gICAgICAgIHRoaXMudyA9IHc7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldCh2ZWM6IFNpbXBsZVZlY3RvcjQpOiB0aGlzIHtcclxuICAgICAgICB0aGlzLnggPSB2ZWMueDtcclxuICAgICAgICB0aGlzLnkgPSB2ZWMueTtcclxuICAgICAgICB0aGlzLnogPSB2ZWMuejtcclxuICAgICAgICB0aGlzLncgPSB2ZWMudztcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbn1cclxuIiwiZnVuY3Rpb24gcmVtb3ZlUHJlZHBvbmEoY2hhcjogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGlmIChjaGFyLmxlbmd0aCA+IDYgJiYgY2hhci5zdGFydHNXaXRoKFwibmFqXCIpKSB7XHJcbiAgICAgICAgcmV0dXJuIGNoYXIuc3Vic3RyKDMsIGNoYXIubGVuZ3RoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2hhcjtcclxufVxyXG5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbmZ1bmN0aW9uIHJlbW92ZUNhc2Uoa2V5OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgbGVuID0ga2V5Lmxlbmd0aDtcclxuICAgIGlmIChsZW4gPiA5ICYmIGtleS5lbmRzV2l0aChcImVqxaFpZWhvXCIpXHJcbiAgICAgICAgfHwga2V5LmVuZHNXaXRoKFwiZWrFoWllbXVcIikpIHtcclxuICAgICAgICByZXR1cm4ga2V5LnN1YnN0cmluZygwLCBsZW4gLSA3KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobGVuID4gOCAmJiAoa2V5LmVuZHNXaXRoKFwiZWrFocOtY2hcIikgfHxcclxuICAgICAgICBrZXkuZW5kc1dpdGgoXCJlbmNvY2hcIikgfHxcclxuICAgICAgICBrZXkuZW5kc1dpdGgoXCJlasWhw61taVwiKSB8fFxyXG4gICAgICAgIGtleS5lbmRzV2l0aChcImVuY2FtaVwiKSkpIHtcclxuICAgICAgICByZXR1cm4ga2V5LnN1YnN0cmluZygwLCBsZW4gLSA2KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobGVuID4gNyAmJiAoa2V5LmVuZHNXaXRoKFwiZWrFoWlhXCIpIHx8XHJcbiAgICAgICAga2V5LmVuZHNXaXRoKFwiYXRhbWlcIikgfHxcclxuICAgICAgICBrZXkuZW5kc1dpdGgoXCJhdMOhY2hcIikgfHxcclxuICAgICAgICBrZXkuZW5kc1dpdGgoXCJlbmllY1wiKSB8fFxyXG4gICAgICAgIGtleS5lbmRzV2l0aChcImVuY29tXCIpIHx8XHJcbiAgICAgICAga2V5LmVuZHNXaXRoKFwiZWrFoW9tXCIpIHx8XHJcbiAgICAgICAga2V5LmVuZHNXaXRoKFwiZWrFocOtbVwiKSB8fFxyXG4gICAgICAgIGtleS5lbmRzV2l0aChcImVqxaFlalwiKSB8fFxyXG4gICAgICAgIGtleS5lbmRzV2l0aChcImVqxaFvdVwiKSB8fFxyXG4gICAgICAgIGtleS5lbmRzV2l0aChcImVqxaFpdVwiKSB8fFxyXG4gICAgICAgIGtleS5lbmRzV2l0aChcImVqxaFpZVwiKVxyXG4gICAgKSkge1xyXG4gICAgICAgIHJldHVybiBrZXkuc3Vic3RyaW5nKDAsIGxlbiAtIDUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChsZW4gPiA2ICYmXHJcbiAgICAgICAgKGtleS5lbmRzV2l0aChcImXFpW9tXCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcImlhbWlcIikgfHxcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwiYXTDoW1cIikgfHxcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwiYcWlb21cIikgfHxcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwib3ZpYVwiKSB8fFxyXG4gICAgICAgICAgICBrZXkuZW5kc1dpdGgoXCJpYWNoXCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcImF0w6FtXCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcImVuY2VcIikgfHxcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwiaWVob1wiKSB8fFxyXG4gICAgICAgICAgICBrZXkuZW5kc1dpdGgoXCJpZW11XCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcImllbWVcIikgfHxcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwiaWV0ZVwiKSB8fFxyXG4gICAgICAgICAgICBrZXkuZW5kc1dpdGgoXCJlasWhw61cIikgfHxcclxuICAgICAgICAgICAgLy8gZ2Fib3NcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwiZW5pZVwiKSkpIHtcclxuICAgICAgICByZXR1cm4ga2V5LnN1YnN0cmluZygwLCBsZW4gLSA0KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobGVuID4gNSAmJlxyXG4gICAgICAgIChrZXkuZW5kc1dpdGgoXCJpY2hcIikgfHwgLy8gRnJvbSBjelxyXG4gICAgICAgICAgICBrZXkuZW5kc1dpdGgoXCJlaG9cIikgfHxcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwieWNoXCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcIsOtY2hcIikgfHwgLy8gRnJvbSBjelxyXG4gICAgICAgICAgICBrZXkuZW5kc1dpdGgoXCLDqWhvXCIpIHx8IC8vIEZyb20gY3pcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwiZW1pXCIpIHx8IC8vIEZyb20gY3pcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwiw6ltdVwiKSB8fCAvLyBGcm9tIGN6XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcImVtdVwiKSB8fFxyXG4gICAgICAgICAgICAvKmtleS5lbmRzV2l0aChcImlob1wiKSB8fCovIC8vIFZlxL5taSBtYWzDvSB2cGx5dlxyXG4gICAgICAgICAgICBrZXkuZW5kc1dpdGgoXCLDrW1pXCIpIHx8IC8vIEZyb20gY3pcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwiaW1pXCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcIsOhY2hcIikgfHwgLy8gRnJvbSBjelxyXG4gICAgICAgICAgICBrZXkuZW5kc1dpdGgoXCLDvWNoXCIpIHx8IC8vIEZyb20gY3pcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwiYW1pXCIpIHx8IC8vIEZyb20gY3pcclxuICAgICAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICBrZXkuZW5kc1dpdGgoXCJvdsOpXCIpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleS5lbmRzV2l0aChcIm92w71cIikgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwib3bDrVwiKSB8fCovXHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcIm92aVwiKSB8fCAvLyBGcm9tIGN6XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcImllxaVcIikgfHxcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwiaWXFoVwiKSB8fFxyXG4gICAgICAgICAgICBrZXkuZW5kc1dpdGgoXCJlasO6XCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcImFqw7pcIikgfHxcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwidWrDulwiKSB8fFxyXG4gICAgICAgICAgICBrZXkuZW5kc1dpdGgoXCJlasO6XCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcImVtZVwiKSB8fFxyXG4gICAgICAgICAgICBrZXkuZW5kc1dpdGgoXCLDrXRlXCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcIsOtbWVcIikgfHxcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwiw71taVwiKSB8fCAvLyBGcm9tIGN6XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcInltaVwiKSB8fFxyXG4gICAgICAgICAgICBrZXkuZW5kc1dpdGgoXCJhY2hcIikgfHxcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwiaWFtXCIpIHx8XHJcbiAgICAgICAgICAgIC8qa2V5LmVuZHNXaXRoKFwiYXTDoVwiKSB8fCovXHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcImlhY1wiKSB8fFxyXG4gICAgICAgICAgICBrZXkuZW5kc1dpdGgoXCJpdGVcIikgfHxcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwiaWxpXCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcImlsYVwiKSB8fFxyXG4gICAgICAgICAgICBrZXkuZW5kc1dpdGgoXCJpbG9cIikgfHxcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwiaW1lXCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcIm9jaFwiKVxyXG4gICAgICAgICkpIHtcclxuICAgICAgICByZXR1cm4ga2V5LnN1YnN0cmluZygwLCBsZW4gLSAzKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobGVuID4gNCAmJlxyXG4gICAgICAgICgvKmtleS5lbmRzV2l0aChcIsOtblwiKSB8fCovXHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcIsOtbVwiKSB8fCAvLyBGcm9tIGN6XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcIsOhbVwiKSB8fCAvLyBGcm9tIGN6XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcImFtXCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcInVzXCIpIHx8IC8vIEZyb20gY3pcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwiw71tXCIpIHx8IC8vIEZyb20gY3pcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwieW1cIikgfHxcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwibWlcIikgfHwgLy8gRnJvbSBjelxyXG4gICAgICAgICAgICBrZXkuZW5kc1dpdGgoXCJvdVwiKSB8fCAvLyBGcm9tIGN6XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcIm9tXCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcImVqXCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcIm92XCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcImlhXCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcImllXCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcIml1XCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcImltXCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcImhvXCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcIm11XCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcIm1lXCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcInRlXCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcImHFpVwiKSB8fFxyXG4gICAgICAgICAgICBrZXkuZW5kc1dpdGgoXCJhxaFcIikgfHxcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwiw7rFpVwiKSB8fFxyXG4gICAgICAgICAgICBrZXkuZW5kc1dpdGgoXCJpxaVcIikgfHxcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwiw63FoVwiKSB8fFxyXG4gICAgICAgICAgICBrZXkuZW5kc1dpdGgoXCJpxaFcIikgfHxcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwiaWxcIikgfHxcclxuICAgICAgICAgICAga2V5LmVuZHNXaXRoKFwiw7pjXCIpIHx8XHJcbiAgICAgICAgICAgIGtleS5lbmRzV2l0aChcImXFoVwiKSkpIHtcclxuICAgICAgICByZXR1cm4ga2V5LnN1YnN0cmluZygwLCBsZW4gLSAyKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobGVuID4gMykge1xyXG4gICAgICAgIHN3aXRjaCAoa2V5W2xlbiAtIDFdKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJhXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJlXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJpXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJvXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJ1XCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCLDulwiOlxyXG4gICAgICAgICAgICAvKmNhc2UgXCLDtFwiOiovXHJcbiAgICAgICAgICAgIGNhc2UgXCJ5XCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCLDoVwiOlxyXG4gICAgICAgICAgICBjYXNlIFwiw6lcIjpcclxuICAgICAgICAgICAgY2FzZSBcIsOtXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCLDvVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleS5zdWJzdHJpbmcoMCwgbGVuIC0gMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBrZXk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZVBvc3Nlc3NpdmVzKHM6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBsZW4gPSBzLmxlbmd0aDtcclxuICAgIGlmIChsZW4gPiA1ICYmIHMuZW5kc1dpdGgoXCJpblwiKSB8fFxyXG4gICAgICAgIHMuZW5kc1dpdGgoXCJvdlwiKSkge1xyXG4gICAgICAgIHJldHVybiBzLnN1YnN0cigwLCBsZW4gLSAyKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcztcclxufVxyXG5cclxuZnVuY3Rpb24gbm9ybWFsaXplKHM6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBsZW4gPSBzLmxlbmd0aDtcclxuICAgIC8vIHRvdG8gcHJhdmlkbG8gem5pxb51amUgRlAgYWxlIHp2ecWhdWplIEZOXHJcbiAgICAvKiAgICAgICAgaWYgKGxlbiA+IDEgJiYgc1tsZW4gLSAyXSA9PSBcImlcIiAmJiBzW2xlbi0xXT09XCJjXCIpIHtcclxuICAgICAgICAgICAgICAgIHNbbGVuIC0gMl0gPSBzW2xlbiAtIDFdOyAvLyBlKiA+ICpcclxuICAgICAgICAgICAgICAgIHJldHVybiBsZW4gLSAxO1xyXG4gICAgICAgICAgICB9Ki9cclxuICAgIHN3aXRjaCAoc1tsZW4gLSAxXSkge1xyXG4gICAgICAgIGNhc2UgXCJjXCI6IC8vIFtjxI1dIC0+IGtcclxuICAgICAgICBjYXNlIFwixI1cIjpcclxuICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvLi9nLCAoZSwgaSkgPT4gaSA9PT0gbGVuIC0gMSA/IGUgOiBcImtcIik7XHJcbiAgICAgICAgY2FzZSBcIsS+XCI6IC8vIFvEvl0gLT4gbFxyXG4gICAgICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC8uL2csIChlLCBpKSA9PiBpID09PSBsZW4gLSAxID8gZSA6IFwibFwiKTtcclxuICAgICAgICBjYXNlIFwixYhcIjogLy8gW8S+XSAtPiBsXHJcbiAgICAgICAgICAgIHJldHVybiBzLnJlcGxhY2UoLy4vZywgKGUsIGkpID0+IGkgPT09IGxlbiAtIDEgPyBlIDogXCJuXCIpO1xyXG4gICAgICAgIGNhc2UgXCLFpVwiOiAvLyBbxL5dIC0+IGxcclxuICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvLi9nLCAoZSwgaSkgPT4gaSA9PT0gbGVuIC0gMSA/IGUgOiBcInRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGxlbiA+IDMgJiYgc1tsZW4gLSAzXSA9PT0gXCJpXCIgJiYgKHNbbGVuIC0gMl0gPT09IFwiZVwiIHx8IHNbbGVuIC0gMl0gPT09IFwiYVwiIHx8IHNbbGVuIC0gMl0gPT09IFwidVwiKSkge1xyXG4gICAgICAgIHJldHVybiBzLnJlcGxhY2UoLy4vZywgKGUsIGkpID0+IHtcclxuICAgICAgICAgICAgaWYgKGkgPT09IGxlbiAtIDMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzW2xlbiAtIDJdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpID09PSBsZW4gLSAyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc1tsZW4gLSAxXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHM7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTbG92YWtTdGVtbWVyIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgc3RlbWUod29yZDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSByZW1vdmVQb3NzZXNzaXZlcyhyZW1vdmVDYXNlKHJlbW92ZVByZWRwb25hKHdvcmQpKSk7XHJcbiAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZShyZXN1bHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgaW50ZXJmYWNlIEFqYXhQYXJhbXMge1xyXG4gICAgbWV0aG9kOiBcIkdFVFwiIHwgXCJQT1NUXCI7XHJcbiAgICB1cmw6IHN0cmluZztcclxuICAgIG9uUmVzcG9uc2U6IChkYXRhOiBhbnkpID0+IHZvaWQ7XHJcbiAgICBjb250ZW50OiBzdHJpbmc7XHJcbiAgICBoZWFkZXJzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xyXG59XHJcblxyXG5jbGFzcyBBamF4V3JhcHBlciB7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBhamF4SGFuZGxlcjogWE1MSHR0cFJlcXVlc3QpIHtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFqYXgoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kID0gXCJHRVRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHVybCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIG9uUmVzcG9uc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycyA9IHt9LFxyXG4gICAgICAgICAgICAgICAgICAgICB9OiBBamF4UGFyYW1zKTogQWpheFdyYXBwZXIge1xyXG4gICAgY29uc3QgcmVxdWVzdCAgICAgICAgICAgICAgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICghKHJlcXVlc3QucmVhZHlTdGF0ZSA9PT0gNCAmJiAocmVxdWVzdC5zdGF0dXMgPT09IDIwMCB8fCByZXF1ZXN0LnN0YXR1cyA9PT0gMjAxKSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIG9uUmVzcG9uc2UgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICBvblJlc3BvbnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmVxdWVzdC5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcclxuICAgIE9iamVjdC5lbnRyaWVzKGhlYWRlcnMpLmZvckVhY2goKGVudHJ5KSA9PiByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoZW50cnlbMF0sIGVudHJ5WzFdKSk7XHJcbiAgICByZXF1ZXN0LnNlbmQoY29udGVudCk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBBamF4V3JhcHBlcihyZXF1ZXN0KTtcclxufVxyXG4iLCJleHBvcnQgKiBmcm9tIFwiLi9hamF4XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3J1bnRpbWUtdmFsaWRhdG9yc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9TbG92YWtTdGVtbWVyXCI7XHJcbiIsImV4cG9ydCBjb25zdCBnZXRBc1N0cmluZyA9IChrZXk6IGFueSk6IHN0cmluZyA9PiB7XHJcbiAgICBpZiAodHlwZW9mIGtleSAhPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVmFyaWFibGUgd2l0aCB2YWx1ZSAke2tleX0gaXMgbm90IGEgc3RyaW5nYCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGtleTtcclxufTtcclxuZXhwb3J0IGNvbnN0IGdldEFzTnVtYmVyID0gKGtleTogYW55KTogbnVtYmVyID0+IHtcclxuICAgIGlmICh0eXBlb2Yga2V5ICE9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBWYXJpYWJsZSB3aXRoIHZhbHVlICR7a2V5fSBpcyBub3QgYSBudW1iZXJgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ga2V5O1xyXG59O1xyXG4iLCJpbXBvcnQgeyBoZXgycmdiLCBpbnQycmdiLCByZ2IyaGV4LCByZ2IyaW50IH0gZnJvbSBcIi4uL3V0aWxzL2NvbG9yLXV0aWxzXCI7XHJcblxyXG5mdW5jdGlvbiBjaGVja0NvbG9yVmFsdWUodmFsdWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgY29uc29sZS5hc3NlcnQodmFsdWUgPj0gMCk7XHJcbiAgICBjb25zb2xlLmFzc2VydCh2YWx1ZSA8PSAyNTUpO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ29sb3Ige1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBCTEFDSyA9IG5ldyBDb2xvcigwLCAwLCAwKTtcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgV0hJVEUgPSBuZXcgQ29sb3IoMjU1LCAyNTUsIDI1NSk7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEdSQVkgPSBuZXcgQ29sb3IoMTI4LCAxMjgsIDEyOCk7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFJFRCAgID0gbmV3IENvbG9yKDI1NSwgMCwgMCk7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEdSRUVOID0gbmV3IENvbG9yKDAsIDI1NSwgMCk7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEJMVUUgID0gbmV3IENvbG9yKDAsIDAsIDI1NSk7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHJlZDogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHB1YmxpYyByZWFkb25seSBncmVlbjogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHB1YmxpYyByZWFkb25seSBibHVlOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgcHVibGljIHJlYWRvbmx5IGFscGhhID0gMjU1KSB7XHJcbiAgICAgICAgY2hlY2tDb2xvclZhbHVlKHJlZCk7XHJcbiAgICAgICAgY2hlY2tDb2xvclZhbHVlKGdyZWVuKTtcclxuICAgICAgICBjaGVja0NvbG9yVmFsdWUoYmx1ZSk7XHJcbiAgICAgICAgY2hlY2tDb2xvclZhbHVlKGFscGhhKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGZyb21IZXgoY29sb3I6IHN0cmluZyk6IENvbG9yIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IGhleDJyZ2IoY29sb3IpO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IENvbG9yKC4uLnZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGZyb21JbnQoY29sb3I6IG51bWJlcik6IENvbG9yIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IGludDJyZ2IoY29sb3IpO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IENvbG9yKC4uLnZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IHJnYigpOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0ge1xyXG4gICAgICAgIHJldHVybiBbdGhpcy5yZWQsIHRoaXMuZ3JlZW4sIHRoaXMuYmx1ZV07XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0IHJnYlN0cmluZygpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBgcmdiKCR7dGhpcy5yZWR9LCAke3RoaXMuZ3JlZW59LCAke3RoaXMuYmx1ZX0pYDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbm9ybWFsaXplZCgpOiBDb2xvciB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVkID4gMSB8fCB0aGlzLmdyZWVuID4gMSB8fCB0aGlzLmJsdWUgPiAxIHx8IHRoaXMuYWxwaGEgPiAxICkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKHRoaXMucmVkIC8gMjU1LCB0aGlzLmdyZWVuIC8gMjU1LCB0aGlzLmJsdWUgLyAyNTUsIHRoaXMuYWxwaGEgLyAyNTUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCByZ2JhKCk6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdIHtcclxuICAgICAgICByZXR1cm4gW3RoaXMucmVkLCB0aGlzLmdyZWVuLCB0aGlzLmJsdWUsIHRoaXMuYWxwaGFdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgaGV4KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHJnYjJoZXgoTWF0aC5mbG9vcih0aGlzLnJlZCksIE1hdGguZmxvb3IodGhpcy5ncmVlbiksIE1hdGguZmxvb3IodGhpcy5ibHVlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBpbnQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gcmdiMmludCh0aGlzLnJlZCwgdGhpcy5ncmVlbiwgdGhpcy5ibHVlKTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBHZW5kZXJ9IGluc3RlYWRcclxuICovXHJcbmV4cG9ydCB0eXBlIEdlbmRlclR5cGUgPSBcIk1BTlwiIHwgXCJXT01BTlwiIHwgXCJcIjtcclxuXHJcbmNvbnN0IG1hbGVSZWdleHAgICA9IC9eKG1hbGV8bWFufG11enxib3l8Y2hsYXBlY3xtKSQvZztcclxuY29uc3QgZmVtYWxlUmVnZXhwID0gL14oZmVtYWxlfHdvbWFufHplbmF8Z2lybHxkaWV2Y2F8Znx3fHopJC9nO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlR2VuZGVyKGdlbmRlcjogc3RyaW5nKTogR2VuZGVyIHwgdW5kZWZpbmVkIHtcclxuICAgIGlmICghZ2VuZGVyKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZ2VuZGVyTG93ZXJDYXNlID0gZ2VuZGVyLnRyaW0oKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoXCLFvlwiLCBcInpcIikucmVwbGFjZShcIsSNXCIsIFwiY1wiKTtcclxuICAgIGlmIChnZW5kZXJMb3dlckNhc2UubWF0Y2gobWFsZVJlZ2V4cCkpIHtcclxuICAgICAgICByZXR1cm4gR2VuZGVyLk1BTjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZ2VuZGVyTG93ZXJDYXNlLm1hdGNoKGZlbWFsZVJlZ2V4cCkpIHtcclxuICAgICAgICByZXR1cm4gR2VuZGVyLldPTUFOO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybjtcclxufVxyXG5cclxuZXhwb3J0IGVudW0gR2VuZGVyIHtcclxuICAgIE1BTiA9IFwiTUFOXCIsXHJcbiAgICBXT01BTiA9IFwiV09NQU5cIixcclxufVxyXG4vKipcclxuICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBwYXJzZUdlbmRlcn0gYW5kIHtAbGluayBHZW5kZXJ9IGluc3RlYWRcclxuICogQ2xhc3MgaXMgdXNlZCBmb3IgcGFyc2luZyBnZW5kZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBHZW5kZXJDbGFzcyB7XHJcbiAgICAvKipcclxuICAgICAqIE1ldGhvZCBwYXJzZSBzdHJpbmcgYW5kIHJldHVybiBHZW5kZXJUeXBlXHJcbiAgICAgKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIHBhcnNlR2VuZGVyfSBpbnN0ZWFkXHJcbiAgICAgKiBAcGFyYW0gZ2VuZGVyIGdlbmRlciBpbiBhbnkgZm9ybWF0XHJcbiAgICAgKiBAcmV0dXJucyBwYXJzZWQgZ2VuZGVyIGFzIHtAbGluayBHZW5kZXJUeXBlfVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHBhcnNlID0gcGFyc2VHZW5kZXI7XHJcbn1cclxuIiwiLyoqXHJcbiAqIE1vZGVsIGlzIGVudW0gYW5kIHBhcnNlclxyXG4gKi9cclxuXHJcbmV4cG9ydCAqIGZyb20gXCIuL2dlbmRlci5tb2RlbFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jb2xvci5tb2RlbFwiO1xyXG5cclxuLy8gVE9ETzogQ2Fubm90IGltcG9ydCBjb3VudHJpZXMuZGF0YS5qc29uXHJcbi8vIGV4cG9ydCAqIGZyb20gXCIuL2NvdW50cmllcy9jb3VudHJ5LmludGVyZmFjZVwiO1xyXG4vLyBleHBvcnQgKiBmcm9tIFwiLi9jb3VudHJpZXMvY291bnRyeS5tb2RlbFwiO1xyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBOT0RFICoqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vLyBVVElMU1xyXG5cclxuZXhwb3J0ICogZnJvbSBcIi4vdXRpbHMvZGVwcmVjYXRlZC9BcnJheVV0aWxzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3V0aWxzL0ZpbGVVdGlsc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi91dGlscy9kZXByZWNhdGVkL01hdGhVdGlsc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi91dGlscy9kZXByZWNhdGVkL01pc2NVdGlsc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi91dGlscy9kZXByZWNhdGVkL09iamVjdFV0aWxzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3V0aWxzL2RlcHJlY2F0ZWQvU3RyaW5nVXRpbHNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vdXRpbHMvdGltZS11dGlsc1wiO1xyXG5cclxuZXhwb3J0ICogZnJvbSBcIi4vbWlzYy9TbG92YWtTdGVtbWVyXCI7XHJcblxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBXRUIgKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8vIERPTVxyXG5cclxuZXhwb3J0ICogZnJvbSBcIi4vZG9tL2RlcHJlY2F0ZWQvQ2hlY2tlcnNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vZG9tL2NhbnZhcy1tYW5hZ2VyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2RvbS9kb20tZ2V0XCI7XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBwb2ludExpbmUyZENsb3Nlc3QoXHJcbiAgICBzeDE6IG51bWJlcixcclxuICAgIHN5MTogbnVtYmVyLFxyXG4gICAgc3gyOiBudW1iZXIsXHJcbiAgICBzeTI6IG51bWJlcixcclxuICAgIHB4OiBudW1iZXIsXHJcbiAgICBweTogbnVtYmVyXHJcbik6IHsgeDogbnVtYmVyLCB5OiBudW1iZXIgfSB7XHJcbiAgICBjb25zdCB4RGVsdGEgPSBzeDIgLSBzeDE7XHJcbiAgICBjb25zdCB5RGVsdGEgPSBzeTIgLSBzeTE7XHJcblxyXG4gICAgY29uc3QgdSA9ICgocHggLSBzeDEpICogeERlbHRhICsgKHB5IC0gc3kxKSAqIHlEZWx0YSkgLyAoeERlbHRhICogeERlbHRhICsgeURlbHRhICogeURlbHRhKTtcclxuXHJcbiAgICBpZiAodSA8IDApIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB4OiBzeDEsXHJcbiAgICAgICAgICAgIHk6IHN5MSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh1ID4gMSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHg6IHN4MixcclxuICAgICAgICAgICAgeTogc3kyXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHg6IHN4MSArIHUgKiB4RGVsdGEsXHJcbiAgICAgICAgeTogc3kxICsgdSAqIHlEZWx0YSxcclxuICAgIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgcG9pbnRQb2ludDJkRGlzdGFuY2UgfSBmcm9tIFwiLi9kaXN0YW5jZXMtMmRcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjaXJjbGVSZWN0MmRDb2xsaXNpb24oXHJcbiAgICBjUG9zWDogbnVtYmVyLFxyXG4gICAgY1Bvc1k6IG51bWJlcixcclxuICAgIGNSYWRpdXM6IG51bWJlcixcclxuICAgIHJQb3NYOiBudW1iZXIsXHJcbiAgICByUG9zWTogbnVtYmVyLFxyXG4gICAgclNpemVYOiBudW1iZXIsXHJcbiAgICByU2l6ZVk6IG51bWJlcixcclxuKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBjaXJjbGVEaXN0YW5jZVggPSBNYXRoLmFicyhjUG9zWCAtIHJQb3NYKTtcclxuICAgIGNvbnN0IGNpcmNsZURpc3RhbmNlWSA9IE1hdGguYWJzKGNQb3NZIC0gclBvc1kpO1xyXG5cclxuICAgIGlmIChjaXJjbGVEaXN0YW5jZVggPiAoclNpemVYIC8gMiArIGNSYWRpdXMpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKGNpcmNsZURpc3RhbmNlWSA+IChyU2l6ZVkgLyAyICsgY1JhZGl1cykpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNpcmNsZURpc3RhbmNlWCA8PSAoclNpemVYIC8gMikpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChjaXJjbGVEaXN0YW5jZVkgPD0gKHJTaXplWSAvIDIpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY29ybmVyRGlzdGFuY2VTUSA9XHJcbiAgICAgICAgICAgICAgTWF0aC5wb3coKGNpcmNsZURpc3RhbmNlWCAtIHJQb3NYIC8gMiksIDIpICtcclxuICAgICAgICAgICAgICBNYXRoLnBvdygoY2lyY2xlRGlzdGFuY2VZIC0gclBvc1kgLyAyKSwgMik7XHJcblxyXG4gICAgcmV0dXJuIGNvcm5lckRpc3RhbmNlU1EgPD0gTWF0aC5wb3coY1JhZGl1cywgMik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsaW5lUmVjdGFuZ2xlMmRDb2xsaXNpb24oXHJcbiAgICBhU3RhcnRYOiBudW1iZXIsXHJcbiAgICBhU3RhcnRZOiBudW1iZXIsXHJcbiAgICBhRW5kWDogbnVtYmVyLFxyXG4gICAgYUVuZFk6IG51bWJlcixcclxuICAgIGJQb3NYOiBudW1iZXIsXHJcbiAgICBiUG9zWTogbnVtYmVyLFxyXG4gICAgYlNpemVYOiBudW1iZXIsXHJcbiAgICBiU2l6ZVk6IG51bWJlcixcclxuKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICBwb2ludFJlY3QyZENvbGxpc2lvbihhU3RhcnRYLCBhU3RhcnRZLCBiUG9zWCwgYlBvc1ksIGJTaXplWCwgYlNpemVZKSkgfHxcclxuICAgICAgICBwb2ludFJlY3QyZENvbGxpc2lvbihhRW5kWCwgYUVuZFksIGJQb3NYLCBiUG9zWSwgYlNpemVYLCBiU2l6ZVkpIHx8XHJcbiAgICAgICAgbGluZUxpbmUyZENvbGxpc2lvbihhU3RhcnRYLFxyXG4gICAgICAgICAgICBhU3RhcnRZLFxyXG4gICAgICAgICAgICBhRW5kWCxcclxuICAgICAgICAgICAgYUVuZFksXHJcbiAgICAgICAgICAgIGJQb3NYLFxyXG4gICAgICAgICAgICBiUG9zWSxcclxuICAgICAgICAgICAgYlBvc1ggKyBiU2l6ZVgsXHJcbiAgICAgICAgICAgIGJQb3NZICsgYlNpemVZKSB8fFxyXG4gICAgICAgIGxpbmVMaW5lMmRDb2xsaXNpb24oYVN0YXJ0WCxcclxuICAgICAgICAgICAgYVN0YXJ0WSxcclxuICAgICAgICAgICAgYUVuZFgsXHJcbiAgICAgICAgICAgIGFFbmRZLFxyXG4gICAgICAgICAgICBiUG9zWCArIGJTaXplWCxcclxuICAgICAgICAgICAgYlBvc1ksXHJcbiAgICAgICAgICAgIGJQb3NYLFxyXG4gICAgICAgICAgICBiUG9zWSArIGJTaXplWSk7XHJcblxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbGluZUxpbmUyZENvbGxpc2lvbihcclxuICAgIGFTdGFydFg6IG51bWJlcixcclxuICAgIGFTdGFydFk6IG51bWJlcixcclxuICAgIGFFbmRYOiBudW1iZXIsXHJcbiAgICBhRW5kWTogbnVtYmVyLFxyXG4gICAgYlN0YXJ0WDogbnVtYmVyLFxyXG4gICAgYlN0YXJ0WTogbnVtYmVyLFxyXG4gICAgYkVuZFg6IG51bWJlcixcclxuICAgIGJFbmRZOiBudW1iZXIsXHJcbik6IGJvb2xlYW4ge1xyXG5cclxuICAgIGNvbnN0IGRlbm9taW5hdG9yID0gKChhRW5kWCAtIGFTdGFydFgpICogKGJFbmRZIC0gYlN0YXJ0WSkpIC0gKChhRW5kWSAtIGFTdGFydFkpICogKGJFbmRYIC0gYlN0YXJ0WCkpO1xyXG4gICAgY29uc3QgbnVtZXJhdG9yMSAgPSAoKGFTdGFydFkgLSBiU3RhcnRZKSAqIChiRW5kWCAtIGJTdGFydFgpKSAtICgoYVN0YXJ0WCAtIGJTdGFydFgpICogKGJFbmRZIC0gYlN0YXJ0WSkpO1xyXG4gICAgY29uc3QgbnVtZXJhdG9yMiAgPSAoKGFTdGFydFkgLSBiU3RhcnRZKSAqIChhRW5kWCAtIGFTdGFydFgpKSAtICgoYVN0YXJ0WCAtIGJTdGFydFgpICogKGFFbmRZIC0gYVN0YXJ0WSkpO1xyXG5cclxuICAgIC8vIERldGVjdCBjb2luY2lkZW50IGxpbmVzIChoYXMgYSBwcm9ibGVtLCByZWFkIGJlbG93KVxyXG4gICAgaWYgKGRlbm9taW5hdG9yID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bWVyYXRvcjEgPT09IDAgJiYgbnVtZXJhdG9yMiA9PT0gMDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByID0gbnVtZXJhdG9yMSAvIGRlbm9taW5hdG9yO1xyXG4gICAgY29uc3QgcyA9IG51bWVyYXRvcjIgLyBkZW5vbWluYXRvcjtcclxuXHJcbiAgICByZXR1cm4gKHIgPj0gMCAmJiByIDw9IDEpICYmIChzID49IDAgJiYgcyA8PSAxKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlY3RSZWN0MmRDb2xsaXNpb24oXHJcbiAgICBheDogbnVtYmVyLFxyXG4gICAgYXk6IG51bWJlcixcclxuICAgIGF3OiBudW1iZXIsXHJcbiAgICBhaDogbnVtYmVyLFxyXG4gICAgYng6IG51bWJlcixcclxuICAgIGJ5OiBudW1iZXIsXHJcbiAgICBidzogbnVtYmVyLFxyXG4gICAgYmg6IG51bWJlcixcclxuKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gYnggKyBidyA+PSBheCAmJiBieSArIGJoID49IGF5ICYmIGJ4IDw9IGF4ICsgYXcgJiYgYnkgPD0gYXkgKyBhaDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNpcmNsZUNpcmNsZTJkQ29sbGlzaW9uKFxyXG4gICAgYVg6IG51bWJlcixcclxuICAgIGFZOiBudW1iZXIsXHJcbiAgICBhUmFkaXVzOiBudW1iZXIsXHJcbiAgICBiWDogbnVtYmVyLFxyXG4gICAgYlk6IG51bWJlcixcclxuICAgIGJSYWRpdXM6IG51bWJlcixcclxuKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gcG9pbnRQb2ludDJkRGlzdGFuY2UoYVgsIGFZLCBiWCwgYlkpIDw9IGFSYWRpdXMgKyBiUmFkaXVzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcG9pbnRSZWN0MmRDb2xsaXNpb24oXHJcbiAgICBwb2ludFg6IG51bWJlcixcclxuICAgIHBvaW50WTogbnVtYmVyLFxyXG4gICAgcmVjdFg6IG51bWJlcixcclxuICAgIHJlY3RZOiBudW1iZXIsXHJcbiAgICByZWN0VzogbnVtYmVyLFxyXG4gICAgcmVjdEg6IG51bWJlcixcclxuKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gcG9pbnRYID49IHJlY3RYICYmXHJcbiAgICAgICAgcG9pbnRZID49IHJlY3RZICYmXHJcbiAgICAgICAgcG9pbnRYIDw9IHJlY3RYICsgcmVjdFcgJiZcclxuICAgICAgICBwb2ludFkgPD0gcmVjdFkgKyByZWN0SDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50UmVjdE1pbk1heDJkQ29sbGlzaW9uKFxyXG4gICAgcG9pbnRYOiBudW1iZXIsXHJcbiAgICBwb2ludFk6IG51bWJlcixcclxuICAgIG1pblg6IG51bWJlcixcclxuICAgIG1pblk6IG51bWJlcixcclxuICAgIG1heFg6IG51bWJlcixcclxuICAgIG1heFk6IG51bWJlcixcclxuKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gcG9pbnRYID49IG1pblggJiZcclxuICAgICAgICBwb2ludFkgPj0gbWluWSAmJlxyXG4gICAgICAgIHBvaW50WCA8PSBtYXhYICYmXHJcbiAgICAgICAgcG9pbnRZIDw9IG1heFk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwb2ludENpcmNsZTJkQ29sbGlzaW9uKFxyXG4gICAgcG9pbnRYOiBudW1iZXIsXHJcbiAgICBwb2ludFk6IG51bWJlcixcclxuICAgIGNpcmNsZVg6IG51bWJlcixcclxuICAgIGNpcmNsZVk6IG51bWJlcixcclxuICAgIGNpcmNsZVJhZGl1czogbnVtYmVyLFxyXG4pOiBib29sZWFuIHtcclxuICAgIHJldHVybiBwb2ludFBvaW50MmREaXN0YW5jZShwb2ludFgsIHBvaW50WSwgY2lyY2xlWCwgY2lyY2xlWSkgPD0gY2lyY2xlUmFkaXVzO1xyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBwb2ludFBvaW50MmREaXN0YW5jZShheDogbnVtYmVyLCBheTogbnVtYmVyLCBieDogbnVtYmVyLCBieTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBNYXRoLnNxcnQocG9pbnRQb2ludFNxcnQyZERpc3RhbmNlKGF4LCBheSwgYngsIGJ5KSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwb2ludFBvaW50U3FydDJkRGlzdGFuY2UoYXg6IG51bWJlciwgYXk6IG51bWJlciwgYng6IG51bWJlciwgYnk6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBjb25zdCBkaXN0WCA9IGF4IC0gYng7XHJcbiAgICBjb25zdCBkaXN0WSA9IGF5IC0gYnk7XHJcblxyXG4gICAgcmV0dXJuIGRpc3RYICogZGlzdFggKyBkaXN0WSAqIGRpc3RZO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcG9pbnRMaW5lMmREaXN0YW5jZShcclxuICAgIGFYOiBudW1iZXIsXHJcbiAgICBhWTogbnVtYmVyLFxyXG4gICAgYlg6IG51bWJlcixcclxuICAgIGJZOiBudW1iZXIsXHJcbiAgICBwWDogbnVtYmVyLFxyXG4gICAgcFk6IG51bWJlcixcclxuKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBNYXRoLnNxcnQocG9pbnRMaW5lU3FydDJkRGlzdGFuY2UoYVgsIGFZLCBiWCwgYlksIHBYLCBwWSkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcG9pbnRMaW5lU3FydDJkRGlzdGFuY2UoXHJcbiAgICBhWDogbnVtYmVyLFxyXG4gICAgYVk6IG51bWJlcixcclxuICAgIGJYOiBudW1iZXIsXHJcbiAgICBiWTogbnVtYmVyLFxyXG4gICAgcFg6IG51bWJlcixcclxuICAgIHBZOiBudW1iZXIsXHJcbik6IG51bWJlciB7XHJcbiAgICBjb25zdCBBID0gcFggLSBhWDtcclxuICAgIGNvbnN0IEIgPSBwWSAtIGFZO1xyXG4gICAgY29uc3QgQyA9IGJYIC0gYVg7XHJcbiAgICBjb25zdCBEID0gYlkgLSBhWTtcclxuXHJcbiAgICBjb25zdCBkb3QgICAgICAgICAgPSBBICogQyArIEIgKiBEO1xyXG4gICAgY29uc3QgbGVuZ3RoU3F1YXJlID0gQyAqIEMgKyBEICogRDtcclxuICAgIGxldCBwYXJhbSAgICAgICAgICA9IC0xO1xyXG4gICAgaWYgKGxlbmd0aFNxdWFyZSAhPT0gMCkge1xyXG4gICAgICAgIHBhcmFtID0gZG90IC8gbGVuZ3RoU3F1YXJlO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB4eDogbnVtYmVyO1xyXG4gICAgbGV0IHl5OiBudW1iZXI7XHJcblxyXG4gICAgaWYgKHBhcmFtIDwgMCkge1xyXG4gICAgICAgIHh4ID0gYVg7XHJcbiAgICAgICAgeXkgPSBhWTtcclxuICAgIH0gZWxzZSBpZiAocGFyYW0gPiAxKSB7XHJcbiAgICAgICAgeHggPSBiWDtcclxuICAgICAgICB5eSA9IGJZO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB4eCA9IGFYICsgcGFyYW0gKiBDO1xyXG4gICAgICAgIHl5ID0gYVkgKyBwYXJhbSAqIEQ7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZHggPSBwWCAtIHh4O1xyXG4gICAgY29uc3QgZHkgPSBwWSAtIHl5O1xyXG5cclxuICAgIHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeTtcclxufVxyXG5cclxuXHJcbiIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3IzXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcG9pbnRQb2ludDNkRGlzdGFuY2UoYXg6IG51bWJlciwgYXk6IG51bWJlciwgYXo6IG51bWJlciwgYng6IG51bWJlciwgYnk6IG51bWJlciwgYno6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHBvaW50UG9pbnRTcXIzZERpc3RhbmNlKGF4LCBheSwgYXosIGJ4LCBieSwgYnopKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50UG9pbnRTcXIzZERpc3RhbmNlKGF4OiBudW1iZXIsIGF5OiBudW1iZXIsIGF6OiBudW1iZXIsIGJ4OiBudW1iZXIsIGJ5OiBudW1iZXIsIGJ6OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgY29uc3QgZGlzdFggPSBheCAtIGJ4O1xyXG4gICAgY29uc3QgZGlzdFkgPSBheSAtIGJ5O1xyXG4gICAgY29uc3QgZGlzdFogPSBheiAtIGJ6O1xyXG5cclxuICAgIHJldHVybiBkaXN0WCAqIGRpc3RYICsgZGlzdFkgKiBkaXN0WSArIGRpc3RaICogZGlzdFo7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwb2ludExpbmUzZERpc3RhbmNlKFxyXG4gICAgYVN0YXJ0WDogbnVtYmVyLFxyXG4gICAgYVN0YXJ0WTogbnVtYmVyLFxyXG4gICAgYVN0YXJ0WjogbnVtYmVyLFxyXG4gICAgYUVuZFg6IG51bWJlcixcclxuICAgIGFFbmRZOiBudW1iZXIsXHJcbiAgICBhRW5kWjogbnVtYmVyLFxyXG4gICAgYkNlbnRlclg6IG51bWJlcixcclxuICAgIGJDZW50ZXJZOiBudW1iZXIsXHJcbiAgICBiQ2VudGVyWjogbnVtYmVyLFxyXG4pOiBudW1iZXIge1xyXG4gICAgY29uc3QgYVN1YkJ4ID0gYVN0YXJ0WCAtIGFFbmRYO1xyXG4gICAgY29uc3QgYVN1YkJ5ID0gYVN0YXJ0WSAtIGFFbmRZO1xyXG4gICAgY29uc3QgYVN1YkJ6ID0gYVN0YXJ0WiAtIGFFbmRaO1xyXG4gICAgY29uc3QgcFN1YkJ4ID0gYkNlbnRlclggLSBhRW5kWDtcclxuICAgIGNvbnN0IHBTdWJCeSA9IGJDZW50ZXJZIC0gYUVuZFk7XHJcbiAgICBjb25zdCBwU3ViQnogPSBiQ2VudGVyWiAtIGFFbmRaO1xyXG4gICAgY29uc3QgZG90QSAgID0gYVN1YkJ4ICogcFN1YkJ4ICsgYVN1YkJ5ICogcFN1YkJ5ICsgYVN1YkJ6ICogcFN1YkJ6O1xyXG4gICAgaWYgKGRvdEEgPCAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHBvaW50UG9pbnQzZERpc3RhbmNlKGJDZW50ZXJYLCBiQ2VudGVyWSwgYkNlbnRlclosIGFFbmRYLCBhRW5kWSwgYUVuZFopO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBjb25zdCBiU3ViQXggPSBhRW5kWCAtIGFTdGFydFg7XHJcbiAgICBjb25zdCBiU3ViQXkgPSBhRW5kWSAtIGFTdGFydFk7XHJcbiAgICBjb25zdCBiU3ViQXogPSBhRW5kWiAtIGFTdGFydFo7XHJcbiAgICBjb25zdCBwU3ViQXggPSBiQ2VudGVyWCAtIGFTdGFydFg7XHJcbiAgICBjb25zdCBwU3ViQXkgPSBiQ2VudGVyWSAtIGFTdGFydFk7XHJcbiAgICBjb25zdCBwU3ViQXogPSBiQ2VudGVyWiAtIGFTdGFydFo7XHJcbiAgICBjb25zdCBkb3RCICAgPSBiU3ViQXggKiBwU3ViQXggKyBiU3ViQXkgKiBwU3ViQXkgKyBiU3ViQXogKiBwU3ViQXo7XHJcbiAgICBpZiAoZG90QiA8IDApIHtcclxuICAgICAgICByZXR1cm4gcG9pbnRQb2ludDNkRGlzdGFuY2UoYkNlbnRlclgsIGJDZW50ZXJZLCBiQ2VudGVyWiwgYVN0YXJ0WCwgYVN0YXJ0WSwgYVN0YXJ0Wik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZlY3RvclBvaW50M2REaXN0YW5jZShhU3RhcnRYLCBhU3RhcnRZLCBhU3RhcnRaLCBhRW5kWCwgYUVuZFksIGFFbmRaLCBiQ2VudGVyWCwgYkNlbnRlclksIGJDZW50ZXJaKTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTaW1wbGVWZWN0b3IzZiB7XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcbiAgICB6OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwb2ludE5vcm1hbFBsYW5lM2REaXN0YW5jZShhTm9ybWFsOiBWZWN0b3IzLCBhUG9pbnQ6IFZlY3RvcjMsIGJQb2ludDogVmVjdG9yMyk6IG51bWJlciB7XHJcbiAgICBjb25zdCBkID0gLVZlY3RvcjMubXVsKGFOb3JtYWwsIGFQb2ludCkuc3VtKCk7XHJcblxyXG4gICAgcmV0dXJuIE1hdGguYWJzKChWZWN0b3IzLm11bChhTm9ybWFsLCBiUG9pbnQpLnN1bSgpICsgZCkgLyBNYXRoLnNxcnQoVmVjdG9yMy5tdWwoYU5vcm1hbCwgYU5vcm1hbCkuc3VtKCkpKTtcclxufVxyXG5cclxuLy8gZXhwb3J0IGZ1bmN0aW9uIHBvaW50UGxhbmUoVmVjdG9yMyBhMSwgVmVjdG9yMyBhMiwgVmVjdG9yMyBhMywgVmVjdG9yMyBiUG9pbnQpIHtcclxuLy8gICAgIHJldHVybiBwb2ludFBsYW5lKGEzLnN1YihhMikuY3Jvc3MoYTEuc3ViKGEyKSksIGExLCBiUG9pbnQpO1xyXG4vLyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdmVjdG9yUG9pbnQzZERpc3RhbmNlKFxyXG4gICAgc3RhcnRYOiBudW1iZXIsXHJcbiAgICBzdGFydFk6IG51bWJlcixcclxuICAgIHN0YXJ0WjogbnVtYmVyLFxyXG4gICAgZW5kWDogbnVtYmVyLFxyXG4gICAgZW5kWTogbnVtYmVyLFxyXG4gICAgZW5kWjogbnVtYmVyLFxyXG4gICAgcG9pbnRYOiBudW1iZXIsXHJcbiAgICBwb2ludFk6IG51bWJlcixcclxuICAgIHBvaW50WjogbnVtYmVyLFxyXG4pOiBudW1iZXIge1xyXG4gICAgY29uc3Qgc3RhcnRTdWJFbmRYID0gc3RhcnRYIC0gZW5kWDtcclxuICAgIGNvbnN0IHN0YXJ0U3ViRW5kWSA9IHN0YXJ0WSAtIGVuZFk7XHJcbiAgICBjb25zdCBzdGFydFN1YkVuZFogPSBzdGFydFogLSBlbmRaO1xyXG5cclxuICAgIGNvbnN0IGVuZFN1YlBvaW50WCA9IGVuZFggLSBwb2ludFg7XHJcbiAgICBjb25zdCBlbmRTdWJQb2ludFkgPSBlbmRZIC0gcG9pbnRZO1xyXG4gICAgY29uc3QgZW5kU3ViUG9pbnRaID0gZW5kWiAtIHBvaW50WjtcclxuXHJcblxyXG4gICAgY29uc3QgY3Jvc3NYID0gc3RhcnRTdWJFbmRZICogZW5kU3ViUG9pbnRaIC0gc3RhcnRTdWJFbmRaICogZW5kU3ViUG9pbnRZO1xyXG4gICAgY29uc3QgY3Jvc3NZID0gc3RhcnRTdWJFbmRaICogZW5kU3ViUG9pbnRYIC0gc3RhcnRTdWJFbmRYICogZW5kU3ViUG9pbnRaO1xyXG4gICAgY29uc3QgY3Jvc3NaID0gc3RhcnRTdWJFbmRYICogZW5kU3ViUG9pbnRZIC0gc3RhcnRTdWJFbmRZICogZW5kU3ViUG9pbnRYO1xyXG5cclxuICAgIGNvbnN0IGxlbmd0aDEgPSBNYXRoLnNxcnQoY3Jvc3NYICogY3Jvc3NYICsgY3Jvc3NZICogY3Jvc3NZICsgY3Jvc3NaICogY3Jvc3NaKTtcclxuICAgIGNvbnN0IGxlbmd0aDIgPSBNYXRoLnNxcnQoc3RhcnRTdWJFbmRYICogc3RhcnRTdWJFbmRYICsgc3RhcnRTdWJFbmRZICogc3RhcnRTdWJFbmRZICsgc3RhcnRTdWJFbmRaICogc3RhcnRTdWJFbmRaKTtcclxuXHJcbiAgICByZXR1cm4gbGVuZ3RoMSAvIGxlbmd0aDI7XHJcbn1cclxuIiwiZXhwb3J0ICogZnJvbSBcIi4vY2xvc2VzdC0yZFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jb2xsaXNpb25zLTJkXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2Rpc3RhbmNlcy0yZFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9kaXN0YW5jZXMtM2RcIjtcclxuIiwiaW1wb3J0IHsgQWJzdHJhY3RGaXh0dXJlIH0gZnJvbSBcIi4vYWJzdHJhY3QuZml4dHVyZVwiO1xyXG5pbXBvcnQgeyBBYnN0cmFjdE1hcHBlciB9IGZyb20gXCIuL2Fic3RyYWN0Lm1hcHBlclwiO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0RGF0YWJhc2VGaXh0dXJlPE9iaiwgT2JqRHRvPiBleHRlbmRzIEFic3RyYWN0Rml4dHVyZTxPYmo+IHtcclxuICAgIHB1YmxpYyByZWFkb25seSBsaXN0RHRvOiBPYmpEdG9bXTtcclxuICAgIHB1YmxpYyByZWFkb25seSBkZXRhaWxEdG86IE9iakR0bztcclxuXHJcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IobGlzdDogT2JqW10sIG1hcHBlcjogQWJzdHJhY3RNYXBwZXI8T2JqLCBPYmpEdG8+KSB7XHJcbiAgICAgICAgc3VwZXIobGlzdCk7XHJcbiAgICAgICAgdGhpcy5saXN0RHRvICAgPSBsaXN0Lm1hcChtYXBwZXIubWFwVG9EdG8sIG1hcHBlcik7XHJcbiAgICAgICAgdGhpcy5kZXRhaWxEdG8gPSB0aGlzLmxpc3REdG9bMF07XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0Rml4dHVyZTxPYmo+IHtcclxuICAgIHB1YmxpYyByZWFkb25seSBkZXRhaWw6IE9iajtcclxuXHJcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGxpc3Q6IE9ialtdKSB7XHJcbiAgICAgICAgdGhpcy5kZXRhaWwgPSBsaXN0WzBdO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdE1hcHBlcjxPYmosIE9iakR0bz4ge1xyXG4gICAgcHVibGljIGFic3RyYWN0IG1hcFRvRHRvKG9iamVjdDogUGFydGlhbDxPYmo+KTogT2JqRHRvO1xyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBtYXBGcm9tRHRvKG9iamVjdDogUGFydGlhbDxPYmpEdG8+KTogT2JqO1xyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBQYWdpbmF0ZU1vZGVsIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgSVRFTVNfUEVSX1BBR0UgPSAxMDtcclxuICAgIHB1YmxpYyBsaW1pdDogbnVtYmVyO1xyXG4gICAgcHVibGljIG9mZnNldDogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb3VudCA9IFBhZ2luYXRlTW9kZWwuSVRFTVNfUEVSX1BBR0UsIG9mZnNldCA9IDApIHtcclxuICAgICAgICB0aGlzLmxpbWl0ICA9ICtjb3VudDtcclxuICAgICAgICB0aGlzLm9mZnNldCA9ICtvZmZzZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyB2YWxpZGF0ZShwYWdpbmF0ZT86IFBhZ2luYXRlTW9kZWwpOiBQYWdpbmF0ZU1vZGVsIHtcclxuICAgICAgICBpZiAoIXBhZ2luYXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUGFnaW5hdGVNb2RlbCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQYWdpbmF0ZU1vZGVsKFxyXG4gICAgICAgICAgICBpc05hTihwYWdpbmF0ZS5saW1pdCkgPyBQYWdpbmF0ZU1vZGVsLklURU1TX1BFUl9QQUdFIDogcGFnaW5hdGUubGltaXQsXHJcbiAgICAgICAgICAgIGlzTmFOKHBhZ2luYXRlLm9mZnNldCkgPyAwIDogcGFnaW5hdGUub2Zmc2V0LFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0ICogZnJvbSBcIi4vaG9yaXpvbnRhbC1hbGlnbi50eXBlXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2tleS12YWx1ZS5pbnRlcmZhY2VcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vbmVzdGVkLXN0cmluZy1tYXAuaW50ZXJmYWNlXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL29iamVjdC1lbnRyeS5pbnRlcmZhY2VcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vb3B0aW9uYWwudHlwZVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9wb2ludC5pbnRlcmFmYWNlXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3Byb3AudHlwZVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9wcm9wZXJ0eS1kZWNvcmF0b3IudHlwZVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9zaXplLmludGVyYWZhY2VcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vc3RyaW5nLW1hcC5pbnRlcmZhY2VcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vdGV4dC1vcHRpb25zLmludGVyZmFjZVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi90eXBlLmludGVyZmFjZVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi91bml0LW51bWJlci50eXBlXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3ZlcnRpY2FsLWFsaWduLnR5cGVcIjtcclxuIiwiaW1wb3J0IHsgQ2hlY2tlcnMgfSBmcm9tIFwiLi4vZG9tL2RlcHJlY2F0ZWQvQ2hlY2tlcnNcIjtcclxuaW1wb3J0IHsgRG9tR2V0IH0gZnJvbSBcIi4uL2RvbS9kb20tZ2V0XCI7XHJcbmltcG9ydCB7IE5vdEJyb3dzZXJFeGNlcHRpb24gfSBmcm9tIFwiLi4vZXJyb3JzL25vdC1icm93c2VyLmV4Y2VwdGlvblwiO1xyXG5pbXBvcnQgeyBQb2ludCB9IGZyb20gXCIuLi90eXBlcy9wb2ludC5pbnRlcmFmYWNlXCI7XHJcbmltcG9ydCB7IFNpemUgfSBmcm9tIFwiLi4vdHlwZXMvc2l6ZS5pbnRlcmFmYWNlXCI7XHJcbmltcG9ydCB7IFN0cmluZ01hcCB9IGZyb20gXCIuLi90eXBlcy9zdHJpbmctbWFwLmludGVyZmFjZVwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBPYmplY3RDcmVhdG9yUGFyYW1zIHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIGF0dHI/OiBTdHJpbmdNYXA7XHJcbiAgICBjb250Pzogc3RyaW5nIHwgSFRNTEVsZW1lbnQgfCBIVE1MRWxlbWVudFtdO1xyXG4gICAgc3R5bGU/OiBDU1NTdHlsZURlY2xhcmF0aW9uO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRG9tVXRpbHMge1xyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiByZXR1cm5zIGhlaWdodCBvZiB3aW5kb3dcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB3aW5kb3cgaGVpZ2h0IGluIHBpeGVsc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldFdpbmRvd0hlaWdodCgpOiBudW1iZXIge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBOb3RCcm93c2VyRXhjZXB0aW9uKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IHx8IGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRnVuY3Rpb24gcmV0dXJucyB3aWR0aCBvZiB3aW5kb3dcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB3aW5kb3cgd2lkdGggaW4gcGl4ZWxzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0V2luZG93V2lkdGgoKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgTm90QnJvd3NlckV4Y2VwdGlvbigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggfHwgZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIHNldCwgYXBwZW5kIG9yIHJldHVybnMgdGV4dCBvZiBlbGVtZW50XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgLSBpbnB1dCBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0gdGV4dCAtIHRleHQgdG8gcHV0IGluIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSBhcHBlbmQgLSBmbGFnIGlmIHRleHQgc2hvdWxkIGJlIGFwcGVuZCBvciByZXBsYWNlIHByZXZpb3VzIHRleHRcclxuICAgICAqIEByZXR1cm5zIGVsZW1lbnQgZ2l2ZW4gYXMgaW5wdXRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyB0ZXh0KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCB0ZXh0OiBzdHJpbmcsIGFwcGVuZCA9IHRydWUpOiBIVE1MRWxlbWVudCB7XHJcbiAgICAgICAgaWYgKGFwcGVuZCkge1xyXG4gICAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ICs9IHRleHQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IHRleHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIHNldCwgYXBwZW5kIG9yIHJldHVybnMgaHRtbCBjb250ZW50IG9mIGVsZW1lbnRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZWxlbWVudCAtIGlucHV0IGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSBodG1sIC0gaHRtbCB0byBwdXQgaW4gZWxlbWVudFxyXG4gICAgICogQHBhcmFtIGFwcGVuZCAtIGZsYWcgaWYgaHRtbCBzaG91bGQgYmUgYXBwZW5kIG9yIHJlcGxhY2UgcHJldmlvdXMgY29udGVudFxyXG4gICAgICogQHJldHVybnMgZWxlbWVudCBnaXZlbiBhcyBpbnB1dFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGh0bWwoZWxlbWVudDogSFRNTEVsZW1lbnQsIGh0bWw6IHN0cmluZyB8IEhUTUxFbGVtZW50LCBhcHBlbmQgPSB0cnVlKTogSFRNTEVsZW1lbnQge1xyXG4gICAgICAgIGlmIChhcHBlbmQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBodG1sID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCArPSBodG1sO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKENoZWNrZXJzLmlzRWxlbWVudChodG1sKSkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChodG1sKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGh0bWwgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBodG1sO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoQ2hlY2tlcnMuaXNFbGVtZW50KGh0bWwpKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChodG1sKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRnVuY3Rpb24gcmV0dXJucywgYWRkLCByZW1vdmUgb3IgdG9nZ2xlIGVsZW1lbnRzIGNsYXNzZXNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZWxlbWVudCAtIGlucHV0IGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSBuYW1lIC0gY2xhc3MgbmFtZSBvciBsaXN0IG9mIGNsYXNzIG5hbWVzXHJcbiAgICAgKiBAcGFyYW0gZm9yY2UgLSBmbGFnIGlmIGNsYXNzIHNob3VsZCBiZSB0b2dnbGVkIGZhbHNlXHJcbiAgICAgKiBAcmV0dXJucyBib29sZWFuIGlmIGZ1bmN0aW9uIGlzIHVzZWQgdG8gY2hlY2sgY2xhc3MgcHJlc2VuY2Ugb3RoZXJ3aXNlIGVsZW1lbnQgZ2l2ZW4gYXMgaW5wdXRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBjbGFzcyhlbGVtZW50OiBIVE1MRWxlbWVudCwgbmFtZTogc3RyaW5nIHwgc3RyaW5nW10sIGZvcmNlID0gZmFsc2UpOiBIVE1MRWxlbWVudCB8IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5hbWUpKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2xhc3NOYW1lIG9mIG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIERvbVV0aWxzLmNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSwgZm9yY2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3dpdGNoIChuYW1lWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiK1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChuYW1lLnN1YnN0cmluZygxKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiLVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShuYW1lLnN1YnN0cmluZygxKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiL1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cmluZygxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQ2hlY2tlcnMuaXNCb29sZWFuKGZvcmNlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUobmFtZSwgZm9yY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhuYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiBjcmV0ZSBuZXcgZWxlbWVudFxyXG4gICAgICpcclxuICAgICAqIEVsZW1lbnRNYW5hZ2VyLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgPT4gPGRpdj48L2Rpdj47XHJcbiAgICAgKiBFbGVtZW50TWFuYWdlci5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtpZDogXCJpZGVcIn0pID0+IDxkaXYgaWQ9XCJpZGVcIj48L2Rpdj47XHJcbiAgICAgKiBFbGVtZW50TWFuYWdlci5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHt9LCBcInRleHRcIikgPT4gPGRpdj50ZXh0PC9kaXY+O1xyXG4gICAgICogRWxlbWVudE1hbmFnZXIuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7fSwgXCI8Yj50ZXh0PC9iPlwiKSA9PiA8ZGl2PjxiPnRleHQ8L2I+PC9kaXY+O1xyXG4gICAgICogRWxlbWVudE1hbmFnZXIuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7fSwgXCJ0ZXh0XCIsIHtjb2xvcjogXCJibHVlXCJ9KSA9PiA8ZGl2IHN0eWxlPVwiY29sb3I6IGJsdWU7XCI+dGV4dDwvZGl2PlxyXG4gICAgICpcclxuICAgICAqIEVsZW1lbnRNYW5hZ2VyLmNyZWF0ZUVsZW1lbnQoe25hbWU6IFwiZGl2XCJ9KSA9PiA8ZGl2PjwvZGl2PjtcclxuICAgICAqIEVsZW1lbnRNYW5hZ2VyLmNyZWF0ZUVsZW1lbnQoe25hbWU6IFwiZGl2XCJ9KSA9PiA8ZGl2PjwvZGl2PjtcclxuICAgICAqIEVsZW1lbnRNYW5hZ2VyLmNyZWF0ZUVsZW1lbnQoe25hbWU6IFwiZGl2XCIsIGF0dHI6IHtpZDogXCJpZGVcIn19KSA9PiA8ZGl2IGlkPVwiaWRlXCI+PC9kaXY+O1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuYW1lIC0gbmFtZSBvZiBlbGVtZW50IG9yIG9iamVjdCBjb250YWlucyBhbGwgY29uZmlndXJhdGlvblxyXG4gICAgICogQHBhcmFtIGF0dHIgLSBtYXAgb2YgYWxsIGVsZW1lbnQgYXR0cmlidXRlc1xyXG4gICAgICogQHBhcmFtIGNvbnQgLSBlbGVtZW50IGNvbnRlbnQuIENhbiBiZSBzdHJpbmcsIGVsZW1lbnQgb3IgYXJyYXkgb2YgZWxlbWVudHNcclxuICAgICAqIEBwYXJhbSBzdHlsZSAtIHN0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxyXG4gICAgICogQHJldHVybnMgY3JlYXRlZCBlbGVtZW50XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlRWxlbWVudChuYW1lOiBzdHJpbmcgfCBPYmplY3RDcmVhdG9yUGFyYW1zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI/OiBTdHJpbmdNYXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udD86IHN0cmluZyB8IEhUTUxFbGVtZW50IHwgSFRNTEVsZW1lbnRbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT86IENTU1N0eWxlRGVjbGFyYXRpb24pOiBIVE1MRWxlbWVudCB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgTm90QnJvd3NlckV4Y2VwdGlvbigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGVsOiBIVE1MRWxlbWVudDtcclxuICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIERvbVV0aWxzLmNyZWF0ZUVsZW1lbnQobmFtZS5uYW1lLCBuYW1lLmF0dHIgfHwge30sIG5hbWUuY29udCB8fCBcIlwiLCBuYW1lLnN0eWxlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBhdHRyID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhdHRyLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHN0eWxlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHN0eWxlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlW2tleV0gPSBzdHlsZVtrZXldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb250KSkge1xyXG4gICAgICAgICAgICBjb250LmZvckVhY2goKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIERvbVV0aWxzLmh0bWwoZWwsIGUsIHRydWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBEb21VdGlscy5odG1sKGVsLCBjb250IGFzIHN0cmluZyB8IEhUTUxFbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBlbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIHJlbW92ZSBlbGVtZW50XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgLSBpbnB1dCBlbGVtZW50XHJcbiAgICAgKiBAcmV0dXJucyByZW1vdmVkIGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyByZW1vdmUoZWxlbWVudDogRWxlbWVudCk6IEVsZW1lbnQge1xyXG4gICAgICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgaWYgKHBhcmVudEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRnVuY3Rpb24gcmV0dXJucyBvYmplY3Qgd2l0aCBlbGVtZW50IHBvc2l0aW9uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgLSBpbnB1dCBlbGVtZW50XHJcbiAgICAgKiBAcmV0dXJucyBwb3NpdGlvbiBvZiBlbGVtZW50XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcG9zaXRpb24oZWxlbWVudDogSFRNTEVsZW1lbnQpOiBQb2ludCB7XHJcbiAgICAgICAgbGV0IHRvcCAgPSAwO1xyXG4gICAgICAgIGxldCBsZWZ0ID0gMDtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgIHRvcCArPSBlbGVtZW50Lm9mZnNldFRvcCB8fCAwO1xyXG4gICAgICAgICAgICBsZWZ0ICs9IGVsZW1lbnQub2Zmc2V0TGVmdCB8fCAwO1xyXG5cclxuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50IGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgIH0gd2hpbGUgKGVsZW1lbnQpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB4OiBsZWZ0LFxyXG4gICAgICAgICAgICB5OiB0b3AsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIHJldHVybnMgb3JkZXIgb2YgZWxlbWVudCBiZXR3ZWVuIHNpYmxpbmdzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgLSBpbnB1dCBlbGVtZW50XHJcbiAgICAgKiBAcmV0dXJucyBpbmRleCBvZiBudW1iZXJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBpbmRleE9mKGVsZW1lbnQ6IEVsZW1lbnQgfCBudWxsKTogbnVtYmVyIHtcclxuICAgICAgICBsZXQgaW5kZXggPSAwO1xyXG4gICAgICAgIHdoaWxlIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XHJcbiAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiByZXR1cm5zIG9iamVjdCB3aXRoIGVsZW1lbnQgc2l6ZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBlbGVtZW50IC0gaW5wdXQgZWxlbWVudFxyXG4gICAgICogQHJldHVybnMgc2l6ZSBvZiBlbGVtZW50XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgc2l6ZShlbGVtZW50OiBIVE1MRWxlbWVudCk6IFNpemUge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHQsXHJcbiAgICAgICAgICAgIHdpZHRoIDogZWxlbWVudC5vZmZzZXRXaWR0aCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgc2VyaWFsaXplKGZvcm06IEhUTUxGb3JtRWxlbWVudCk6IFN0cmluZ01hcCB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0OiBTdHJpbmdNYXAgPSB7fTtcclxuICAgICAgICAvLyBpZiBmb3JtcyBpcyBub3QgZWxlbWVudFxyXG4gICAgICAgIGlmICghQ2hlY2tlcnMuaXNFbGVtZW50KGZvcm0pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBpZiBmb3JtIGlzIG5vdCBmb3JtXHJcbiAgICAgICAgaWYgKGZvcm0udGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcImZvcm1cIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZ2V0IGFsbCBpbnB1dHNcclxuICAgICAgICBjb25zdCBlbGVtZW50cyA9IERvbUdldC5ieVRhZyhcImlucHV0XCIpO1xyXG5cclxuICAgICAgICAvLyBhZGQgYWxsIHZhbHVlcyB0byByZXN1bHQgb2JqZWN0XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZWxlbWVudHMpIHtcclxuICAgICAgICAgICAgaWYgKCFlbGVtZW50cy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBlOiBFbGVtZW50ID0gZWxlbWVudHNba2V5XTtcclxuICAgICAgICAgICAgY29uc3QgbmFtZSAgICAgICA9IGUuZ2V0QXR0cmlidXRlKFwibmFtZVwiKTtcclxuICAgICAgICAgICAgaWYgKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IGUuZ2V0QXR0cmlidXRlKFwidmFsdWVcIikgYXMgc3RyaW5nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xyXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCB7IFN0cmluZ1V0aWxzIH0gZnJvbSBcIi4vZGVwcmVjYXRlZC9TdHJpbmdVdGlsc1wiO1xyXG5cclxuZnVuY3Rpb24gd2FsayhkaXI6IHN0cmluZywgZG9uZTogKGVycm9yOiBhbnksIGZpbGVzPzogc3RyaW5nW10pID0+IGFueSk6IHZvaWQge1xyXG4gICAgY29uc3QgcmVzdWx0czogc3RyaW5nW10gPSBbXTtcclxuICAgIGZzLnJlYWRkaXIoZGlyLCAoZXJyOiBOb2RlSlMuRXJybm9FeGNlcHRpb24gfCBudWxsLCBsaXN0OiBzdHJpbmdbXSkgPT4ge1xyXG4gICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRvbmUoZXJyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHBlbmRpbmc6IG51bWJlciA9IGxpc3QubGVuZ3RoO1xyXG4gICAgICAgIGlmICghcGVuZGluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gZG9uZShudWxsLCByZXN1bHRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGlzdC5mb3JFYWNoKChmaWxlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgZmlsZSA9IHBhdGgucmVzb2x2ZShkaXIsIGZpbGUpO1xyXG4gICAgICAgICAgICBmcy5zdGF0KGZpbGUsIChlcnIxOiBOb2RlSlMuRXJybm9FeGNlcHRpb24gfCBudWxsLCBzdGF0OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0ICYmIHN0YXQuaXNEaXJlY3RvcnkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhbGsoZmlsZSwgKGVycjI6IGFueSwgcmVzPzogc3RyaW5nW10pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goLi4ucmVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZy0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUobnVsbCwgcmVzdWx0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nLS07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwZW5kaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUobnVsbCwgcmVzdWx0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRmlsZVV0aWxzIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgc2NhbkRpclJlY3Vyc2l2ZShkaXI6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nW10+KChzdWNjZXNzLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgZnMuc3RhdChkaXIsIChlcnIwOiBOb2RlSlMuRXJybm9FeGNlcHRpb24gfCBudWxsLCBzdGF0czogZnMuU3RhdHMpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlcnIwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghc3RhdHMuaXNEaXJlY3RvcnkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZGlyICsgXCIgaXMgbm90IGRpcmVjdG9yeVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHdhbGsoZGlyLCAoZXJyLCBkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBsb2FkRmlsZUpTT04odXJsOiBzdHJpbmcsIGNhbGxiYWNrOiAoZXJyOiBOb2RlSlMuRXJybm9FeGNlcHRpb24gfCBudWxsLCBkYXRhOiBhbnkpID0+IGFueSk6IHZvaWQge1xyXG4gICAgICAgIEZpbGVVdGlscy5sb2FkRmlsZSh1cmwsIChlcnIsIGRhdGEpID0+IGNhbGxiYWNrKGVyciwgSlNPTi5wYXJzZShkYXRhKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgbG9hZEZpbGUodXJsOiBzdHJpbmcsIGNhbGxiYWNrOiAoZXJyOiBOb2RlSlMuRXJybm9FeGNlcHRpb24gfCBudWxsLCBkYXRhOiBzdHJpbmcpID0+IGFueSwgZW5jb2RpbmcgPSBcInV0ZjhcIik6IHZvaWQge1xyXG4gICAgICAgIGZzLnJlYWRGaWxlKHVybCwgZW5jb2RpbmcsIGNhbGxiYWNrKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHNhdmVKc29uRmlsZShkYXRhOiBhbnksIGZpbGVOYW1lOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgICAgIHJldHVybiBGaWxlVXRpbHMuc2F2ZUZpbGUoSlNPTi5zdHJpbmdpZnkoZGF0YSksIGZpbGVOYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHNhdmVGaWxlKGRhdGE6IHN0cmluZywgZmlsZU5hbWU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChzdWNjZXNzLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgZnMud3JpdGVGaWxlKGZpbGVOYW1lLCBkYXRhLCAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlcnIgPyByZWplY3QoZXJyKSA6IHN1Y2Nlc3MoXCJUaGUgZmlsZSB3YXMgc2F2ZWQhXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlbW92ZUZpbGUoZmlsZU5hbWU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChzdWNjZXNzLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgZnMudW5saW5rKGZpbGVOYW1lLCAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlcnIgPyByZWplY3QoZXJyKSA6IHN1Y2Nlc3MoXCJUaGUgZmlsZSB3YXMgcmVtb3ZlZCFcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgY2hlY2tFeHRlbnNpb24obmFtZTogc3RyaW5nLCBleHRlbnNpb246IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKG5hbWUuZW5kc1dpdGgoZXh0ZW5zaW9uKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmFtZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBTdHJpbmdVdGlscy5qb2luU2luZ2xlKG5hbWUsIFwiLlwiLCBleHRlbnNpb24pO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBjb25zdCBhcnJheSA9IFt7bmFtZTogXCJNaWNoYWVsXCIsIGFnZTogMjN9LCB7bmFtZTogXCJKb2FjaGltXCIsIGFnZTogMTV9LCB7bmFtZTogXCJFbnJpY29cIiwgYWdlOiAxNX0sIHtuYW1lOiBcIk1vbmljYVwiLCBhZ2U6IDU5fV1cclxuICogY29uc3QgY29uZGl0aW9ucyA9IHthZ2U6IDIzLCBuYW1lOiBcIk1vbmljYVwifVxyXG4gKiB3aGVyZShhcnJheSwgY29uZGl0aW9ucyk7IC8vIFt7bmFtZTogXCJNaWNoYWVsXCIsIGFnZTogMjN9LCAge25hbWU6IFwiRW5yaWNvXCIsIGFnZTogMTV9LCB7bmFtZTogXCJNb25pY2FcIiwgYWdlOiA1OX1dXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gd2hlcmU8VCBleHRlbmRzIG9iamVjdD4oYXJyYXk6IFRbXSwgY29uZGl0aW9uOiBQYXJ0aWFsPFQ+KTogVFtdIHtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheSkpIHtcclxuICAgICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFjb25kaXRpb24gfHwgdHlwZW9mIGNvbmRpdGlvbiAhPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByZXN1bHQ6IFRbXSAgICAgID0gW107XHJcbiAgICBjb25zdCBjb25kaXRpb25FbnRyaWVzID0gT2JqZWN0LmVudHJpZXMoY29uZGl0aW9uKTtcclxuXHJcbiAgICBhcnJheS5mb3JFYWNoKChlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYWRkID0gY29uZGl0aW9uRW50cmllcy5zb21lKChjb25kaXRpb25FbnRyeSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gZVtjb25kaXRpb25FbnRyeVswXSBhcyBrZXlvZiBUXSA9PT0gY29uZGl0aW9uRW50cnlbMV07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGFkZCkge1xyXG4gICAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSBlO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gc3ViIGFycmF5IGZyb20gYXJyYXlcclxuICpcclxuICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBBcnJheS5wcm90b3R5cGUuc2xpY2V9IGluc3RlYWRcclxuICogQHBhcmFtIGFycmF5IC0gaW5wdXQgYXJyYXlcclxuICogQHBhcmFtIG1pbkluZGV4IC0gc3RhcnQgaW5kZXhcclxuICogQHBhcmFtIG1heEluZGV4IC0gZW5kIGluZGV4XHJcbiAqIEByZXR1cm5zIGZpbmFsIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3ViQXJyYXk8VCA9IGFueT4oYXJyYXk6IFRbXSwgbWluSW5kZXggPSAwLCBtYXhJbmRleCA9IGFycmF5Lmxlbmd0aCAtIDEpOiBUW10ge1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xyXG4gICAgICAgIHJldHVybiBhcnJheTtcclxuICAgIH1cclxuICAgIGNvbnN0IHJlc3VsdDogVFtdID0gW107XHJcbiAgICBjb25zdCBmaW5hbCAgICAgICA9IGFycmF5Lmxlbmd0aCA8IG1heEluZGV4ID8gYXJyYXkubGVuZ3RoIC0gMSA6IG1heEluZGV4O1xyXG4gICAgZm9yIChsZXQgaSA9IG1pbkluZGV4OyBpIDw9IGZpbmFsOyBpKyspIHtcclxuICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSBhcnJheVtpXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG4vKipcclxuICogRnVuY3Rpb24gcmV0dXJuIG1heGltYWwgdmFsdWUgZnJvbSBudW1lcmljIGFycmF5XHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheSAtIGFycmF5IG9mIG51bWJlcnNcclxuICogQHJldHVybnMgbWF4aW1hbCBudW1iZXIgZnJvbSBhcnJheVxyXG4gKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIE1hdGgubWF4fSBpbnN0ZWFkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbWF4KGFycmF5OiBudW1iZXJbXSk6IG51bWJlciB7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XHJcbiAgICAgICAgcmV0dXJuIGFycmF5O1xyXG4gICAgfVxyXG4gICAgaWYgKGFycmF5Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhcnJheS5yZWR1Y2UoKGEsIGIpID0+IGEgPiBiID8gYSA6IGIpO1xyXG59XHJcblxyXG4vKipcclxuICogRnVuY3Rpb24gcmV0dXJuIG1pbmltYWwgdmFsdWUgZnJvbSBudW1lcmljIGFycmF5XHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheSAtIGFycmF5IG9mIG51bWJlcnNcclxuICogQHJldHVybnMgbWluaW1hbCBudW1iZXIgZnJvbSBhcnJheVxyXG4gKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIE1hdGgubWlufSBpbnN0ZWFkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbWluKGFycmF5OiBudW1iZXJbXSk6IG51bWJlciB7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XHJcbiAgICAgICAgcmV0dXJuIGFycmF5O1xyXG4gICAgfVxyXG4gICAgaWYgKGFycmF5Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhcnJheS5yZWR1Y2UoKGEsIGIpID0+IGEgPCBiID8gYSA6IGIpO1xyXG59XHJcblxyXG4vKipcclxuICogRnVuY3Rpb24gcmV0dXJuIHRvdGFsIHZhbHVlIG9mIGFsbCBlbGVtZW50cyBpbiBudW1lcmljIGFycmF5XHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheSAtIGFycmF5IG9mIG51bWJlcnNcclxuICogQHJldHVybnMgc3VtbWFyeSBvZiBhbGwgbnVtYmVycyBpbiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHN1bShhcnJheTogbnVtYmVyW10pOiBudW1iZXIge1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xyXG4gICAgICAgIHJldHVybiBhcnJheTtcclxuICAgIH1cclxuICAgIGlmIChhcnJheS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYXJyYXkucmVkdWNlKChhLCBiKSA9PiBhICsgYik7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGdW5jdGlvbiByZXR1cm5zIGF2ZXJhZ2Ugb2YgbnVtZXJpYyBhcnJheSBnaXZlbiBhcyBpbnB1dFxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgLSBhcnJheSBvZiBudW1iZXJzXHJcbiAqIEByZXR1cm5zIGF2ZXJhZ2Ugb2YgYWxsIG51bWJlcnMgaW4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhdmcoYXJyYXk6IG51bWJlcltdKTogbnVtYmVyIHtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheSkpIHtcclxuICAgICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICB9XHJcbiAgICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFycmF5LnJlZHVjZSgoYSwgYikgPT4gYSArIGIpIC8gYXJyYXkubGVuZ3RoO1xyXG59XHJcblxyXG4vKipcclxuICogRnVuY3Rpb24gam9pbiBhcnJheSBieSBkZWxpbWl0ZXIgYW5kIGFwcGVuZCBwcmVmaXggYW5kIHBvc3RmaXhcclxuICpcclxuICogQHBhcmFtIGFycmF5IC0gbm90IGVtcHR5IGFycmF5XHJcbiAqIEBwYXJhbSBkZWxpbWl0ZXIgLSBjaGFyYWN0ZXIgdXNlZCBmb3Igam9pbiBlbGVtZW50cyBpbiBhcnJheVxyXG4gKiBAcGFyYW0gcHJlZml4IC0gc3RyaW5nIGFwcGVuZCBhdCB0aGUgYmVnaW5uaW5nIG9mIGZpbmFsIHN0cmluZ1xyXG4gKiBAcGFyYW0gcG9zdGZpeCAtIHN0cmluZyBhcHBlbmQgYXQgdGhlIGVuZCBvZiBmaW5hbCBzdHJpbmdcclxuICogQHJldHVybnMgZmluYWwgc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gam9pbjxUPihhcnJheTogVFtdLCBkZWxpbWl0ZXI6IHN0cmluZywgcHJlZml4ID0gXCJcIiwgcG9zdGZpeCA9IFwiXCIpOiBzdHJpbmcge1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xyXG4gICAgICAgIHJldHVybiBwcmVmaXggKyBhcnJheSArIHBvc3RmaXg7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHByZWZpeCArIGFycmF5LmpvaW4oZGVsaW1pdGVyKSArIHBvc3RmaXg7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNZXRob2QgcmV0dXJucyBsYXN0IGVsZW1lbnQgZnJvbSBhcnJheSBvciBudWxsIGlmIGFycmF5IGlzIGVtcHR5LiBJZiBhcmd1bWVudCBpcyBub3QgYXJyYXksIG1ldGhvZCByZXR1cm5zIGFyZ3VtZW50XHJcbiAqIEBwYXJhbSBhcnJheSAtIG5vdCBlbXB0eSBhcnJheVxyXG4gKiBAcmV0dXJucyBsYXN0IHZhbHVlIGZyb20gYXJyYXlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRMYXN0PFQ+KGFycmF5OiBUW10pOiBUIHwgdW5kZWZpbmVkIHtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheSkpIHtcclxuICAgICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdO1xyXG59XHJcblxyXG4vKipcclxuICogTWV0aG9kIHJldHVybnMgcmFuZG9tIGVsZW1lbnQgZnJvbSBhcnJheVxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgLSBub3QgZW1wdHkgYXJyYXlcclxuICogQHJldHVybnMgcmFuZG9tIHZhbHVlIGZyb20gYXJyYXlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21JdGVtPFQgPSB1bmtub3duPihhcnJheTogVFtdKTogVCB8IG51bGwge1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xyXG4gICAgICAgIHJldHVybiBhcnJheTtcclxuICAgIH1cclxuICAgIGlmIChhcnJheS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYXJyYXlbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXJyYXkubGVuZ3RoKV07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXROUmFuZG9tPFQ+KGFyZ3M6IFRbXSwgY291bnQ6IG51bWJlcik6IFRbXSB7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJncykpIHtcclxuICAgICAgICByZXR1cm4gYXJncztcclxuICAgIH1cclxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCB8fCBjb3VudCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICAgIGlmIChhcmdzLmxlbmd0aCA8PSBjb3VudCkge1xyXG4gICAgICAgIHJldHVybiBhcmdzO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBTZXQ8VD4oKTtcclxuXHJcbiAgICB3aGlsZSAocmVzdWx0LnNpemUgPD0gY291bnQpIHtcclxuICAgICAgICBjb25zdCByYW5kb21JdGVtID0gZ2V0UmFuZG9tSXRlbTxUPihhcmdzKTtcclxuICAgICAgICBpZiAocmFuZG9tSXRlbSkge1xyXG4gICAgICAgICAgICByZXN1bHQuYWRkKHJhbmRvbUl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gQXJyYXkuZnJvbTxUPihyZXN1bHQpO1xyXG59XHJcblxyXG4vKipcclxuICogTWV0aG9kIHJldHVybiBjb3B5IG9mIGFycmF5IHdpdGggb25seSBkaXN0aW5jdCBlbGVtZW50c1xyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgLSBhcnJheSB3aXRoIGR1cGxpY2F0ZSBlbGVtZW50c1xyXG4gKiBAcmV0dXJucyB1bmlxdWUgYXJyYXlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtYWtlVW5pcXVlPFQ+KGFycmF5OiBUW10pOiBUW10ge1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xyXG4gICAgICAgIHJldHVybiBhcnJheTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0PFQ+KGFycmF5KSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb21iaW5lIDIgYXJyYXkgZWFjaCBvdGhlclxyXG4gKiBAcGFyYW0gYXJyXHJcbiAqIEBwYXJhbSBjYWxsYmFja1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVhY2hPdGhlcjxUPihhcnI6IFRbXSwgY2FsbGJhY2s6KGE6IFQsIGI6IFQpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIGFyci5mb3JFYWNoKChlLCBpKSA9PiB7XHJcbiAgICAgICAgZm9yKGxldCBqPWkrMTsgajxhcnIubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgY2FsbGJhY2soZSwgYXJyW2pdKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG4iLCJpbXBvcnQgeyBjbGFtcCB9IGZyb20gXCIuL21hdGgtdXRpbHNcIjtcclxuXHJcbmNvbnN0IGNvbG9yczogeyBbY29sb3I6IHN0cmluZ106IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSB9ID0ge1xyXG4gICAgYmxhY2s6IFswLCAwLCAwXSxcclxuICAgIHdoaXRlOiBbMjU1LCAyNTUsIDI1NV0sXHJcbiAgICByZWQgIDogWzI1NSwgMCwgMF0sXHJcbiAgICBncmVlbjogWzAsIDI1NSwgMF0sXHJcbiAgICBibHVlIDogWzAsIDAsIDI1NV0sXHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbGVycENvbG9yKFxyXG4gICAgZnJvbUNvbG9yOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSxcclxuICAgIHRvQ29sb3I6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdLFxyXG4gICAgcHJvZ3Jlc3M6IG51bWJlcixcclxuKTogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl0ge1xyXG4gICAgY29uc3QgcmVkICAgPSBwcm9ncmVzcyAqIGZyb21Db2xvclswXSArICgxIC0gcHJvZ3Jlc3MpICogdG9Db2xvclswXTtcclxuICAgIGNvbnN0IGdyZWVuID0gcHJvZ3Jlc3MgKiBmcm9tQ29sb3JbMV0gKyAoMSAtIHByb2dyZXNzKSAqIHRvQ29sb3JbMV07XHJcbiAgICBjb25zdCBibHVlICA9IHByb2dyZXNzICogZnJvbUNvbG9yWzJdICsgKDEgLSBwcm9ncmVzcykgKiB0b0NvbG9yWzJdO1xyXG4gICAgY29uc3QgYWxwaGEgPSBwcm9ncmVzcyAqIGZyb21Db2xvclszXSArICgxIC0gcHJvZ3Jlc3MpICogdG9Db2xvclszXTtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICAgY2xhbXAocmVkLCAwLCAyNTUpLFxyXG4gICAgICAgIGNsYW1wKGdyZWVuLCAwLCAyNTUpLFxyXG4gICAgICAgIGNsYW1wKGJsdWUsIDAsIDI1NSksXHJcbiAgICAgICAgY2xhbXAoYWxwaGEsIDAsIDI1NSksXHJcbiAgICBdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbGVycEhleGFDb2xvcihhOiBzdHJpbmcsIGI6IHN0cmluZywgYW1vdW50OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgYWggPSArYS5yZXBsYWNlKFwiI1wiLCBcIjB4XCIpO1xyXG4gICAgY29uc3QgYXIgPSBhaCA+PiAxNjtcclxuICAgIGNvbnN0IGFnID0gYWggPj4gOCAmIDB4RkY7XHJcbiAgICBjb25zdCBhYiA9IGFoICYgMHhGRjtcclxuICAgIGNvbnN0IGJoID0gK2IucmVwbGFjZShcIiNcIiwgXCIweFwiKTtcclxuICAgIGNvbnN0IGJyID0gYmggPj4gMTY7XHJcbiAgICBjb25zdCBiZyA9IGJoID4+IDggJiAweEZGO1xyXG4gICAgY29uc3QgYmIgPSBiaCAmIDB4RkY7XHJcbiAgICBjb25zdCByciA9IGFyICsgYW1vdW50ICogKGJyIC0gYXIpO1xyXG4gICAgY29uc3QgcmcgPSBhZyArIGFtb3VudCAqIChiZyAtIGFnKTtcclxuICAgIGNvbnN0IHJiID0gYWIgKyBhbW91bnQgKiAoYmIgLSBhYik7XHJcblxyXG4gICAgcmV0dXJuIFwiI1wiICsgKCgxIDw8IDI0KSArIChyciA8PCAxNikgKyAocmcgPDwgOCkgKyByYiB8IDApLnRvU3RyaW5nKDE2KS5zbGljZSgxKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGhleDJyZ2IoY29sb3I6IHN0cmluZyk6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSB7XHJcbiAgICBjb25zdCBudW0gPSBwYXJzZUludChjb2xvci5zbGljZSgxKSwgMTYpO1xyXG5cclxuICAgIHJldHVybiBbbnVtID4+IDE2LCBudW0gPj4gOCAmIDB4MDBGRiwgbnVtICYgMHgwMDAwRkZdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2hhZGVDb2xvcihjb2xvcjogc3RyaW5nLCBwZXJjZW50OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgbnVtID0gaGV4MnJnYihjb2xvcik7XHJcbiAgICBjb25zdCBhbXQgPSBNYXRoLnJvdW5kKDIuNTUgKiBwZXJjZW50KTtcclxuICAgIGNvbnN0IFIgICA9IG51bVswXSArIGFtdDtcclxuICAgIGNvbnN0IEcgICA9IG51bVsxXSArIGFtdDtcclxuICAgIGNvbnN0IEIgICA9IG51bVsyXSArIGFtdDtcclxuXHJcbiAgICByZXR1cm4gcmdiMmhleChSLCBHLCBCKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJnYjJoZXgoUjogbnVtYmVyLCBHOiBudW1iZXIsIEI6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gXCIjXCIgKyAoMHgxMDAwMDAwICsgKFIgPCAyNTUgPyBSIDwgMSA/IDAgOiBSIDogMjU1KSAqIDB4MTAwMDAgK1xyXG4gICAgICAgIChHIDwgMjU1ID8gRyA8IDEgPyAwIDogRyA6IDI1NSkgKiAweDEwMCArXHJcbiAgICAgICAgKEIgPCAyNTUgPyBCIDwgMSA/IDAgOiBCIDogMjU1KSkudG9TdHJpbmcoMTYpLnNsaWNlKDEpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW50MmhleCh2YWw6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICBjb25zdCB2YWx1ZSAgPSB2YWwudG9TdHJpbmcoMTYpO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gXCIwMDAwMDBcIi5zdWJzdHIoMCwgNiAtIHZhbHVlLmxlbmd0aCkgKyB2YWx1ZTtcclxuXHJcbiAgICByZXR1cm4gXCIjXCIgKyByZXN1bHQudG9VcHBlckNhc2UoKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGludDJyZ2IodmFsOiBudW1iZXIpOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0ge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICB2YWwgPj4gMTYsXHJcbiAgICAgICAgKHZhbCA+PiA4KSAmIDB4RkYsXHJcbiAgICAgICAgdmFsICYgMHhGRlxyXG4gICAgXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGhleDJpbnQodmFsOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbCwgMTYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmdiMmludChSOiBudW1iZXIsIEc6IG51bWJlciwgQjogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBSIDw8IDE2IHwgKEcgPDwgOCkgJiAweEZGRkYgfCBCO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDb2xvcihjb2xvcjogc3RyaW5nKTogW251bWJlciwgbnVtYmVyLCBudW1iZXJdIHtcclxuICAgIGlmIChjb2xvcnNbY29sb3JdKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbG9yc1tjb2xvcl07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGV4YU1hdGNoID0gY29sb3IubWF0Y2goL14jKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pJC8pO1xyXG4gICAgaWYgKGhleGFNYXRjaCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHBhcnNlSW50KGhleGFNYXRjaFsxXSwgMTYpLFxyXG4gICAgICAgICAgICBwYXJzZUludChoZXhhTWF0Y2hbMl0sIDE2KSxcclxuICAgICAgICAgICAgcGFyc2VJbnQoaGV4YU1hdGNoWzNdLCAxNiksXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByZ2JhTWF0aCA9IGNvbG9yLm1hdGNoKC9yZ2JhP1xcKChcXGR7MSwzfSkgKiwgKihcXGR7MSwzfSkgKiwgKihcXGR7MSwzfSkoICosICpcXGQqLj9cXGQqKVxcKS8pO1xyXG4gICAgaWYgKHJnYmFNYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgcGFyc2VJbnQocmdiYU1hdGhbMV0sIDEwKSxcclxuICAgICAgICAgICAgcGFyc2VJbnQocmdiYU1hdGhbMl0sIDEwKSxcclxuICAgICAgICAgICAgcGFyc2VJbnQocmdiYU1hdGhbM10sIDEwKSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG5cclxuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBwYXJzZSBjb2xvcjogXCIgKyBjb2xvcik7XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgQXJyYXlzIGZyb20gXCIuLi9hcnJheS11dGlsc1wiO1xyXG5cclxuLyoqXHJcbiAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgQXJyYXlzfSBpbnN0ZWFkXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQXJyYXlVdGlscyB7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY29uc3QgYXJyYXkgPSBbe25hbWU6IFwiTWljaGFlbFwiLCBhZ2U6IDIzfSwge25hbWU6IFwiSm9hY2hpbVwiLCBhZ2U6IDE1fSwge25hbWU6IFwiRW5yaWNvXCIsIGFnZTogMTV9LCB7bmFtZTogXCJNb25pY2FcIiwgYWdlOiA1OX1dXHJcbiAgICAgKiBjb25zdCBjb25kaXRpb25zID0ge2FnZTogMjMsIG5hbWU6IFwiTW9uaWNhXCJ9XHJcbiAgICAgKiB3aGVyZShhcnJheSwgY29uZGl0aW9ucyk7IC8vIFt7bmFtZTogXCJNaWNoYWVsXCIsIGFnZTogMjN9LCAge25hbWU6IFwiRW5yaWNvXCIsIGFnZTogMTV9LCB7bmFtZTogXCJNb25pY2FcIiwgYWdlOiA1OX1dXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgd2hlcmU8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogYW55IH0+KGFycmF5OiBUW10sIGNvbmRpdGlvbjogYW55KTogVFtdIHtcclxuICAgICAgICByZXR1cm4gQXJyYXlzLndoZXJlKGFycmF5LCBjb25kaXRpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIHN1YiBhcnJheSBmcm9tIGFycmF5XHJcbiAgICAgKlxyXG4gICAgICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBBcnJheS5wcm90b3R5cGUuc2xpY2V9IGluc3RlYWRcclxuICAgICAqIEBwYXJhbSBhcnJheSAtIGlucHV0IGFycmF5XHJcbiAgICAgKiBAcGFyYW0gbWluSW5kZXggLSBzdGFydCBpbmRleFxyXG4gICAgICogQHBhcmFtIG1heEluZGV4IC0gZW5kIGluZGV4XHJcbiAgICAgKiBAcmV0dXJucyBmaW5hbCBhcnJheVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHN1YkFycmF5PFQgPSBhbnk+KGFycmF5OiBUW10sIG1pbkluZGV4ID0gMCwgbWF4SW5kZXggPSBhcnJheS5sZW5ndGggLSAxKTogVFtdIHtcclxuICAgICAgICByZXR1cm4gQXJyYXlzLnN1YkFycmF5KGFycmF5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIHJldHVybiBtYXhpbWFsIHZhbHVlIGZyb20gbnVtZXJpYyBhcnJheVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBhcnJheSAtIGFycmF5IG9mIG51bWJlcnNcclxuICAgICAqIEByZXR1cm5zIG1heGltYWwgbnVtYmVyIGZyb20gYXJyYXlcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBtYXgoYXJyYXk6IG51bWJlcltdKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gQXJyYXlzLm1heChhcnJheSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiByZXR1cm4gbWluaW1hbCB2YWx1ZSBmcm9tIG51bWVyaWMgYXJyYXlcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBhcnJheSBvZiBudW1iZXJzXHJcbiAgICAgKiBAcmV0dXJucyBtaW5pbWFsIG51bWJlciBmcm9tIGFycmF5XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgbWluKGFycmF5OiBudW1iZXJbXSk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5cy5taW4oYXJyYXkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRnVuY3Rpb24gcmV0dXJuIHRvdGFsIHZhbHVlIG9mIGFsbCBlbGVtZW50cyBpbiBudW1lcmljIGFycmF5XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGFycmF5IC0gYXJyYXkgb2YgbnVtYmVyc1xyXG4gICAgICogQHJldHVybnMgc3VtbWFyeSBvZiBhbGwgbnVtYmVycyBpbiBhcnJheVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHN1bShhcnJheTogbnVtYmVyW10pOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBBcnJheXMuc3VtKGFycmF5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIHJldHVybnMgYXZlcmFnZSBvZiBudW1lcmljIGFycmF5IGdpdmVuIGFzIGlucHV0XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGFycmF5IC0gYXJyYXkgb2YgbnVtYmVyc1xyXG4gICAgICogQHJldHVybnMgYXZlcmFnZSBvZiBhbGwgbnVtYmVycyBpbiBhcnJheVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGF2ZyhhcnJheTogbnVtYmVyW10pOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBBcnJheXMuYXZnKGFycmF5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIGpvaW4gYXJyYXkgYnkgZGVsaW1pdGVyIGFuZCBhcHBlbmQgcHJlZml4IGFuZCBwb3N0Zml4XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGFycmF5IC0gbm90IGVtcHR5IGFycmF5XHJcbiAgICAgKiBAcGFyYW0gZGVsaW1pdGVyIC0gY2hhcmFjdGVyIHVzZWQgZm9yIGpvaW4gZWxlbWVudHMgaW4gYXJyYXlcclxuICAgICAqIEBwYXJhbSBwcmVmaXggLSBzdHJpbmcgYXBwZW5kIGF0IHRoZSBiZWdpbm5pbmcgb2YgZmluYWwgc3RyaW5nXHJcbiAgICAgKiBAcGFyYW0gcG9zdGZpeCAtIHN0cmluZyBhcHBlbmQgYXQgdGhlIGVuZCBvZiBmaW5hbCBzdHJpbmdcclxuICAgICAqIEByZXR1cm5zIGZpbmFsIHN0cmluZ1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGpvaW48VD4oYXJyYXk6IFRbXSwgZGVsaW1pdGVyOiBzdHJpbmcsIHByZWZpeCA9IFwiXCIsIHBvc3RmaXggPSBcIlwiKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gQXJyYXlzLmpvaW4oYXJyYXksIGRlbGltaXRlciwgcHJlZml4LCBwb3N0Zml4KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ldGhvZCByZXR1cm5zIGxhc3QgZWxlbWVudCBmcm9tIGFycmF5IG9yIG51bGwgaWYgYXJyYXkgaXMgZW1wdHkuIElmIGFyZ3VtZW50IGlzIG5vdCBhcnJheSwgbWV0aG9kIHJldHVybnMgYXJndW1lbnRcclxuICAgICAqIEBwYXJhbSBhcnJheSAtIG5vdCBlbXB0eSBhcnJheVxyXG4gICAgICogQHJldHVybnMgbGFzdCB2YWx1ZSBmcm9tIGFycmF5XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0TGFzdDxUID0gYW55PihhcnJheTogVFtdKTogVCB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5cy5nZXRMYXN0KGFycmF5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ldGhvZCByZXR1cm5zIHJhbmRvbSBlbGVtZW50IGZyb20gYXJyYXlcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBub3QgZW1wdHkgYXJyYXlcclxuICAgICAqIEByZXR1cm5zIHJhbmRvbSB2YWx1ZSBmcm9tIGFycmF5XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0UmFuZG9tPFQgPSBhbnk+KGFycmF5OiBUW10pOiBUIHwgbnVsbCB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5cy5nZXRSYW5kb21JdGVtKGFycmF5KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldE5SYW5kb208VCA9IGFueT4oYXJyYXk6IFRbXSwgY291bnQ6IG51bWJlcik6IFRbXSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5cy5nZXROUmFuZG9tKGFycmF5LCBjb3VudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNZXRob2QgcmV0dXJuIGNvcHkgb2YgYXJyYXkgd2l0aCBvbmx5IGRpc3RpbmN0IGVsZW1lbnRzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGFycmF5IC0gYXJyYXkgd2l0aCBkdXBsaWNhdGUgZWxlbWVudHNcclxuICAgICAqIEByZXR1cm5zIHVuaXF1ZSBhcnJheVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIG1ha2VVbmlxdWU8VCA9IGFueT4oYXJyYXk6IFRbXSk6IFRbXSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5cy5tYWtlVW5pcXVlKGFycmF5KTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBNYXRocyBmcm9tIFwiLi4vbWF0aC11dGlsc1wiO1xyXG5cclxuLyoqXHJcbiAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgTWF0aHN9IGluc3RlYWRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNYXRoVXRpbHMge1xyXG4gICAgcHVibGljIHN0YXRpYyByb3VuZFRvRGVjaW1hbHMobnVtOiBudW1iZXIsIGRlY2ltYWxzID0gMiwgdHlwZTogXCJmbG9vclwiIHwgXCJjZWlsXCIgfCBcInJvdW5kXCIgPSBcInJvdW5kXCIpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBNYXRocy5yb3VuZFRvRGVjaW1hbHMobnVtLCBkZWNpbWFscywgdHlwZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBwYWQobnVtOiBudW1iZXIsIHNpemU6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGhzLnBhZChudW0sIHNpemUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgY2xhbXAodmFsdWU6IG51bWJlciwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gTWF0aHMuY2xhbXAodmFsdWUsIG1pbiwgbWF4KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGJpbm9taWFsQ29lZmZpY2llbnQobjogbnVtYmVyLCBrOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBNYXRocy5iaW5vbWlhbENvZWZmaWNpZW50KG4sIGspO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgbGVycChhOiBudW1iZXIsIGI6IG51bWJlciwgdmFsOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBNYXRocy5sZXJwKGEsIGIsIHZhbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBsb2cyaSh2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gTWF0aHMubG9nMmkodmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgbGFtcChtaW46IG51bWJlciwgbWF4OiBudW1iZXIsIHNjYWxlOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBNYXRocy5jbGFtcChzY2FsZSwgbWluLCBtYXgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgcmFuZG9tSW50KG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGhzLnJhbmRvbUludChtaW4sIG1heCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyByYW5kb20obWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gTWF0aHMucmFuZG9tKG1pbiwgbWF4KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGF2ZXJhZ2UoYXJnczogbnVtYmVyW10pOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBNYXRocy5hdmVyYWdlKGFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZGlmZihudW0xOiBudW1iZXIsIG51bTI6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGhzLmdldERpZmYobnVtMSwgbnVtMik7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIEB0eXBlZGVmICB7KE9iamVjdCl9IGFueVxyXG4gKi9cclxuaW1wb3J0IHsgU3RyaW5nTWFwIH0gZnJvbSBcIi4uLy4uL3R5cGVzL3N0cmluZy1tYXAuaW50ZXJmYWNlXCI7XHJcbmltcG9ydCAqIGFzIE1pc2MgZnJvbSBcIi4uL21pc2MtdXRpbHNcIjtcclxuaW1wb3J0ICogYXMgTmV0Q2xpZW50IGZyb20gXCIuLi9uZXQtY2xpZW50LXV0aWxzXCI7XHJcbmltcG9ydCAqIGFzIE9iamVjdHMgZnJvbSBcIi4uL29iamVjdC11dGlsc1wiO1xyXG5pbXBvcnQgKiBhcyBSZWZsZWN0aW9uIGZyb20gXCIuLi9yZWZsZWN0aW9uLXV0aWxzXCI7XHJcblxyXG4vKipcclxuICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBNaXNjfSBpbnN0ZWFkXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWlzY1V0aWxzIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGNsYXNzIGJ5IG5hbWUgYW5kIGxpc3Qgb2YgcGFyYW1ldGVyc1xyXG4gICAgICpcclxuICAgICAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgY3JlYXRlQ2xhc3N9IGluc3RlYWRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbmFtZSAtIGNsYXNzIG5hbWVcclxuICAgICAqIEBwYXJhbSBhcmdzIC0gY29uc3RydWN0b3IgcGFyYW1ldGVyXHJcbiAgICAgKiBAcmV0dXJucyBjcmVhdGVkIG9iamVjdFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUNsYXNzKG5hbWU6IGFueSwgYXJnczogYW55W10pOiBhbnkge1xyXG4gICAgICAgIHJldHVybiBSZWZsZWN0aW9uLmNyZWF0ZUNsYXNzKG5hbWUsIGFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWV0aG9kIHBhcnNlIGNvb2tpZXNcclxuICAgICAqIEBwYXJhbSBjb29raWVzIC0gY29va2UgdG8gcGFyc2VcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBwYXJzZUNvb2tpZXMoY29va2llczogc3RyaW5nKTogU3RyaW5nTWFwIHtcclxuICAgICAgICByZXR1cm4gTWlzYy5wYXJzZUNvb2tpZXMoY29va2llcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNZXRob2QgY2hlY2sgaWYgb2JqZWN0IGlzIGluIGFycmF5XHJcbiAgICAgKiBAcGFyYW0gb2JqIC0gc2VhcmNoZWQgb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0gZGF0YSAtIGFycmF5IG9mIG9iamVjdHMgdG8gYmUgY29tcGFyZSB3aXRoIHNlYXJjaGVkIG9iamVjdFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGlzSW4ob2JqOiBhbnksIC4uLmRhdGE6IGFueVtdKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIE1pc2MuaXNJbihvYmosIGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWV0aG9kIHBhcnNlIEpTT04gY29udGVudCB3aXRoIGNvbW1lbnRzXHJcbiAgICAgKiBAcGFyYW0gY29udGVudCAtIHN0cmluZ2lmeSBKU09OXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcGFyc2VKU09OV2l0aENvbW1lbnRzKGNvbnRlbnQ6IHN0cmluZyk6IGFueSB7XHJcbiAgICAgICAgcmV0dXJuIE1pc2MucGFyc2VKU09OV2l0aENvbW1lbnRzKGNvbnRlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRPRE86IHNob3VsZCBhcHBlbmQgY29va2llcyBvciBhZGQgb3B0aW9uIHRvIGFwcGVuZGluZyBpbnN0ZWFkIG9mIHJlcGxhY2UgY29va2llc1xyXG4gICAgLy8gVE9ETzogZXhwaXJlcyBtdXN0IGJlIG9ubHkgaW4gdGhlIGVuZCBvZiBjb29raWVzXHJcbiAgICBwdWJsaWMgc3RhdGljIHNldENvb2tpZShuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuLCBkYXlzOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBNaXNjLnNldENvb2tpZShuYW1lLCB2YWx1ZSwgZGF5cyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXRDb29raWUoY25hbWU6IHN0cmluZywgc291cmNlID0gdHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiID8gZG9jdW1lbnQuY29va2llIDogXCJcIik6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIE1pc2MuZ2V0Q29va2llKGNuYW1lLCBzb3VyY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgcGFyc2VQYXJhbXMocXVlcnkgICAgID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpIDogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VwYXJhdG9yID0gXCImXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGltaXRlciA9IFwiPVwiKTogYW55IHtcclxuICAgICAgICByZXR1cm4gTWlzYy5wYXJzZVBhcmFtcyhxdWVyeSwgc2VwYXJhdG9yLCBkZWxpbWl0ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayByb3VnaFNpemVPZk9iamVjdH0gaW5zdGVhZFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBvYmplY3QgLSBvYmplY3QgdG8gZGV0ZXJtaW5lIHNpemVcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyByb3VnaFNpemVPZk9iamVjdChvYmplY3Q6IGFueSk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdHMucm91Z2hTaXplT2ZPYmplY3Qob2JqZWN0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIG9iamVjdFRvUXVlcnlQYXJhbXMob2JqOiBTdHJpbmdNYXApOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBNaXNjLm9iamVjdFRvUXVlcnlQYXJhbXMob2JqKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgaW5jbHVkZUZpbGV9IGluc3RlYWRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZmlsZSAtIHBhdGggdG8gZmlsZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGluY2x1ZGVGaWxlKGZpbGU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHJldHVybiBOZXRDbGllbnQuaW5jbHVkZUZpbGUoZmlsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBzZXJpYWxpemUob2JqOiBhbnkpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBNaXNjLnNlcmlhbGl6ZShvYmopO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgcGFyc2Uob2JqOiBzdHJpbmcpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiBNaXNjLnBhcnNlKG9iaik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG1hcDxTID0gYW55LCBUID0gUz4oc291cmNlOiBTLCBkYXRhOiB7IGF0dHJTOiBrZXlvZiBTLCBhdHRyRD86IGtleW9mIFQsIG1hcEZ1bmN0aW9uOiAoc3JjOiBhbnkpID0+IGFueSB9W10pOiBUIHtcclxuICAgICAgICByZXR1cm4gTWlzYy5tYXAoc291cmNlLCBkYXRhKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBPYmplY3RzIGZyb20gXCIuLi9vYmplY3QtdXRpbHNcIjtcclxuXHJcbi8qKlxyXG4gKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIE9iamVjdHN9IGluc3RlYWRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBPYmplY3RVdGlscyB7XHJcbiAgICBwdWJsaWMgc3RhdGljIHdpdGhvdXQob2JqOiBhbnksIGl0ZW1zOiBzdHJpbmdbXSk6IGFueSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdHMud2l0aG91dChvYmosIGl0ZW1zKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldE5lc3RlZFByb3BlcnR5KG9iamVjdDogYW55LCBwcm9wZXJ0eVBhdGg6IHN0cmluZywgc2VwYXJhdG9yID0gXCIuXCIpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3RzLmdldE5lc3RlZFByb3BlcnR5KG9iamVjdCwgcHJvcGVydHlQYXRoLCBzZXBhcmF0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgc2l6ZShvYmplY3Q6IGFueSk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdHMuc2l6ZShvYmplY3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaXNQbGFpbihvYmplY3Q6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBPYmplY3RzLmlzUGxhaW4ob2JqZWN0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIG1ha2VGbGF0KGxpc3Q6IGFueVtdLCBwcm9wZXJ0eVBhdGg6IHN0cmluZywgc2VwYXJhdG9yID0gXCIuXCIpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3RzLm1ha2VGbGF0KGxpc3QsIHByb3BlcnR5UGF0aCwgc2VwYXJhdG9yKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBDaGVja2VycyBmcm9tIFwiLi4vc3RyaW5nLWNoZWNrZXJzXCI7XHJcblxyXG4vKipcclxuICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBDaGVja2Vyc30gaW5zdGVhZFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFN0cmluZ0NoZWNrZXJzIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgaXNDYW1lbENhc2UgPSBDaGVja2Vycy5pc0NhbWVsQ2FzZTtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGlzVXBwZXJDYW1lbENhc2UgPSBDaGVja2Vycy5pc1VwcGVyQ2FtZWxDYXNlO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaXNMb3dlckNhbWVsQ2FzZSA9IENoZWNrZXJzLmlzTG93ZXJDYW1lbENhc2U7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBpc0xvd2VyU25ha2VDYXNlID0gQ2hlY2tlcnMuaXNMb3dlclNuYWtlQ2FzZTtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGlzVXBwZXJTbmFrZUNhc2UgPSBDaGVja2Vycy5pc1VwcGVyU25ha2VDYXNlO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaXNTbmFrZUNhc2UgPSBDaGVja2Vycy5pc1NuYWtlQ2FzZTtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGlzVGltZUZvcm1hdCA9IENoZWNrZXJzLmlzVGltZUZvcm1hdDtcclxufVxyXG4iLCJpbXBvcnQgeyBTdHJpbmdNYXAgfSBmcm9tIFwiLi4vLi4vdHlwZXMvc3RyaW5nLW1hcC5pbnRlcmZhY2VcIjtcclxuaW1wb3J0IHsgaXNFbXB0eSB9IGZyb20gXCIuLi8uLi92YWxpZGF0b3JzXCI7XHJcbmltcG9ydCAqIGFzIENoZWNrZXJzIGZyb20gXCIuLi9zdHJpbmctY2hlY2tlcnNcIjtcclxuaW1wb3J0ICogYXMgU3RyaW5ncyBmcm9tIFwiLi4vc3RyaW5nLXV0aWxzXCI7XHJcblxyXG4vKipcclxuICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBTdHJpbmdzfSBpbnN0ZWFkXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3RyaW5nVXRpbHMge1xyXG4gICAgcHVibGljIHN0YXRpYyByZW1vdmVBY2NlbnRlZENoYXJhY3RlcnMod29yZDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gU3RyaW5ncy5yZW1vdmVBY2NlbnRlZENoYXJhY3RlcnMod29yZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBqb2luKGRhdGE6IHN0cmluZ1tdLCBkZWxpbWl0ZXIgPSBcIiBcIiwgcHJlZml4ID0gXCJcIiwgcG9zdGZpeCA9IFwiXCIpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBTdHJpbmdzLmpvaW5TdHJpbmcoZGF0YSwgZGVsaW1pdGVyLCBwcmVmaXgsIHBvc3RmaXgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgdG9VcHBlclNuYWtlQ2FzZSh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBTdHJpbmdzLnRvVXBwZXJTbmFrZUNhc2UodGV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyB0b0xvd2VyU25ha2VDYXNlKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFN0cmluZ3MudG9Mb3dlclNuYWtlQ2FzZSh0ZXh0KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyB0b0xvd2VyQ2FtZWxDYXNlKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFN0cmluZ3MudG9Mb3dlckNhbWVsQ2FzZSh0ZXh0KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyB0b1VwcGVyQ2FtZWxDYXNlKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFN0cmluZ3MudG9VcHBlckNhbWVsQ2FzZSh0ZXh0KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyB0b0NhcGl0YWwodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gU3RyaW5ncy50b0NhcGl0YWwodGV4dCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0TGFzdFBhcnQodGV4dDogc3RyaW5nLCBkaXZpZGVyID0gXCIgXCIpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBTdHJpbmdzLmdldExhc3RQYXJ0KHRleHQsIGRpdmlkZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgY291bnQodGV4dDogc3RyaW5nLCBrZXk6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIFN0cmluZ3MuY291bnQodGV4dCwga2V5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB0ZXh0IC0gdGV4dCBuZWVkIHRvIGJlIHJlcGVhdFxyXG4gICAgICogQHBhcmFtIGNvdW50IC0gbnVtYmVyIG9mIGl0ZXJhdGlvbnNcclxuICAgICAqIEBkZXByZWNhdGVkIC0gdXNlIHtAbGluayBTdHJpbmcjcmVwZWF0fVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlcGVhdCh0ZXh0OiBzdHJpbmcsIGNvdW50OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0ZXh0LnJlcGVhdChjb3VudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyByZW1vdmVBbGwodGV4dDogc3RyaW5nLCB3b3Jkczogc3RyaW5nW10pOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBTdHJpbmdzLnJlbW92ZUFsbCh0ZXh0LCB3b3Jkcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVE9ETzogbmVlZCB0byBiZSBmaXhlZFxyXG4gICAgcHVibGljIHN0YXRpYyB0ZW1wbGF0ZSh0ZXh0OiBzdHJpbmcsIHZhbHVlczogU3RyaW5nTWFwLCBzdGFydCA9IFwie3tcIiwgZW5kID0gXCJ9fVwiKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gU3RyaW5ncy50ZW1wbGF0ZSh0ZXh0LCB2YWx1ZXMsIHN0YXJ0LCBlbmQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVtb3ZlRW1wdHlMaW5lcyhjb250ZW50OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBTdHJpbmdzLnJlbW92ZUVtcHR5TGluZXMoY29udGVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBiZXR3ZWVuKHRleHQ6IHN0cmluZywga2V5MTogc3RyaW5nLCBrZXkyOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBTdHJpbmdzLmJldHdlZW4odGV4dCwga2V5MSwga2V5Mik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBvY2N1cnJlbmNlcyh0ZXh0OiBzdHJpbmcsIGtleTogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gU3RyaW5ncy5vY2N1cnJlbmNlcyh0ZXh0LCBrZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgY29sbGFwc2VXaGl0ZXNwYWNlKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFN0cmluZ3MuY29sbGFwc2VXaGl0ZXNwYWNlKHRleHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgY2FwaXRhbGl6ZSh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBTdHJpbmdzLnRvQ2FwaXRhbCh0ZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGlzRW1wdHkodGV4dDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGlzRW1wdHkodGV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBzd2FwQ2FzZSh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBTdHJpbmdzLnN3YXBDYXNlKHRleHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgdHJhbnNmb3JtVG9CYXNpY0Zvcm1hdCh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBTdHJpbmdzLnRyYW5zZm9ybVRvQmFzaWNGb3JtYXQodGV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBpc1ZhbGlkRW1haWwoZW1haWw6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBDaGVja2Vycy5pc1ZhbGlkRW1haWwoZW1haWwpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBpc1ZhbGlkUGhvbmVOdW1iZXJ9IGluc3RlYWRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbnVtIC0gc3RyaW5nIHRvIHZhbGlkYXRlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgaXNWYWxpZFBob25lTnVtYmVyKG51bTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIENoZWNrZXJzLmlzVmFsaWRQaG9uZU51bWJlcihudW0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0QXNjaWlBcnJheSh0ZXh0OiBzdHJpbmcpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgcmV0dXJuIFN0cmluZ3MuZ2V0QXNjaWlBcnJheSh0ZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHRvQmFzaWNGb3JtKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFN0cmluZ3MudG9CYXNpY0Zvcm0odGV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBjb250YWlucyh0ZXh0OiBzdHJpbmcsIHN1YnN0cmluZzogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIFN0cmluZ3MuY29udGFpbnModGV4dCwgc3Vic3RyaW5nKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGpvaW5TaW5nbGUocHJlZml4OiBzdHJpbmcsIGRpdmlkZXI6IHN0cmluZywgcG9zdGZpeDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gU3RyaW5ncy5qb2luU2luZ2xlKHByZWZpeCwgZGl2aWRlciwgcG9zdGZpeCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXRGb3JtYXR0ZWROdW1iZXIobnVtOiBzdHJpbmcsIHByZWZpeCA9IFwiKzQyMVwiKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gU3RyaW5ncy5nZXRGb3JtYXR0ZWROdW1iZXIobnVtLCBwcmVmaXgpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEFMTE9XX0lNQUdFU19PTkxZX1dJVEhfQUxMT1dFRF9DT1JTIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBFbGVtZW50QXR0cmlidXRlcyB7XHJcbiAgICBjbGFzc05hbWU/OiBzdHJpbmc7XHJcbiAgICBjaGlsZHJlbj86IChOb2RlIHwgc3RyaW5nKVtdIHwgTm9kZSB8IHN0cmluZztcclxuICAgIHR5cGU/OiBzdHJpbmc7XHJcbiAgICBvbkNoYW5nZT86ICh2YWx1ZTogYW55KSA9PiB2b2lkO1xyXG4gICAgb25DbGljaz86ICh2YWx1ZTogYW55KSA9PiB2b2lkO1xyXG4gICAgc3R5bGVzPzogeyBbc3R5bGUgaW4ga2V5b2YgQ1NTU3R5bGVEZWNsYXJhdGlvbl0/OiBDU1NTdHlsZURlY2xhcmF0aW9uW3N0eWxlXSB9O1xyXG4gICAgY29udGVudD86IHN0cmluZztcclxuICAgIHNyYz86IHN0cmluZztcclxuICAgIGZvcj86IHN0cmluZztcclxuICAgIGlkPzogc3RyaW5nO1xyXG4gICAgYXV0b3BsYXk/OiBib29sZWFuO1xyXG4gICAgaHJlZj86IHN0cmluZztcclxuICAgIGRvd25sb2FkPzogc3RyaW5nO1xyXG4gICAgY2hlY2tlZD86IGJvb2xlYW47XHJcbiAgICB3aWR0aD86IG51bWJlcjtcclxuICAgIGhlaWdodD86IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVsZW1lbnRUb1N0cmluZyhlbGVtZW50OiBIVE1MRWxlbWVudCwgc2hvd1BhcmVudCA9IHRydWUpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgY2xhc3NlcyA9IEFycmF5LmZyb20oZWxlbWVudC5jbGFzc0xpc3QpLmpvaW4oXCIuXCIpO1xyXG4gICAgY29uc3QgaWQgICAgICA9IGVsZW1lbnQuaWQgPyBcIiNcIiArIGVsZW1lbnQuaWQgOiBcIlwiO1xyXG4gICAgY29uc3QgcGFyZW50ICA9IGVsZW1lbnQucGFyZW50RWxlbWVudCA/IGVsZW1lbnRUb1N0cmluZyhlbGVtZW50LnBhcmVudEVsZW1lbnQsIGZhbHNlKSArIFwiID4gXCIgOiBcIlwiO1xyXG5cclxuICAgIHJldHVybiBwYXJlbnQgKyBlbGVtZW50LmxvY2FsTmFtZSArIGlkICsgKGNsYXNzZXMgPyBcIi5cIiArIGNsYXNzZXMgOiBcIlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYWdFbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBoZWFkZXJTZWxlY3RvciA9IFwiLmhlYWRlclwiKTogeyBjbGVhcjogKCkgPT4gdm9pZCB9IHtcclxuICAgIGxldCBwb3MxID0gMDtcclxuICAgIGxldCBwb3MyID0gMDtcclxuICAgIGxldCBwb3MzID0gMDtcclxuICAgIGxldCBwb3M0ID0gMDtcclxuXHJcbiAgICBjb25zdCBkcmFnTW91c2VEb3duID0gKGU6IFBvaW50ZXJFdmVudCkgPT4ge1xyXG4gICAgICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgcG9zMyAgICAgICAgICAgICAgICAgICA9IGUuY2xpZW50WDtcclxuICAgICAgICBwb3M0ICAgICAgICAgICAgICAgICAgID0gZS5jbGllbnRZO1xyXG4gICAgICAgIGRvY3VtZW50Lm9ucG9pbnRlcnVwICAgPSBjbG9zZURyYWdFbGVtZW50O1xyXG4gICAgICAgIGRvY3VtZW50Lm9ucG9pbnRlcm1vdmUgPSBlbGVtZW50RHJhZztcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgZWxlbWVudERyYWcgPSAoZTogUG9pbnRlckV2ZW50KTogdm9pZCA9PiB7XHJcbiAgICAgICAgZSA9IGUgfHwgd2luZG93LmV2ZW50O1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBwb3MxICAgICAgICAgICAgICAgPSBwb3MzIC0gZS5jbGllbnRYO1xyXG4gICAgICAgIHBvczIgICAgICAgICAgICAgICA9IHBvczQgLSBlLmNsaWVudFk7XHJcbiAgICAgICAgcG9zMyAgICAgICAgICAgICAgID0gZS5jbGllbnRYO1xyXG4gICAgICAgIHBvczQgICAgICAgICAgICAgICA9IGUuY2xpZW50WTtcclxuICAgICAgICBlbGVtZW50LnN0eWxlLnRvcCAgPSAoZWxlbWVudC5vZmZzZXRUb3AgLSBwb3MyKSArIFwicHhcIjtcclxuICAgICAgICBlbGVtZW50LnN0eWxlLmxlZnQgPSAoZWxlbWVudC5vZmZzZXRMZWZ0IC0gcG9zMSkgKyBcInB4XCI7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGhlYWRlciA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcihoZWFkZXJTZWxlY3RvcikgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICBpZiAoaGVhZGVyKSB7XHJcbiAgICAgICAgaGVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVyZG93blwiLCBkcmFnTW91c2VEb3duKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgZHJhZ01vdXNlRG93bik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY2xvc2VEcmFnRWxlbWVudCgpOiB2b2lkIHtcclxuICAgICAgICBkb2N1bWVudC5vbnBvaW50ZXJ1cCAgID0gbnVsbDtcclxuICAgICAgICBkb2N1bWVudC5vbnBvaW50ZXJtb3ZlID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGNsZWFyOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChoZWFkZXIpIHtcclxuICAgICAgICAgICAgICAgIGhlYWRlci5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgZHJhZ01vdXNlRG93bik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVyZG93blwiLCBkcmFnTW91c2VEb3duKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDcmVhdGVJbWFnZShvcHRpb25zPzogRWxlbWVudEF0dHJpYnV0ZXMpOiBIVE1MRWxlbWVudFRhZ05hbWVNYXBbXCJpbWdcIl0ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gQ3JlYXRlRWxlbWVudChcImltZ1wiLCBvcHRpb25zKTtcclxuXHJcbiAgICBpZiAoQUxMT1dfSU1BR0VTX09OTFlfV0lUSF9BTExPV0VEX0NPUlMpIHtcclxuICAgICAgICByZXN1bHQuY3Jvc3NPcmlnaW4gPSBcIkFub255bW91c1wiO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDaGVja2JveChsYWJlbDogc3RyaW5nLCBvbkNoYW5nZTogKGNoZWNrZWQ6IGJvb2xlYW4pID0+IHZvaWQsIGNoZWNrZWQgPSBmYWxzZSk6IEhUTUxMYWJlbEVsZW1lbnQge1xyXG4gICAgY29uc3QgaW5wdXRFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50ID0gQ3JlYXRlRWxlbWVudChcImlucHV0XCIsIHtcclxuICAgICAgICBjaGVja2VkLFxyXG4gICAgICAgIHR5cGUgICAgOiBcImNoZWNrYm94XCIsXHJcbiAgICAgICAgb25DaGFuZ2U6ICgpID0+IG9uQ2hhbmdlKGlucHV0RWxlbWVudC5jaGVja2VkKSxcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBDcmVhdGVFbGVtZW50KFwibGFiZWxcIiwge1xyXG4gICAgICAgIGNsYXNzTmFtZTogXCJjaGVja2JveC1jb250YWluZXJcIixcclxuICAgICAgICBjaGlsZHJlbiA6IFtsYWJlbCwgaW5wdXRFbGVtZW50LCBDcmVhdGVFbGVtZW50KFwic3BhblwiLCB7Y2xhc3NOYW1lOiBcImNoZWNrbWFya1wifSldLFxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDcmVhdGVFbGVtZW50PEsgZXh0ZW5kcyBrZXlvZiBIVE1MRWxlbWVudFRhZ05hbWVNYXA+KHR5cGU6IEssIG9wdGlvbnM/OiBFbGVtZW50QXR0cmlidXRlcyk6IEhUTUxFbGVtZW50VGFnTmFtZU1hcFtLXSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50PEs+KHR5cGUpO1xyXG4gICAgaWYgKCFvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBPYmplY3QuZW50cmllcyhvcHRpb25zKS5mb3JFYWNoKChlbnRyeSkgPT4ge1xyXG4gICAgICAgIHN3aXRjaCAoZW50cnlbMF0pIHtcclxuICAgICAgICAgICAgY2FzZSBcImNsYXNzTmFtZVwiOlxyXG4gICAgICAgICAgICAgICAgcmVzdWx0LmNsYXNzTmFtZSA9IGVudHJ5WzFdO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJvbkNoYW5nZVwiOlxyXG4gICAgICAgICAgICAgICAgcmVzdWx0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZW50cnlbMV0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJvbkNsaWNrXCI6XHJcbiAgICAgICAgICAgICAgICByZXN1bHQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGVudHJ5WzFdKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiY2hlY2tlZFwiOlxyXG4gICAgICAgICAgICAgICAgKHJlc3VsdCBhcyBIVE1MSW5wdXRFbGVtZW50KS5jaGVja2VkID0gZW50cnlbMV07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInN0eWxlc1wiOlxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoZW50cnlbMV0pLmZvckVhY2goKHN0eWxlRW50cnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3R5bGVbc3R5bGVFbnRyeVswXSBhcyBhbnldID0gc3R5bGVFbnRyeVsxXSBhcyBhbnk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiY2hpbGRyZW5cIjpcclxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGVudHJ5WzFdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoLi4uZW50cnlbMV0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQuYXBwZW5kKGVudHJ5WzFdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiY29udGVudFwiOlxyXG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5WzFdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmlubmVySFRNTCA9IGVudHJ5WzFdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXN1bHQuc2V0QXR0cmlidXRlKGVudHJ5WzBdLCBlbnRyeVsxXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRPRE86IGVsZW1lbnQgcmVtYWlucyBhZnRlciBkZWxldGlvbiBvbk1lc3NhZ2Ugc2NyZWVuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2hvb3NlQ29sb3JVc2luZ0RlZmF1bHRJbnB1dCgpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChzdWNjZXNzKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaW5wdXQgPSBDcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwge1xyXG4gICAgICAgICAgICB0eXBlICAgICA6IFwiY29sb3JcIixcclxuICAgICAgICAgICAgY2xhc3NOYW1lOiBcImhpZGRlblwiLFxyXG4gICAgICAgICAgICBvbkNoYW5nZSA6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MoaW5wdXQudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpbnB1dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlucHV0KTtcclxuICAgICAgICBpbnB1dC5jbGljaygpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRPckNyZWF0ZTxLIGV4dGVuZHMga2V5b2YgSFRNTEVsZW1lbnRUYWdOYW1lTWFwPihwYXJlbnQ6IEhUTUxFbGVtZW50LCB0eXBlOiBLLCAuLi5jbGFzc2VzOiBzdHJpbmdbXSk6IEhUTUxFbGVtZW50VGFnTmFtZU1hcFtLXSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBwYXJlbnQucXVlcnlTZWxlY3RvcjxIVE1MRWxlbWVudFRhZ05hbWVNYXBbS10+KGAke3R5cGV9LiR7Y2xhc3Nlcy5qb2luKFwiLlwiKX1gKTtcclxuICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBDcmVhdGVFbGVtZW50KHR5cGUsIHtjbGFzc05hbWU6IGNsYXNzZXMuam9pbihcIiBcIil9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE9yQ3JlYXRlQW5kQXBwZW5kPEsgZXh0ZW5kcyBrZXlvZiBIVE1MRWxlbWVudFRhZ05hbWVNYXA+KHBhcmVudDogSFRNTEVsZW1lbnQsIHR5cGU6IEssIC4uLmNsYXNzZXM6IHN0cmluZ1tdKTogSFRNTEVsZW1lbnRUYWdOYW1lTWFwW0tdIHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IGdldE9yQ3JlYXRlPEs+KHBhcmVudCwgdHlwZSwgLi4uY2xhc3Nlcyk7XHJcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQocmVzdWx0KTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbiIsImltcG9ydCAqIGFzIFJhbmRvbSBmcm9tIFwiLi9yYW5kb20tdXRpbHNcIlxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhZChudW06IG51bWJlciwgc2l6ZTogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHMgPSBcIjAwMDAwMDAwMDAwMDAwXCIgKyBudW07XHJcblxyXG4gICAgcmV0dXJuIHMuc3Vic3RyKHMubGVuZ3RoIC0gc2l6ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByb3VuZFRvRGVjaW1hbHMobnVtOiBudW1iZXIsIGRlY2ltYWxzID0gMiwgdHlwZTogXCJmbG9vclwiIHwgXCJjZWlsXCIgfCBcInJvdW5kXCIgPSBcInJvdW5kXCIpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgZGl2aWRlciA9IHBhcnNlSW50KDEgKyBuZXcgQXJyYXkoZGVjaW1hbHMgKyAxKS5qb2luKFwiMFwiKSwgMTApO1xyXG5cclxuICAgIHJldHVybiAoTWF0aFt0eXBlXShudW0gKiBkaXZpZGVyKSAvIGRpdmlkZXIpLnRvRml4ZWQoZGVjaW1hbHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaGFzaDJOdW1iZXJzKHg6IG51bWJlciwgeTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IHhGaW5hbCA9IHggPj0gMCA/IHggKiAyIDogLXggKiAyIC0gMTtcclxuICAgIGNvbnN0IHlGaW5hbCA9IHkgPj0gMCA/IHkgKiAyIDogLXkgKiAyIC0gMTtcclxuXHJcbiAgICByZXR1cm4gKCh4RmluYWwgKyB5RmluYWwpICogKHhGaW5hbCArIHlGaW5hbCArIDEpIC8gMikgKyB5RmluYWw7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGFtcCh2YWx1ZTogbnVtYmVyLCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4odmFsdWUsIG1heCkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYmlub21pYWxDb2VmZmljaWVudChuOiBudW1iZXIsIGs6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBsZXQgciA9IDE7XHJcbiAgICBpZiAoayA+IG4pIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICAgIGZvciAobGV0IGQgPSAxOyBkIDw9IGs7IGQrKykge1xyXG4gICAgICAgIHIgKj0gbjtcclxuICAgICAgICBuLS07XHJcbiAgICAgICAgciAvPSBkO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbGVycChhOiBudW1iZXIsIGI6IG51bWJlciwgdmFsOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIGIgKiB2YWwgKyAoMSAtIHZhbCkgKiBhO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbG9nMmkodmFsdWU6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBsZXQgciA9IDA7XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgIHdoaWxlICgodmFsdWUgPj49IDEpID4gMCkge1xyXG4gICAgICAgIHIrKztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxhbXAobWluOiBudW1iZXIsIG1heDogbnVtYmVyLCBzY2FsZTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBjbGFtcCgobWF4IC0gbWluKSAqIHNjYWxlICsgbWluLCBtaW4sIG1heCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIHJhbmRvbUludEJldHdlZW59IGluc3RlYWQ7XHJcbiAqXHJcbiAqIEBwYXJhbSBtaW4gLSBtaW4gdmFsdWVcclxuICogQHBhcmFtIG1heCAtIG1heCB2YWx1ZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbUludChtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIFJhbmRvbS5yYW5kb21JbnRCZXR3ZWVuKG1pbiwgbWF4KTtcclxufVxyXG4vKipcclxuICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayByYW5kb21GbG9hdEJldHdlZW59IGluc3RlYWQ7XHJcbiAqXHJcbiAqIEBwYXJhbSBtaW4gLSBtaW4gdmFsdWVcclxuICogQHBhcmFtIG1heCAtIG1heCB2YWx1ZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbShtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIFJhbmRvbS5yYW5kb21GbG9hdEJldHdlZW4obWluLCBtYXgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXZlcmFnZShhcmdzOiBudW1iZXJbXSk6IG51bWJlciB7XHJcbiAgICBsZXQgc3VtID0gMDtcclxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBhcmdzKSB7XHJcbiAgICAgICAgc3VtICs9IGl0ZW07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHN1bSAvIGFyZ3MubGVuZ3RoO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNQb3dlck9mMih2YWx1ZTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKHZhbHVlICYgKHZhbHVlIC0gMSkpID09PSAwO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGlmZihudW0xOiBudW1iZXIsIG51bTI6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTWF0aC5hYnMobnVtMSAtIG51bTIpO1xyXG59XHJcblxyXG5jb25zdCByYXRpbyA9IDE4MCAvIE1hdGguUEk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG9EZWdyZWVzKHJhZGlhbnM6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gcmFkaWFucyAqIHJhdGlvO1xyXG59XHJcbiIsImltcG9ydCB7IFN0cmluZ01hcCB9IGZyb20gXCIuLi90eXBlcy9zdHJpbmctbWFwLmludGVyZmFjZVwiO1xyXG5cclxuLyoqXHJcbiAqIE1ldGhvZCBwYXJzZSBjb29raWVzXHJcbiAqIEBwYXJhbSBjb29raWVzIC0gY29va2UgdG8gcGFyc2VcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNvb2tpZXMoY29va2llczogc3RyaW5nKTogU3RyaW5nTWFwPHN0cmluZz4ge1xyXG4gICAgY29uc3QgbGlzdDogU3RyaW5nTWFwPHN0cmluZz4gPSB7fTtcclxuICAgIGNvbnN0IGRhdGEgICAgICAgICAgICAgICAgICAgID0gY29va2llcyA/IGNvb2tpZXMudG9TdHJpbmcoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zcGxpdChcIjtcIikgOiBbXTtcclxuICAgIGRhdGEuZm9yRWFjaCgoY29va2llKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcGFydHMgICAgID0gY29va2llLnNwbGl0KFwiPVwiKTtcclxuICAgICAgICBjb25zdCBzaGlmdFBhcnQgPSBwYXJ0cy5zaGlmdCgpO1xyXG4gICAgICAgIGlmIChzaGlmdFBhcnQpIHtcclxuICAgICAgICAgICAgbGlzdFtzaGlmdFBhcnQudHJpbSgpXSA9IGRlY29kZVVSSShwYXJ0cy5qb2luKFwiPVwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGxpc3Q7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNZXRob2QgY2hlY2sgaWYgb2JqZWN0IGlzIGluIGFycmF5XHJcbiAqIEBwYXJhbSBvYmogLSBzZWFyY2hlZCBvYmplY3RcclxuICogQHBhcmFtIGRhdGEgLSBhcnJheSBvZiBvYmplY3RzIHRvIGJlIGNvbXBhcmUgd2l0aCBzZWFyY2hlZCBvYmplY3RcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0luKG9iajogdW5rbm93biwgLi4uZGF0YTogdW5rbm93bltdKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhWzBdKSkge1xyXG4gICAgICAgIGlmIChkYXRhWzBdLmluZGV4T2Yob2JqKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoZGF0YS5pbmRleE9mKG9iaikgPj0gMCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIE1ldGhvZCBwYXJzZSBKU09OIGNvbnRlbnQgd2l0aCBjb21tZW50c1xyXG4gKiBAcGFyYW0gY29udGVudCAtIHN0cmluZ2lmeSBKU09OXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VKU09OV2l0aENvbW1lbnRzPFQ+KGNvbnRlbnQ6IHN0cmluZyk6IFQge1xyXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoY29udGVudC5yZXBsYWNlKC9cXC9cXC8uKlxcbi9nLCBcIlwiKSk7XHJcbn1cclxuXHJcbi8vIFRPRE86IHNob3VsZCBhcHBlbmQgY29va2llcyBvciBhZGQgb3B0aW9uIHRvIGFwcGVuZGluZyBpbnN0ZWFkIG9mIHJlcGxhY2UgY29va2llc1xyXG4vLyBUT0RPOiBleHBpcmVzIG11c3QgYmUgb25seSBpbiB0aGUgZW5kIG9mIGNvb2tpZXNcclxuZXhwb3J0IGZ1bmN0aW9uIHNldENvb2tpZShuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuLCBkYXlzOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgZDogRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICBkLnNldFRpbWUoZC5nZXRUaW1lKCkgKyAoZGF5cyAqIDI0ICogNjAgKiA2MCAqIDEwMDApKTtcclxuICAgIGNvbnN0IGZpbmFsQ29va2llcyA9IGAke25hbWV9PSR7dmFsdWV9O2V4cGlyZXM9JHtkLnRvVVRDU3RyaW5nKCl9YDtcclxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBmaW5hbENvb2tpZXM7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGAke25hbWV9PSR7dmFsdWV9YDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldENvb2tpZShjbmFtZTogc3RyaW5nLCBzb3VyY2UgPSB0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgPyBkb2N1bWVudC5jb29raWUgOiBcIlwiKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IG5hbWUgPSBjbmFtZSArIFwiPVwiO1xyXG4gICAgY29uc3QgY2EgICA9IHNvdXJjZS5zcGxpdChcIjtcIik7XHJcbiAgICBmb3IgKGxldCBjIG9mIGNhKSB7XHJcbiAgICAgICAgd2hpbGUgKGMuY2hhckF0KDApID09PSBcIiBcIikge1xyXG4gICAgICAgICAgICBjID0gYy5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjLmluZGV4T2YobmFtZSkgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGMuc3Vic3RyaW5nKG5hbWUubGVuZ3RoLCBjLmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBcIlwiO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VQYXJhbXM8VD4ocXVlcnkgICAgID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpIDogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcGFyYXRvciA9IFwiJlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsaW1pdGVyID0gXCI9XCIpOiBUIHtcclxuICAgIGNvbnN0IHF1ZXJ5U3RyaW5nOiBhbnkgPSB7fTtcclxuICAgIGNvbnN0IHZhcnM6IHN0cmluZ1tdICAgPSBxdWVyeS5zcGxpdChzZXBhcmF0b3IpO1xyXG4gICAgZm9yIChjb25zdCBwYWlyIG9mIHZhcnMpIHtcclxuICAgICAgICBjb25zdCBba2V5LCB2YWx1ZV0gPSBwYWlyLnNwbGl0KGRlbGltaXRlcik7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeVN0cmluZ1trZXldID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5U3RyaW5nW2tleV0gPSBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHF1ZXJ5U3RyaW5nW2tleV0gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcXVlcnlTdHJpbmdba2V5XSA9IFtxdWVyeVN0cmluZ1trZXldLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBxdWVyeVN0cmluZ1trZXldLnB1c2goZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBxdWVyeVN0cmluZyBhcyBUO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb2JqZWN0VG9RdWVyeVBhcmFtcyhvYmo6IFN0cmluZ01hcDxzdHJpbmc+KTogc3RyaW5nIHtcclxuICAgIC8vIFRPRE86IGFkZCB1cmwgcHJlZml4XHJcbiAgICBsZXQgcmVzdWx0ID0gXCJcIjtcclxuICAgIGZvciAoY29uc3Qgb2JqS2V5IGluIG9iaikge1xyXG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkob2JqS2V5KSkge1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gYCR7cmVzdWx0Lmxlbmd0aCA+IDAgPyBcIiZcIiA6IFwiP1wifSR7b2JqS2V5fT0ke29ialtvYmpLZXldfWA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemUob2JqOiBhbnkpOiBzdHJpbmcge1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHR5cGVvZiBvYmpba2V5XSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgIG9ialtrZXldID0gb2JqW2tleV0udG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZTxUPihvYmo6IHN0cmluZyk6IFQge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gSlNPTi5wYXJzZShvYmopO1xyXG4gICAgZm9yIChjb25zdCBpIGluIHJlc3VsdCkge1xyXG4gICAgICAgIGlmICghcmVzdWx0Lmhhc093blByb3BlcnR5KGkpIHx8XHJcbiAgICAgICAgICAgIHR5cGVvZiByZXN1bHRbaV0gIT09IFwic3RyaW5nXCIgfHwgIShyZXN1bHRbaV0uaW5kZXhPZihcImZ1bmN0aW9uIChcIikgPT09IDAgfHxcclxuICAgICAgICAgICAgICAgIHJlc3VsdFtpXS5tYXRjaCgvXlxcKFtfYS16QS1aMC05XSsoICosICpbX2EtekEtWjAtOV0rKSpcXCkgKj0+LykpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXZhbFxyXG4gICAgICAgICAgICBldmFsKFwicmVzdWx0W2ldID0gXCIgKyByZXN1bHRbaV0pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmVzdWx0W2ldID0gZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1hcDxTID0gYW55LCBUID0gUz4oc291cmNlOiBTLCBkYXRhOiB7IGF0dHJTOiBrZXlvZiBTLCBhdHRyRD86IGtleW9mIFQsIG1hcEZ1bmN0aW9uOiAoc3JjOiBhbnkpID0+IGFueSB9W10pOiBUIHtcclxuICAgIGNvbnN0IGRlc3RpbmF0aW9uOiBhbnkgPSB7fTtcclxuXHJcbiAgICBkYXRhLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICBpZiAoaXRlbS5tYXBGdW5jdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5hdHRyRCkge1xyXG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb25baXRlbS5hdHRyRF0gPSBpdGVtLm1hcEZ1bmN0aW9uKHNvdXJjZVtpdGVtLmF0dHJTXSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbltpdGVtLmF0dHJTXSA9IGl0ZW0ubWFwRnVuY3Rpb24oc291cmNlW2l0ZW0uYXR0clNdKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXRlbS5hdHRyRCkge1xyXG4gICAgICAgICAgICBkZXN0aW5hdGlvbltpdGVtLmF0dHJEXSA9IHNvdXJjZVtpdGVtLmF0dHJTXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkZXN0aW5hdGlvbltpdGVtLmF0dHJTXSA9IHNvdXJjZVtpdGVtLmF0dHJTXTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gZGVzdGluYXRpb247XHJcbn1cclxuIiwiaW1wb3J0IHsgTm90QnJvd3NlckV4Y2VwdGlvbiB9IGZyb20gXCIuLi9lcnJvcnMvbm90LWJyb3dzZXIuZXhjZXB0aW9uXCI7XHJcbmltcG9ydCB7IENyZWF0ZUVsZW1lbnQsIENyZWF0ZUltYWdlIH0gZnJvbSBcIi4vaHRtbC11dGlsc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwbG9hZEltYWdlKCk6IFByb21pc2U8SFRNTEltYWdlRWxlbWVudD4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPEhUTUxJbWFnZUVsZW1lbnQ+KChzdWNjZXNzLCByZWplY3QpID0+IHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ICAgICAgICAgPSBDcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwge1xyXG4gICAgICAgICAgICB0eXBlICAgIDogXCJmaWxlXCIsXHJcbiAgICAgICAgICAgIG9uQ2hhbmdlOiAoZXZlbnQ6IEV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWFkZXIgICA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgICAgICByZWFkZXIub25sb2FkICA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzKENyZWF0ZUltYWdlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZWFkZXIucmVzdWx0IGFzIHN0cmluZ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICByZWFkZXIub25lcnJvciA9IHJlamVjdDtcclxuICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKChldmVudC50YXJnZXQgYXMgYW55KS5maWxlc1swXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xyXG5cclxuICAgICAgICBlbGVtZW50LmNsaWNrKCk7XHJcblxyXG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwbG9hZEZpbGUoKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KChzdWNjZXNzKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCAgICAgICAgID0gQ3JlYXRlRWxlbWVudChcImlucHV0XCIsIHtcclxuICAgICAgICAgICAgdHlwZSAgICA6IFwiZmlsZVwiLFxyXG4gICAgICAgICAgICBvbkNoYW5nZTogKGV2ZW50OiBFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVhZGVyICA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgICAgICByZWFkZXIub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MocmVhZGVyLnJlc3VsdCBhcyBzdHJpbmcpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KChldmVudC50YXJnZXQgYXMgYW55KS5maWxlc1swXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xyXG5cclxuICAgICAgICBlbGVtZW50LmNsaWNrKCk7XHJcblxyXG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XHJcbiAgICB9KTtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGllbnREb3dubG9hZEZpbGUodGV4dDogc3RyaW5nLCBuYW1lOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGNvbnN0IGVsZW1lbnQgPSBDcmVhdGVFbGVtZW50KFwiYVwiLCB7XHJcbiAgICAgICAgaHJlZiAgICA6IFwiZGF0YTp0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLTgsXCIgKyBlbmNvZGVVUklDb21wb25lbnQodGV4dCksXHJcbiAgICAgICAgZG93bmxvYWQ6IG5hbWUsXHJcbiAgICB9KTtcclxuXHJcbiAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XHJcblxyXG4gICAgZWxlbWVudC5jbGljaygpO1xyXG5cclxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbmNsdWRlRmlsZShmaWxlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICB0aHJvdyBuZXcgTm90QnJvd3NlckV4Y2VwdGlvbigpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcclxuICAgIGlmICghc2NyaXB0KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgc2NyaXB0LnNyYyAgID0gZmlsZTtcclxuICAgIHNjcmlwdC50eXBlICA9IFwidGV4dC9qYXZhc2NyaXB0XCI7XHJcbiAgICBzY3JpcHQuZGVmZXIgPSB0cnVlO1xyXG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG59XHJcbiIsImltcG9ydCB7IE9iamVjdEVudHJ5IH0gZnJvbSBcIi4uL3R5cGVzL29iamVjdC1lbnRyeS5pbnRlcmZhY2VcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB3aXRob3V0PFQgZXh0ZW5kcyBvYmplY3Q+KG9iajogVCwgaXRlbXM6IChrZXlvZiBUKVtdKTogT21pdDxULCBhbnk+IHtcclxuICAgIHJldHVybiBnZXRPYmplY3RFbnRyaWVzKG9iaikuZmlsdGVyKChlbnRyeSkgPT4gIWl0ZW1zLmluY2x1ZGVzKGVudHJ5LmtleSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlZHVjZSgocHJldiwgZW50cnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldltlbnRyeS5rZXldID0gZW50cnkudmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7fSBhcyBUKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE9iamVjdEVudHJpZXM8VCBleHRlbmRzIG9iamVjdD4ob2JqOiBUKTogT2JqZWN0RW50cnk8VD5bXSB7XHJcbiAgICBjb25zdCByZXN1bHQ6IE9iamVjdEVudHJ5PFQ+W10gPSBbXTtcclxuICAgIGZvciAoY29uc3Qgb2JqS2V5IGluIG9iaikge1xyXG4gICAgICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KG9iaktleSkpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc3VsdC5wdXNoKHtcclxuICAgICAgICAgICAga2V5ICA6IG9iaktleSxcclxuICAgICAgICAgICAgdmFsdWU6IG9ialtvYmpLZXldLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXROZXN0ZWRQcm9wZXJ0eShvYmplY3Q6IGFueSwgcHJvcGVydHlQYXRoOiBzdHJpbmcsIHNlcGFyYXRvciA9IFwiLlwiKTogYW55IHtcclxuICAgIGNvbnN0IHByb3BlcnR5TGlzdCA9IHByb3BlcnR5UGF0aC5zcGxpdChzZXBhcmF0b3IpO1xyXG5cclxuICAgIHJldHVybiBwcm9wZXJ0eUxpc3QucmVkdWNlKChjdXJyZW50TmVzdGVkUHJvcGVydHlWYWx1ZSwgcHJvcGVydHlOYW1lKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnROZXN0ZWRQcm9wZXJ0eVZhbHVlID8gY3VycmVudE5lc3RlZFByb3BlcnR5VmFsdWVbcHJvcGVydHlOYW1lXSA6IHVuZGVmaW5lZDtcclxuICAgIH0sIG9iamVjdCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXROZXN0ZWRQcm9wZXJ0eTxUPihrZXk6IHN0cmluZywgaXRlbTogYW55LCB2YWx1ZTogVCk6IHZvaWQge1xyXG4gICAgbGV0IG9iaiA9IGl0ZW07XHJcbiAgICBjb25zdCBzcGxpdEtleSA9IGtleS5zcGxpdChcIi5cIik7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNwbGl0S2V5Lmxlbmd0aCAtIDE7IGkrKyl7XHJcbiAgICAgICAgb2JqID0gb2JqW3NwbGl0S2V5W2ldXTtcclxuICAgIH1cclxuICAgIG9ialtzcGxpdEtleVtzcGxpdEtleS5sZW5ndGggLSAxXV0gPSB2YWx1ZTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByb3VnaFNpemVPZk9iamVjdDxUPihvYmplY3Q6IFQpOiBudW1iZXIge1xyXG4gICAgY29uc3Qgb2JqZWN0TGlzdCAgICAgICA9IFtdO1xyXG4gICAgY29uc3Qgc3RhY2s6IHVua25vd25bXSA9IFtvYmplY3RdO1xyXG4gICAgbGV0IGJ5dGVzICAgICAgICAgICAgICA9IDA7XHJcbiAgICB3aGlsZSAoc3RhY2subGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWU6IGFueSA9IHN0YWNrLnBvcCgpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgICAgIGJ5dGVzICs9IDQ7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgYnl0ZXMgKz0gdmFsdWUubGVuZ3RoIDw8IDE7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgYnl0ZXMgKz0gODtcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiBvYmplY3RMaXN0LmluZGV4T2YodmFsdWUpID09PSAtMSkge1xyXG4gICAgICAgICAgICBvYmplY3RMaXN0LnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHZhbHVlW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBieXRlcztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNpemU8VCBleHRlbmRzIG9iamVjdD4ob2JqZWN0OiBUKTogbnVtYmVyIHtcclxuICAgIGxldCByZXN1bHQgPSAwO1xyXG4gICAgZm9yIChjb25zdCBpIGluIG9iamVjdCkge1xyXG4gICAgICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkoaSkpIHtcclxuICAgICAgICAgICAgcmVzdWx0Kys7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluPFQgZXh0ZW5kcyBvYmplY3Q+KG9iamVjdDogVCk6IGJvb2xlYW4ge1xyXG4gICAgZm9yIChjb25zdCBpbmRleCBpbiBvYmplY3QpIHtcclxuICAgICAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KGluZGV4KSAmJiB0eXBlb2Ygb2JqZWN0W2luZGV4XSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG4vKipcclxuICpcclxuICogQHBhcmFtIGxpc3QgLSBsaXN0IHRvIGZsYXRcclxuICogQHBhcmFtIHByb3BlcnR5UGF0aCAtIHBhdGggdG8gcHJvcGVydHlcclxuICogQHBhcmFtIHNlcGFyYXRvciAtIHNlcGFyYXRvciBpbiBwcm9wZXJ0eVBhdGhcclxuICogQHBhcmFtIHNraXBVbmRlZmluZWQgLSB0cnVlIGlmIHVuZGVmaW5lZCBzaG91bGQgYmUgc2tpcHBlZFxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBcclxuICogY29uc3QgaXRlbXMgPSBbXHJcbiAqICAgIHtcclxuICogICAgICAgIHBlcnNvbjoge1xyXG4gKiAgICAgICAgICAgIG5hbWU6IFwiR2FicmllbFwiXHJcbiAqICAgICAgICB9XHJcbiAqICAgIH0sXHJcbiAqICAgIHtcclxuICogICAgICAgIHBlcnNvbjoge1xyXG4gKiAgICAgICAgICAgIG5hbWU6IFwiRWxsYVwiXHJcbiAqICAgICAgICB9XHJcbiAqICAgIH0sXHJcbiAqICAgIHtcclxuICogICAgICAgIHBlcnNvbjoge1xyXG4gKiAgICAgICAgICAgIG5hbWU6IFwiR2FicmllbFwiXHJcbiAqICAgICAgICB9XHJcbiAqICAgIH0sXHJcbiAqICAgIHtcclxuICogICAgICAgIHBlcnNvbjoge1xyXG4gKiAgICAgICAgICAgIG5hbWU6IFwiSm9lXCJcclxuICogICAgICAgIH1cclxuICogICAgfVxyXG4gKiBdXHJcbiAqXHJcbiAqIGNvbnNvbGUubG9nKG1ha2VGbGF0KGl0ZW1zKSwgXCJwZXJzb24ubmFtZVwiKTtcclxuICogLy8gW1wiR2FicmllbFwiLCBcIkVsbGFcIiwgXCJHYWJyaWVsXCIsIFwiSm9lXCJdXHJcbiAqIGNvbnNvbGUubG9nKG1ha2VGbGF0KGl0ZW1zKSwgXCJwZXJzb25fbmFtZVwiLCBcIl9cIik7XHJcbiAqIC8vIFtcIkdhYnJpZWxcIiwgXCJFbGxhXCIsIFwiR2FicmllbFwiLCBcIkpvZVwiXVxyXG4gKiBjb25zb2xlLmxvZyhtYWtlRmxhdChpdGVtcyksIFwicGVyc29uLm5hbWVcIiwgXCIuXCIsIHRydWUpO1xyXG4gKiAvLyBbXCJHYWJyaWVsXCIsIFwiRWxsYVwiLCBcIkpvZVwiXVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtYWtlRmxhdChsaXN0OiBhbnlbXSwgcHJvcGVydHlQYXRoOiBzdHJpbmcsIHNlcGFyYXRvciA9IFwiLlwiLCBza2lwVW5kZWZpbmVkID0gZmFsc2UpOiBhbnkge1xyXG4gICAgY29uc3QgcHJvcGVydHlMaXN0ID0gcHJvcGVydHlQYXRoLmluZGV4T2Yoc2VwYXJhdG9yKSA+PSAwID8gcHJvcGVydHlQYXRoLnNwbGl0KHNlcGFyYXRvcikgOiBbcHJvcGVydHlQYXRoXTtcclxuXHJcbiAgICByZXR1cm4gbGlzdC5yZWR1Y2UoKGFjYywgY3VycikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gcHJvcGVydHlMaXN0LnJlZHVjZSgocHJvcFZhbCwgcHJvcGVydHlOYW1lKSA9PiBwcm9wVmFsID8gcHJvcFZhbFtwcm9wZXJ0eU5hbWVdIDogdW5kZWZpbmVkLCBjdXJyKTtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiICYmIHNraXBVbmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICB9XHJcbiAgICAgICAgYWNjLnB1c2godmFsdWUpO1xyXG5cclxuICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgfSwgW10pO1xyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiByYW5kb21GbG9hdEJldHdlZW4obWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBtaW4gKyBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByYW5kb21JbnRCZXR3ZWVuKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcihyYW5kb21GbG9hdEJldHdlZW4obWluLCBtYXgpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbUJvb2xlYW4oKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKSA8IDAuNTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbUl0ZW08VD4oLi4uaXRlbXM6IFRbXSk6IFQge1xyXG4gICAgcmV0dXJuIGl0ZW1zW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGl0ZW1zLmxlbmd0aCldO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGUgY2xhc3MgYnkgbmFtZSBhbmQgbGlzdCBvZiBwYXJhbWV0ZXJzXHJcbiAqXHJcbiAqIEBwYXJhbSBuYW1lIC0gY2xhc3MgbmFtZVxyXG4gKiBAcGFyYW0gYXJncyAtIGNvbnN0cnVjdG9yIHBhcmFtZXRlclxyXG4gKiBAcmV0dXJucyBjcmVhdGVkIG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNsYXNzKG5hbWU6IGFueSwgYXJnczogYW55W10pOiBhbnkge1xyXG4gICAgY29uc3QgdGVtcCA9IE9iamVjdC5jcmVhdGUobmFtZS5wcm90b3R5cGUpO1xyXG4gICAgbmFtZS5hcHBseSh0ZW1wLCBhcmdzKTtcclxuXHJcbiAgICByZXR1cm4gdGVtcDtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNhbGxGaXJzdEZ1bmN0aW9uKC4uLmZ1bmN0aW9uczogYW55W10pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgZm9yIChjb25zdCBmdW5jIG9mIGZ1bmN0aW9ucykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZnVuYyA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBmdW5jKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIFRPRE86IFRoaXMgaXMgZGVwcmVjYXRlZC4gTW92ZSB0aGlzIHRvIHZhbGlkYXRvcnNcclxuICovXHJcblxyXG5pbXBvcnQgKiBhcyBNaXNjVmFsaWRhdG9ycyBmcm9tIFwiLi4vdmFsaWRhdG9ycy9taXNjLXZhbGlkYXRvcnNcIjtcclxuY29uc3QgdGltZUZvcm1hdHM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XHJcbiAgICBISCAgOiBcIigyWzAtM118WzAxXVxcXFxkKVwiLFxyXG4gICAgSCAgIDogXCIoMlswLTNdfFswMV0/XFxcXGQpXCIsXHJcbiAgICBtbSAgOiBcIihbMC01XVxcXFxkKVwiLFxyXG4gICAgbSAgIDogXCIoWzAtNV0/XFxcXGQpXCIsXHJcbiAgICBNTSAgOiBcIigwXFxcXGR8MVswLTJdfFxcXFxkKVwiLFxyXG4gICAgTSAgIDogXCIoWzEtOV18MVswLTJdKVwiLFxyXG4gICAgc3MgIDogXCIoWzAtNV1cXFxcZClcIiwgLy8gbW1cclxuICAgIHMgICA6IFwiKFswLTVdP1xcXFxkKVwiLCAvLyBzc1xyXG4gICAgWVlZWTogXCIoWzEtOV1cXFxcZHszLDN9KVwiLFxyXG4gICAgWVkgIDogXCIoXFxcXGR7MiwyfSlcIixcclxuICAgIEREICA6IFwiKFswLTNdXFxcXGQpXCIsXHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNDYW1lbENhc2UodGV4dDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChcIl5bQS1aXT9bYS16XSsoW0EtWl1bYS16XSopKiRcIiwgXCJnXCIpLnRlc3QodGV4dCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1VwcGVyQ2FtZWxDYXNlKHRleHQ6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoXCJeKFtBLVpdW2Etel0qKSokXCIsIFwiZ1wiKS50ZXN0KHRleHQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNMb3dlckNhbWVsQ2FzZSh0ZXh0OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBuZXcgUmVnRXhwKFwiXlthLXpdKyhbQS1aXVthLXpdKikqJFwiLCBcImdcIikudGVzdCh0ZXh0KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzTG93ZXJTbmFrZUNhc2UodGV4dDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChcIl5bYS16XSooX1thLXpdKikqJFwiLCBcImdcIikudGVzdCh0ZXh0KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVXBwZXJTbmFrZUNhc2UodGV4dDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChcIl5bQS1aXSooX1tBLVpdKikqJFwiLCBcImdcIikudGVzdCh0ZXh0KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzU25ha2VDYXNlKHRleHQ6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoXCJeKFthLXpdKnxbQS1aXSopKF9bYS16QS1aXSopKiRcIiwgXCJnXCIpLnRlc3QodGV4dCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1RpbWVGb3JtYXQodGV4dDogc3RyaW5nLCBmb3JtYXQ6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGltZUZvcm1hdHMpIHtcclxuICAgICAgICBpZiAodGltZUZvcm1hdHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShrZXksIHRpbWVGb3JtYXRzW2tleV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChgXiR7Zm9ybWF0fSRgKS50ZXN0KHRleHQpO1xyXG59XHJcbi8qKlxyXG4gKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIE1pc2NWYWxpZGF0b3JzLmlzVmFsaWRQaG9uZU51bWJlcn0gaW5zdGVhZFxyXG4gKiBAcGFyYW0gbnVtIC0gbnVtIHRvIHZhbGlkYXRlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFBob25lTnVtYmVyKG51bTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gTWlzY1ZhbGlkYXRvcnMuaXNWYWxpZFBob25lTnVtYmVyKG51bSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIE1pc2NWYWxpZGF0b3JzLmlzVmFsaWRFbWFpbH0gaW5zdGVhZFxyXG4gKiBAcGFyYW0gZW1haWwgLSBlbWFpbCB0byB2YWxpZGF0ZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRFbWFpbChlbWFpbDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gTWlzY1ZhbGlkYXRvcnMuaXNWYWxpZEVtYWlsKGVtYWlsKTtcclxufVxyXG4iLCJpbXBvcnQgeyBTdHJpbmdNYXAgfSBmcm9tIFwiLi4vdHlwZXMvc3RyaW5nLW1hcC5pbnRlcmZhY2VcIjtcclxuaW1wb3J0IHsgam9pbiB9IGZyb20gXCIuL2FycmF5LXV0aWxzXCI7XHJcbmltcG9ydCAqIGFzIFN0cmluZ0NoZWNrZXJzIGZyb20gXCIuL3N0cmluZy1jaGVja2Vyc1wiO1xyXG5cclxuY29uc3QgYWNjZW50ZWRMb3dlckNoYXJhY3RlcnMgPSBcIsSFw6DDocOkw6LDo8Olw6bEg8SHxI3EicSPxJnDqMOpw6vDqsSdxKXDrMOtw6/DrsS1xYLEvsWExYjDssOzw7bFkcO0w7XDsMO4xZvImcWfxaHFncWlyJvFo8Wtw7nDusO8xbHDu8Oxw7/DvcOnxbzFusW+XCI7XHJcbmNvbnN0IG5vcm1hbExvd2VyQ2hhcmFjdGVycyAgID0gXCJhYWFhYWFhYWFjY2NkZWVlZWVnaGlpaWlqbGxubm9vb29vb29vc3Nzc3N0dHR1dXV1dXVueXljenp6XCI7XHJcbmNvbnN0IGFjY2VudGVkQ2hhcmFjdGVycyAgICAgID0gYWNjZW50ZWRMb3dlckNoYXJhY3RlcnMgKyBhY2NlbnRlZExvd2VyQ2hhcmFjdGVycy50b1VwcGVyQ2FzZSgpO1xyXG5jb25zdCBub3JtYWxDaGFyYWN0ZXJzICAgICAgICA9IG5vcm1hbExvd2VyQ2hhcmFjdGVycyArIG5vcm1hbExvd2VyQ2hhcmFjdGVycy50b1VwcGVyQ2FzZSgpO1xyXG5cclxuLyogVE9ETzpcclxuICAgIHN0YXRpYyB1bmRlcnNjb3JlKHdvcmQpIHtcclxuICAgIH1cclxuICAgIHN0YXRpYyBodW1hbml6ZSh3b3JkKSB7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZGFzaGVyaXplKHdvcmQpIHtcclxuICAgIH1cclxuICAgIC8vZGFzaENhc2UgPSBhLWItYy1kLWVcclxuICAgIC8vZG90Q2FzZSBhLmMuZC52LnMuZFxyXG4gICAgLy9wYXNjYWxDYXNlID0gRm9vQmFyQmF6XHJcbiAgICAvL3BhdGhDYXNlID0gYS9iL2MvZFxyXG4gICAgLy9zbmFrZUNhc2UgPSBhX2JfY19kX1xyXG4gICAgc3RhdGljIGlzVXBwZXIod29yZCkge1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGlzTG93ZXIod29yZCkge1xyXG4gICAgfVxyXG4qL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUFjY2VudGVkQ2hhcmFjdGVycyh3b3JkOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgaWYgKCF3b3JkIHx8ICF3b3JkLnJlcGxhY2UpIHtcclxuICAgICAgICByZXR1cm4gd29yZDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gd29yZC5yZXBsYWNlKC8uL2csIChlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IGFjY2VudGVkQ2hhcmFjdGVycy5pbmRleE9mKGUpO1xyXG5cclxuICAgICAgICByZXR1cm4gaW5kZXggPj0gMCA/IG5vcm1hbENoYXJhY3RlcnNbaW5kZXhdIDogZTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG9VcHBlclNuYWtlQ2FzZSh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgaWYgKFN0cmluZ0NoZWNrZXJzLmlzQ2FtZWxDYXNlKHRleHQpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRleHQucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgXCIkMV8kMlwiKVxyXG4gICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyhbQS1aXSkoW0EtWl0pL2csIFwiJDFfJDJcIilcclxuICAgICAgICAgICAgICAgICAgIC50b1VwcGVyQ2FzZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChTdHJpbmdDaGVja2Vycy5pc1VwcGVyU25ha2VDYXNlKHRleHQpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRleHQucmVwbGFjZSgvKC18X3wgfFxccykrKC4pPy9nLCAoaSwgdSwgZSkgPT4gZSA/IFwiX1wiICsgZSA6IFwiXCIpXHJcbiAgICAgICAgICAgICAgIC5yZXBsYWNlKC9eXy8sIFwiXCIpXHJcbiAgICAgICAgICAgICAgIC50b1VwcGVyQ2FzZSgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG9Mb3dlclNuYWtlQ2FzZSh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgaWYgKFN0cmluZ0NoZWNrZXJzLmlzQ2FtZWxDYXNlKHRleHQpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRleHQucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgXCIkMV8kMlwiKVxyXG4gICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyhbQS1aXSkoW0EtWl0pL2csIFwiJDFfJDJcIilcclxuICAgICAgICAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgfVxyXG4gICAgaWYgKFN0cmluZ0NoZWNrZXJzLmlzTG93ZXJTbmFrZUNhc2UodGV4dCkpIHtcclxuICAgICAgICByZXR1cm4gdGV4dDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKC8oLXxffCB8XFxzKSsoLik/L2csIChpLCB1LCBlKSA9PiBlID8gXCJfXCIgKyBlIDogXCJcIilcclxuICAgICAgICAgICAgICAgLnJlcGxhY2UoL15fLywgXCJcIilcclxuICAgICAgICAgICAgICAgLnRvTG93ZXJDYXNlKCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b0xvd2VyQ2FtZWxDYXNlKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBpZiAoU3RyaW5nQ2hlY2tlcnMuaXNMb3dlckNhbWVsQ2FzZSh0ZXh0KSkge1xyXG4gICAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0ZXh0LnRyaW0oKVxyXG4gICAgICAgICAgICAgICAucmVwbGFjZSgvKFthLXpdKShbQS1aXSkoW0EtWl0pL2csIFwiJDEkMl8kM1wiKVxyXG4gICAgICAgICAgICAgICAucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgXCIkMV8kMlwiKVxyXG4gICAgICAgICAgICAgICAudG9Mb3dlckNhc2UoKVxyXG4gICAgICAgICAgICAgICAucmVwbGFjZSgvKC18X3wgfFxccykrKC4pPy9nLCAobWF0aCwgc2VwLCBjKSA9PiBjID8gYy50b1VwcGVyQ2FzZSgpIDogXCJcIilcclxuICAgICAgICAgICAgICAgLnJlcGxhY2UoL14uLywgKGUpID0+IGUudG9Mb3dlckNhc2UoKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b1VwcGVyQ2FtZWxDYXNlKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBpZiAoU3RyaW5nQ2hlY2tlcnMuaXNVcHBlckNhbWVsQ2FzZSh0ZXh0KSkge1xyXG4gICAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0b0NhcGl0YWwodG9Mb3dlckNhbWVsQ2FzZSh0ZXh0KSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYXBpdGFsaXplKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGV4dC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL14uLywgKGNoYXIpID0+IGNoYXIudG9VcHBlckNhc2UoKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b0NhcGl0YWwodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoLy4vLCAoZSkgPT4gZS50b1VwcGVyQ2FzZSgpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldExhc3RQYXJ0KHRleHQ6IHN0cmluZywgZGl2aWRlciA9IFwiIFwiKTogc3RyaW5nIHtcclxuICAgIGlmICghdGV4dCB8fCAhdGV4dC5zcGxpdCkge1xyXG4gICAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc3BsaXRUZXh0ID0gdGV4dC5zcGxpdChkaXZpZGVyKTtcclxuXHJcbiAgICByZXR1cm4gc3BsaXRUZXh0W3NwbGl0VGV4dC5sZW5ndGggLSAxXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvdW50KHRleHQ6IHN0cmluZywga2V5OiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuICh0ZXh0Lm1hdGNoKG5ldyBSZWdFeHAoa2V5LCBcImdcIikpIHx8IFtdKS5sZW5ndGg7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gdGV4dCAtIHRleHQgbmVlZCB0byBiZSByZXBlYXRcclxuICogQHBhcmFtIG51bWJlck9mUmVwZXRpdGlvbnMgLSBudW1iZXIgb2YgaXRlcmF0aW9uc1xyXG4gKiBAZGVwcmVjYXRlZCAtIHVzZSB7QGxpbmsgU3RyaW5nI3JlcGVhdH1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByZXBlYXQodGV4dDogc3RyaW5nLCBudW1iZXJPZlJlcGV0aXRpb25zOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIG5ldyBBcnJheShudW1iZXJPZlJlcGV0aXRpb25zICsgMSkuam9pbih0ZXh0KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUFsbCh0ZXh0OiBzdHJpbmcsIHdvcmRzOiBzdHJpbmdbXSk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKG5ldyBSZWdFeHAoYCgke3dvcmRzLmpvaW4oXCJ8XCIpfSlgLCBcImdcIiksIFwiXCIpO1xyXG59XHJcblxyXG4vLyBUT0RPOiBuZWVkIHRvIGJlIGZpeGVkXHJcbmV4cG9ydCBmdW5jdGlvbiB0ZW1wbGF0ZSh0ZXh0OiBzdHJpbmcsIHZhbHVlczogU3RyaW5nTWFwPHN0cmluZz4sIHN0YXJ0ID0gXCJ7e1wiLCBlbmQgPSBcIn19XCIpOiBzdHJpbmcge1xyXG4gICAgc3RhcnQgICAgICAgICA9IHN0YXJ0LnJlcGxhY2UoL1stW1xcXSgpKlxcc10vZywgXCJcXFxcJCZcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCQvZywgXCJcXFxcJFwiKTtcclxuICAgIGVuZCAgICAgICAgICAgPSBlbmQucmVwbGFjZSgvWy1bXFxdKCkqXFxzXS9nLCBcIlxcXFwkJlwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCQvZywgXCJcXFxcJFwiKTtcclxuICAgIGNvbnN0IHJlZ2V4cCAgPSBuZXcgUmVnRXhwKGAke3N0YXJ0fSguKz8pJyR7ZW5kfWAsIFwiZ1wiKTtcclxuICAgIGNvbnN0IG1hdGNoZXMgPSB0ZXh0Lm1hdGNoKHJlZ2V4cCkgfHwgW107XHJcblxyXG4gICAgbWF0Y2hlcy5mb3JFYWNoKChtYXRjaCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGtleSAgID0gbWF0Y2guc3Vic3RyaW5nKHN0YXJ0Lmxlbmd0aCwgbWF0Y2gubGVuZ3RoIC0gZW5kLmxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRyaW0oKTtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1trZXldO1xyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKG1hdGNoLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHRleHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVFbXB0eUxpbmVzKGNvbnRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gY29udGVudC5yZXBsYWNlKC9eXFxzKiQoPzpcXHJcXG4/fFxcbikvZ20sIFwiXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYmV0d2Vlbih0ZXh0OiBzdHJpbmcsIGtleTE6IHN0cmluZywga2V5Mjogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHN0YXJ0UG9zID0gdGV4dC5pbmRleE9mKGtleTEpO1xyXG4gICAgY29uc3QgZW5kUG9zICAgPSB0ZXh0LmluZGV4T2Yoa2V5Mik7XHJcbiAgICBpZiAoc3RhcnRQb3MgPCAwICYmIGVuZFBvcyA+PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHRleHQuc3Vic3RyaW5nKDAsIGVuZFBvcyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGVuZFBvcyA8IDAgJiYgc3RhcnRQb3MgPj0gMCkge1xyXG4gICAgICAgIHJldHVybiB0ZXh0LnN1YnN0cmluZyhzdGFydFBvcyArIGtleTEubGVuZ3RoLCB0ZXh0Lmxlbmd0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRleHQuc3Vic3RyaW5nKHN0YXJ0UG9zICsga2V5MS5sZW5ndGgsIGVuZFBvcyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvY2N1cnJlbmNlcyh0ZXh0OiBzdHJpbmcsIGtleTogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgIHJldHVybiAodGV4dC5tYXRjaChuZXcgUmVnRXhwKGtleSwgXCJnXCIpKSB8fCBbXSkubGVuZ3RoO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29sbGFwc2VXaGl0ZXNwYWNlKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKC9bXFxzXFx1RkVGRlxceEEwXXsyLH0vZywgXCIgXCIpO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN3YXBDYXNlKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKC9cXFMvZywgKGNoYXIpID0+IHtcclxuICAgICAgICBjb25zdCBsb3dlckNhc2UgPSBjaGFyLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBsb3dlckNhc2UgPT09IGNoYXIgPyBjaGFyLnRvVXBwZXJDYXNlKCkgOiBsb3dlckNhc2U7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybVRvQmFzaWNGb3JtYXQodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBjb2xsYXBzZVdoaXRlc3BhY2UocmVtb3ZlQWNjZW50ZWRDaGFyYWN0ZXJzKHRleHQpLnRvTG93ZXJDYXNlKCkpLnRyaW0oKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEFzY2lpQXJyYXkodGhpc0FyZzogc3RyaW5nKTogbnVtYmVyW10ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gW107XHJcbiAgICBmb3IgKGNvbnN0IGxldHRlciBvZiB0aGlzQXJnKSB7XHJcbiAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gbGV0dGVyLmNoYXJDb2RlQXQoMCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRvQmFzaWNGb3JtKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gcmVtb3ZlQWNjZW50ZWRDaGFyYWN0ZXJzKHRleHQudG9Mb3dlckNhc2UoKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb250YWlucyh0ZXh0OiBzdHJpbmcsIHN1YnN0cmluZzogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gISF0ZXh0ICYmIHJlbW92ZUFjY2VudGVkQ2hhcmFjdGVycyh0ZXh0LnRvTG93ZXJDYXNlKCkpLmluZGV4T2Yoc3Vic3RyaW5nKSA+PSAwO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gam9pblNpbmdsZShwcmVmaXg6IHN0cmluZywgZGl2aWRlcjogc3RyaW5nLCBwb3N0Zml4OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgaWYgKHBvc3RmaXguc3RhcnRzV2l0aChkaXZpZGVyKSAmJiBwcmVmaXguZW5kc1dpdGgoZGl2aWRlcikpIHtcclxuICAgICAgICByZXR1cm4gcHJlZml4ICsgcG9zdGZpeC5zdWJzdHJpbmcoZGl2aWRlci5sZW5ndGgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChwb3N0Zml4LnN0YXJ0c1dpdGgoZGl2aWRlcikgfHwgcHJlZml4LmVuZHNXaXRoKGRpdmlkZXIpKSB7XHJcbiAgICAgICAgcmV0dXJuIHByZWZpeCArIHBvc3RmaXg7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHByZWZpeCArIGRpdmlkZXIgKyBwb3N0Zml4O1xyXG59XHJcblxyXG4vKipcclxuICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBqb2lufSBpbnN0ZWFkXHJcbiAqIEBwYXJhbSBkYXRhIC0gZGF0YSB0byBqb2luXHJcbiAqIEBwYXJhbSBkZWxpbWl0ZXIgLSBkZWxpbWl0ZXJcclxuICogQHBhcmFtIHByZWZpeCAtIHByZWZpeFxyXG4gKiBAcGFyYW0gcG9zdGZpeCAtIHBvc3RmaXhcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBqb2luU3RyaW5nKGRhdGE6IHN0cmluZ1tdLCBkZWxpbWl0ZXIgPSBcIiBcIiwgcHJlZml4ID0gXCJcIiwgcG9zdGZpeCA9IFwiXCIpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGpvaW4oZGF0YSwgZGVsaW1pdGVyLCBwcmVmaXgsIHBvc3RmaXgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9ybWF0dGVkTnVtYmVyKG51bTogc3RyaW5nLCBwcmVmaXggPSBcIis0MjFcIik6IHN0cmluZyB7XHJcbiAgICBudW0gPSBudW0ucmVwbGFjZSgvWyggKS8tXS9nLCBcIlwiKTtcclxuICAgIGlmIChudW0uc3RhcnRzV2l0aChcIitcIikpIHtcclxuICAgICAgICByZXR1cm4gbnVtO1xyXG4gICAgfVxyXG4gICAgaWYgKG51bS5zdGFydHNXaXRoKFwiMDBcIikpIHtcclxuICAgICAgICByZXR1cm4gbnVtLnN1YnN0cmluZygyKTtcclxuICAgIH1cclxuICAgIGlmIChudW0uc3RhcnRzV2l0aChcIjA5XCIpIHx8IG51bS5zdGFydHNXaXRoKFwiMDJcIikpIHtcclxuICAgICAgICByZXR1cm4gcHJlZml4ICsgbnVtLnN1YnN0cmluZygxKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbnVtO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmdXp6eV9tYXRjaF9zaW1wbGUocGF0dGVybjogc3RyaW5nLCBzdHI6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgbGV0IHBhdHRlcm5JZHggICAgICA9IDA7XHJcbiAgICBsZXQgc3RySWR4ICAgICAgICAgID0gMDtcclxuICAgIGNvbnN0IHBhdHRlcm5MZW5ndGggPSBwYXR0ZXJuLmxlbmd0aDtcclxuICAgIGNvbnN0IHN0ckxlbmd0aCAgICAgPSBzdHIubGVuZ3RoO1xyXG5cclxuICAgIHdoaWxlIChwYXR0ZXJuSWR4ICE9PSBwYXR0ZXJuTGVuZ3RoICYmIHN0cklkeCAhPT0gc3RyTGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgcGF0dGVybkNoYXIgPSBwYXR0ZXJuLmNoYXJBdChwYXR0ZXJuSWR4KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGNvbnN0IHN0ckNoYXIgICAgID0gc3RyLmNoYXJBdChzdHJJZHgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBpZiAocGF0dGVybkNoYXIgPT09IHN0ckNoYXIpIHtcclxuICAgICAgICAgICAgKytwYXR0ZXJuSWR4O1xyXG4gICAgICAgIH1cclxuICAgICAgICArK3N0cklkeDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcGF0dGVybkxlbmd0aCAhPT0gMCAmJiBzdHJMZW5ndGggIT09IDAgJiYgcGF0dGVybklkeCA9PT0gcGF0dGVybkxlbmd0aDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2VGb3JBbGwoY29udGVudDogc3RyaW5nLCB2YWx1ZXM6IHN0cmluZ1tdLCBwbGFjZUhvbGRlcjogc3RyaW5nKTogc3RyaW5nW10ge1xyXG4gICAgcmV0dXJuIHZhbHVlcy5tYXAoKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQucmVwbGFjZShwbGFjZUhvbGRlciwgdmFsdWUpO1xyXG4gICAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IHsgU3RyaW5nTWFwIH0gZnJvbSBcIi4uL3R5cGVzXCI7XHJcblxyXG5jb25zdCBpbnRlcnZhbHM6IFN0cmluZ01hcDxudW1iZXI+ID0ge1xyXG4gICAgXCJ5ZWFyXCIgIDogMzE1MzYwMDAsXHJcbiAgICBcIm1vbnRoXCIgOiAyNTkyMDAwLFxyXG4gICAgXCJ3ZWVrXCIgIDogNjA0ODAwLFxyXG4gICAgXCJkYXlcIiAgIDogODY0MDAsXHJcbiAgICBcImhvdXJcIiAgOiAzNjAwLFxyXG4gICAgXCJtaW51dGVcIjogNjAsXHJcbiAgICBcInNlY29uZFwiOiAxXHJcbn07XHJcblxyXG5jb25zdCBpbnRlcnZhbEVudHJpZXMgPSBPYmplY3QuZW50cmllcyhpbnRlcnZhbHMpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRhdGVBZ2UodmFsdWU6IG51bWJlciB8IHN0cmluZyB8IERhdGUpOiBudW1iZXIgfCBzdHJpbmcgfCBEYXRlIHtcclxuICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgIGNvbnN0IHNlY29uZHMgPSBNYXRoLmZsb29yKCgrbmV3IERhdGUoKSAtICtuZXcgRGF0ZSh2YWx1ZSkpIC8gMTAwMCk7XHJcbiAgICAgICAgaWYgKHNlY29uZHMgPCAyOSkgeyAvLyBsZXNzIHRoYW4gMzAgc2Vjb25kcyBhZ28gd2lsbCBzaG93IGFzICdKdXN0IG5vdydcclxuICAgICAgICAgICAgcmV0dXJuIFwiSnVzdCBub3dcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGNvdW50ZXI7XHJcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCBpbnRlcnZhbF0gb2YgaW50ZXJ2YWxFbnRyaWVzKSB7XHJcbiAgICAgICAgICAgIGNvdW50ZXIgPSBNYXRoLmZsb29yKHNlY29uZHMgLyBpbnRlcnZhbCk7XHJcbiAgICAgICAgICAgIGlmKGNvdW50ZXIgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNvdW50ZXIgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBgJHtjb3VudGVyfSAke2tleX0gYWdvYDsgLy8gc2luZ3VsYXIgKDEgZGF5IGFnbylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGAke2NvdW50ZXJ9ICR7a2V5fXMgYWdvYDsgLy8gcGx1cmFsICgyIGRheXMgYWdvKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXQoZGF0ZTogRGF0ZSwgcGF0dGVybjogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHRvU3RyaW5nID0gKHRpbWU6IG51bWJlcik6IHN0cmluZyA9PiB0aW1lIDwgMTAgPyBcIjBcIiArIHRpbWUgOiBcIlwiICsgdGltZTtcclxuXHJcbiAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoXCIoRER8TU18WVlZWXxZWVl8WVl8SEh8bW18U1MpXCIsIFwiZ1wiKTtcclxuICAgIGNvbnN0IEREICAgID0gdG9TdHJpbmcoZGF0ZS5nZXREYXRlKCkpO1xyXG4gICAgY29uc3QgTU0gICAgPSB0b1N0cmluZyhkYXRlLmdldE1vbnRoKCkgKyAxKTtcclxuICAgIGNvbnN0IFlZWVkgID0gZGF0ZS5nZXRGdWxsWWVhcigpICsgXCJcIjtcclxuICAgIGNvbnN0IFlZWSAgID0gWVlZWS5zdWJzdHIoMSwgNCk7XHJcbiAgICBjb25zdCBZWSAgICA9IFlZWS5zdWJzdHIoMSwgNCk7XHJcbiAgICBjb25zdCBISCAgICA9IHRvU3RyaW5nKGRhdGUuZ2V0SG91cnMoKSk7XHJcbiAgICBjb25zdCBtbSAgICA9IHRvU3RyaW5nKGRhdGUuZ2V0TWludXRlcygpKTtcclxuICAgIGNvbnN0IFNTICAgID0gdG9TdHJpbmcoZGF0ZS5nZXRTZWNvbmRzKCkpO1xyXG5cclxuICAgIHJldHVybiBwYXR0ZXJuLnJlcGxhY2UocmVnZXgsIChlKSA9PiB7XHJcbiAgICAgICAgc3dpdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJERFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEREO1xyXG4gICAgICAgICAgICBjYXNlIFwiTU1cIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBNTTtcclxuICAgICAgICAgICAgY2FzZSBcIllZWVlcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBZWVlZO1xyXG4gICAgICAgICAgICBjYXNlIFwiWVlZXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWVlZO1xyXG4gICAgICAgICAgICBjYXNlIFwiWVlcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBZWTtcclxuICAgICAgICAgICAgY2FzZSBcIkhIXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSEg7XHJcbiAgICAgICAgICAgIGNhc2UgXCJtbVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1tO1xyXG4gICAgICAgICAgICBjYXNlIFwiU1NcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBTUztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBlO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXREYXRlKGRhdGU6IERhdGUsIG9wdDogeyBtczogbnVtYmVyLCBzOiBudW1iZXIsIG06IG51bWJlciwgaDogbnVtYmVyIH0pOiBEYXRlIHtcclxuICAgIGlmICghZGF0ZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShcIlwiKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWlzTmFOKG9wdC5tcykpIHtcclxuICAgICAgICBkYXRlLnNldE1pbGxpc2Vjb25kcyhvcHQubXMpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc05hTihvcHQucykpIHtcclxuICAgICAgICBkYXRlLnNldFNlY29uZHMob3B0LnMpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc05hTihvcHQubSkpIHtcclxuICAgICAgICBkYXRlLnNldE1pbnV0ZXMob3B0Lm0pO1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc05hTihvcHQuaCkpIHtcclxuICAgICAgICBkYXRlLnNldEhvdXJzKG9wdC5oKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZGF0ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0YXJ0T2ZUaGVEYXkoZGF0ZTogRGF0ZSk6IERhdGUge1xyXG4gICAgcmV0dXJuIHNldERhdGUoZGF0ZSwge21zOiAwLCBzOiAwLCBtOiAwLCBoOiAwfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRFbmRPZlRoZURheShkYXRlOiBEYXRlKTogRGF0ZSB7XHJcbiAgICByZXR1cm4gc2V0RGF0ZShkYXRlLCB7bXM6IDk5OSwgczogNTksIG06IDU5LCBoOiAyM30pO1xyXG59XHJcbiIsImV4cG9ydCAqIGZyb20gXCIuL21pc2MtdmFsaWRhdG9yc1wiO1xyXG4iLCJjb25zdCB2YWxpZEVtYWlsUmVnZXggICAgICAgPSAvXigoW148PigpW1xcXVxcXFwuLDs6XFxzQFwiXSsoXFwuW148PigpW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvaTtcclxuY29uc3QgdmFsaWRQaG9uZU51bWJlclJlZ2V4ID0gL14oWytdfDAwKT9bKF0/WzAtOV17Myw0fVspXT9bLVxccy5dP1swLTldezIsM31bLVxccy5dP1swLTldezIsNn0oWy1cXHMuXT9bMC05XXszfSk/JC9pbTtcclxuXHJcbmZ1bmN0aW9uIHR5cGVPZihhcmc6IHVua25vd24pOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBhcmc7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnOiBhbnkpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0eXBlT2YoYXJnKSA9PT0gXCJmdW5jdGlvblwiO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmcoYXJnOiBhbnkpOiBhcmcgaXMgc3RyaW5nIHtcclxuICAgIHJldHVybiB0eXBlT2YoYXJnKSA9PT0gXCJzdHJpbmdcIjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KGFyZzogYW55KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdHlwZU9mKGFyZykgPT09IFwib2JqZWN0XCI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlcihhcmc6IGFueSk6IGFyZyBpcyBudW1iZXIge1xyXG4gICAgcmV0dXJuIHR5cGVPZihhcmcpID09PSBcIm51bWJlclwiO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNCb29sZWFuKGFyZzogYW55KTogYXJnIGlzIGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHR5cGVPZihhcmcpID09PSBcImJvb2xlYW5cIjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXkoYXJnOiBhbnkpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNJbnQoYXJnOiBhbnkpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0eXBlT2YoYXJnKSA9PT0gXCJudW1iZXJcIiAmJiBhcmcgJSAxID09PSAwO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGbG9hdChhcmc6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHR5cGVPZihhcmcpID09PSBcIm51bWJlclwiICYmIGFyZyAlIDEgIT09IDA7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1VuZGVmaW5lZChhcmc/OiBhbnkpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0eXBlT2YoYXJnKSA9PT0gXCJ1bmRlZmluZWRcIjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRWxlbWVudChvYmo6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIHJldHVybiBpc09iamVjdChvYmopICYmXHJcbiAgICAgICAgICAgIG9iai5ub2RlVHlwZSA9PT0gMSAmJlxyXG4gICAgICAgICAgICBpc09iamVjdChvYmouc3R5bGUpICYmXHJcbiAgICAgICAgICAgIGlzT2JqZWN0KG9iai5vd25lckRvY3VtZW50KTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPiAwICYmIC9eW1xcc1xceGEwXSokLy50ZXN0KHZhbHVlKTtcclxuICAgIH1cclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPiAwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPiAwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFBob25lTnVtYmVyKG51bTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoIW51bSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdmFsaWRQaG9uZU51bWJlclJlZ2V4LnRlc3QobnVtLnRyaW0oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRW1haWwoZW1haWw6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCFlbWFpbCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdmFsaWRFbWFpbFJlZ2V4LnRlc3QoZW1haWwudHJpbSgpKTtcclxufVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBXRUIgKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8vIFVUSUxTXHJcblxyXG5leHBvcnQgeyBBcnJheVV0aWxzIGFzIGFycmF5cyB9IGZyb20gXCIuL3V0aWxzL2RlcHJlY2F0ZWQvQXJyYXlVdGlsc1wiO1xyXG5leHBvcnQgeyBNYXRoVXRpbHMgYXMgbWF0aCB9IGZyb20gXCIuL3V0aWxzL2RlcHJlY2F0ZWQvTWF0aFV0aWxzXCI7XHJcbmV4cG9ydCB7IERvbVV0aWxzIGFzIGRvbSB9IGZyb20gXCIuL3V0aWxzL0RvbVV0aWxzXCI7XHJcbmV4cG9ydCB7IE1pc2NVdGlscyBhcyBtaXNjIH0gZnJvbSBcIi4vdXRpbHMvZGVwcmVjYXRlZC9NaXNjVXRpbHNcIjtcclxuZXhwb3J0IHsgT2JqZWN0VXRpbHMgYXMgb2JqZWN0IH0gZnJvbSBcIi4vdXRpbHMvZGVwcmVjYXRlZC9PYmplY3RVdGlsc1wiO1xyXG5leHBvcnQgeyBTdHJpbmdVdGlscyBhcyBzdHJpbmcgfSBmcm9tIFwiLi91dGlscy9kZXByZWNhdGVkL1N0cmluZ1V0aWxzXCI7XHJcbmV4cG9ydCAqIGFzIHRpbWUgZnJvbSBcIi4vdXRpbHMvdGltZS11dGlsc1wiO1xyXG5cclxuZXhwb3J0IHsgU2xvdmFrU3RlbW1lciBhcyBzdGVtbWVyIH0gZnJvbSBcIi4vbWlzYy9TbG92YWtTdGVtbWVyXCI7XHJcblxyXG4vLyBET01cclxuXHJcbmV4cG9ydCB7IENoZWNrZXJzIGFzIGNoZWNrIH0gZnJvbSBcIi4vZG9tL2RlcHJlY2F0ZWQvQ2hlY2tlcnNcIjtcclxuZXhwb3J0IHsgQ2FudmFzTWFuYWdlciBhcyBjYW52YXMgfSBmcm9tIFwiLi9kb20vY2FudmFzLW1hbmFnZXJcIjtcclxuZXhwb3J0IHsgRG9tR2V0IGFzIGdldCB9IGZyb20gXCIuL2RvbS9kb20tZ2V0XCI7XHJcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gbW9kdWxlIGV4cG9ydHMgbXVzdCBiZSByZXR1cm5lZCBmcm9tIHJ1bnRpbWUgc28gZW50cnkgaW5saW5pbmcgaXMgZGlzYWJsZWRcbi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xucmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oODAyMik7XG4iXSwic291cmNlUm9vdCI6IiJ9