!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("G43Lib",[],e):"object"==typeof exports?exports.G43Lib=e():t.G43Lib=e()}(self,(function(){return(()=>{"use strict";var __webpack_modules__={1716:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(542),e),o(r(3527),e),o(r(8364),e),o(r(5679),e),o(r(5083),e),o(r(7321),e),o(r(8439),e),o(r(5421),e),o(r(2740),e),o(r(8037),e),o(r(3871),e),o(r(5118),e),o(r(3081),e),o(r(4991),e),o(r(7554),e),o(r(4503),e),o(r(3833),e),o(r(2501),e),o(r(4650),e),o(r(1230),e),o(r(5928),e)},6675:function(t,e){var r=this&&this.__spreadArrays||function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),o=0;for(e=0;e<r;e++)for(var i=arguments[e],a=0,u=i.length;a<u;a++,o++)n[o]=i[a];return n};Object.defineProperty(e,"__esModule",{value:!0}),e.BidirectionalGraph=void 0;var n=function(){function t(t){void 0===t&&(t=function(t,e){return t===e}),this.comparator=t,this.map=new Map}return Object.defineProperty(t.prototype,"numberOfVertices",{get:function(){return this.map.size},enumerable:!1,configurable:!0}),t.prototype.cleanUp=function(){this.map.clear()},t.prototype.getEdges=function(){var t=this,e=[],r=[];return this.map.forEach((function(n,o){n.forEach((function(n){r.some((function(e){return t.comparator(e,n)}))||e.push([o,n])})),r.push(o)})),e},t.prototype.hasVertex=function(t){return this.map.has(t)},t.prototype.removeVertex=function(t,e){var r=this;void 0===e&&(e=!1);var n=this.map.get(t);n&&(e||!n.length?(this.map.delete(t),n.forEach((function(e){r.map.set(e,r.require(e).filter((function(e){return!r.comparator(e,t)})))}))):console.warn("Vertex contains connections"))},t.prototype.removeDisconnectedVertices=function(){var t=this;this.map.forEach((function(e,r){e.length||t.map.delete(r)}))},t.prototype.require=function(t){return this.map.get(t)||[]},t.prototype.addVertex=function(){for(var t=this,e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];e.forEach((function(e){t.map.has(e)||t.map.set(e,[])}))},t.prototype.disconnect=function(t,e){var r=this,n=this.require(t);(null==n?void 0:n.length)&&(this.map.set(t,n.filter((function(t){return!r.comparator(e,t)}))),this.map.set(e,this.require(e).filter((function(e){return!r.comparator(t,e)}))))},t.prototype.connect=function(t){for(var e=this,n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];if(n.length){var i=this.map.get(t)||[],a=n.filter((function(t){return!i.some((function(r){return e.comparator(r,t)}))}));this.map.set(t,r(i,a)),a.forEach((function(n){e.map.set(n,r(e.require(n),[t]))}))}},t.prototype.areConnected=function(t,e){var r=this,n=this.map.get(t);return!!n&&n.some((function(t){return r.comparator(e,t)}))},t}();e.BidirectionalGraph=n},5797:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.FileManager=void 0;var n=r(542),o=function(){function t(){this.input=document.createElement("input"),this.input.setAttribute("type","file"),this.input.setAttribute("value","files"),this.input.setAttribute("class","hide"),this.link=document.createElement("a"),this.link.setAttribute("class","hide"),this.link.setAttribute("href","")}return t.prototype.saveFile=function(t,e,r){void 0===r&&(r=n.FileTypes.TXT),this.link.href=URL.createObjectURL(new Blob([e],{type:r})),this.link.download=t,this.link.click()},t.prototype.saveImage=function(t,e){this.link.href="string"==typeof e?e:e.src,this.link.download=t,this.link.click()},t.prototype.loadImage=function(t){this.input.multiple=!1,this.input.accept="image/*",this.input.onchange=function(e){var r=e.target.files;if(!(r.length<=0)){var n=new FileReader;n.onload=function(){var e=new Image;e.src=n.result,t(e,r[0])},n.readAsDataURL(r[0])}},this.input.click()},t.prototype.loadFile=function(t,e){this.input.multiple=!1,this.input.onchange=function(r){var n=new FileReader,o=r.target.files;o&&o.length>0&&(n.onload=function(){return t(String(n.result),o[0])},n.readAsText(o[0],e))},this.input.click()},t.prototype.loadFiles=function(t){this.input.multiple=!0,this.input.onchange=function(e){return t(e.target.files)},this.input.click()},t.prototype.loadBinaryFile=function(t){this.input.onchange=function(e){var r=new FileReader,n=e.target.files;n&&n.length>0&&(r.onload=function(){return t(r.result,n[0].name)},r.readAsBinaryString(n[0]))},this.input.click()},t}();e.FileManager=o},4673:function(t,e){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.GMap=void 0;var o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.get=function(e,r){return t.prototype.get.call(this,e)||r},e.prototype.getOrCreate=function(e,r){var n=t.prototype.get.call(this,e);return n||(this.set(e,r),r)},e}(Map);e.GMap=o},2740:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),e.GLoggerInstance=e.GLoggerCallbackHolder=e.SimpleColorFormatter=e.GLoggerDefaultFormatter=e.GLoggerPriority=void 0,o(r(5797),e),o(r(3113),e),o(r(4673),e),o(r(1556),e),o(r(3602),e),o(r(927),e),o(r(6675),e);var i=r(4031);Object.defineProperty(e,"GLoggerPriority",{enumerable:!0,get:function(){return i.GLoggerPriority}});var a=r(1703);Object.defineProperty(e,"GLoggerDefaultFormatter",{enumerable:!0,get:function(){return a.GLoggerDefaultFormatter}}),Object.defineProperty(e,"SimpleColorFormatter",{enumerable:!0,get:function(){return a.SimpleColorFormatter}});var u=r(5505);Object.defineProperty(e,"GLoggerCallbackHolder",{enumerable:!0,get:function(){return u.GLoggerCallbackHolder}});var s=r(2875);Object.defineProperty(e,"GLoggerInstance",{enumerable:!0,get:function(){return s.GLoggerInstance}})},1556:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.KeyValueCounter=void 0;var r=function(){function t(){this.data={},this.results=[],this.processed=!1}return t.prototype.add=function(t){t in this.data?this.data[t]++:this.data[t]=1,this.processed&&(this.processed=!1)},t.prototype.addAll=function(t){t.forEach(this.add,this)},t.prototype.getAll=function(){return this.processed||this.process(),this.results},t.prototype.getTopN=function(t){return this.processed||this.process(),this.results.slice(0,t)},t.prototype.getCount=function(){return this.getAll().length},t.prototype.process=function(){for(var t in this.data)this.data.hasOwnProperty(t)&&this.results.push({key:t,count:this.data[t]});this.results.sort((function(t,e){return e.count-t.count})),this.processed=!0},t}();e.KeyValueCounter=r},5505:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GLoggerCallbackHolder=void 0;var n=r(1703),o=r(4031),i=function(){function t(t){this.callbacks=t}return t.prototype.copy=function(){return new t(this.callbacks)},t.createConsoleCallbacks=function(e){var r;return void 0===e&&(e=new n.SimpleColorFormatter),new t(((r={})[o.GLoggerPriority.LOG]=function(t,r){return console.log.apply(console,e.formatColored(o.GLoggerPriority.LOG,t,r))},r[o.GLoggerPriority.WARN]=function(t,r){return console.warn.apply(console,e.formatColored(o.GLoggerPriority.WARN,t,r))},r[o.GLoggerPriority.ERROR]=function(t,r){return console.error.apply(console,e.formatColored(o.GLoggerPriority.ERROR,t,r))},r[o.GLoggerPriority.SUCCESS]=function(t,r){return console.log.apply(console,e.formatColored(o.GLoggerPriority.SUCCESS,t,r))},r[o.GLoggerPriority.VERBOSE]=function(t,r){return console.log.apply(console,e.formatColored(o.GLoggerPriority.VERBOSE,t,r))},r))},t.createArrayCallbacks=function(e,r){var n;void 0===r&&(r={});var i=r.mapper||function(t,e,r){return[t,e,r]},a=function(t,r,n){e.push(i(t,r,n))};return new t(((n={})[o.GLoggerPriority.LOG]=function(t,e){return a(o.GLoggerPriority.LOG,t,e)},n[o.GLoggerPriority.WARN]=function(t,e){return a(o.GLoggerPriority.WARN,t,e)},n[o.GLoggerPriority.ERROR]=function(t,e){return a(o.GLoggerPriority.ERROR,t,e)},n[o.GLoggerPriority.SUCCESS]=function(t,e){return a(o.GLoggerPriority.SUCCESS,t,e)},n[o.GLoggerPriority.VERBOSE]=function(t,e){return a(o.GLoggerPriority.VERBOSE,t,e)},n))},t.prototype.setCallback=function(t,e){this.callbacks[t]=e},t.prototype.set=function(t){var e=this;Object.values(o.GLoggerPriority).forEach((function(r){e.setCallback(r,t.getCallback(r))}))},t.prototype.getCallback=function(t){return this.callbacks[t]},t}();e.GLoggerCallbackHolder=i},1703:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GLoggerDefaultFormatter=e.SimpleColorFormatter=e.ColorGenerator=void 0;var n=r(5928),o=function(){function t(){this.useDifferentColorsForContexts=!0,this.contextColorMap={}}return t.prototype.getColorForContext=function(t,e){if(!this.useDifferentColorsForContexts)return e;if(t in this.contextColorMap)return this.contextColorMap[t];return this.contextColorMap[t]="#"+new Array(6).fill("").map((function(){return n.randomItem("0","1","2","3","4","5","6","7","8","9","A","B","C","D")})).join("")},t}();e.ColorGenerator=o;var i=function(){function t(t){void 0===t&&(t="[{{priority}}] {{context}}: {{data}}"),this.pattern=t,this.colorGenerator=new o,this.colorMap={priority:"red",context:"blue",data:"black",default:"black"}}return t.prototype.format=function(t,e,r){var o=e.map((function(t){switch(typeof t){case"object":return"%o";case"number":return t%1==0?"%d":"%f";default:return"%s"}})),i=[n.template(this.pattern,{priority:"%s",context:"%s",data:o.join(" ")})];return this.pattern.replace(/(priority|context|data)/g,(function(n){switch(n){case"priority":i.push(t);break;case"context":i.push(r||"");break;case"data":i.push.apply(i,e)}return n})),i.join(", ")},t.prototype.formatColored=function(t,e,r){var o=this,i=e.map((function(t){switch(typeof t){case"object":return"%o";case"number":return t%1==0?"%d":"%f";default:return"%s"}})),a=[n.template(this.pattern,{priority:"%c%s%c",context:"%c%s%c",data:"%c"+i.join(" ")+"%c"})];return this.pattern.replace(/(priority|context|data)/g,(function(n){switch(n){case"priority":a.push("color: "+o.colorMap[n]),a.push(t),a.push("color: "+o.colorMap.default);break;case"context":a.push("color: "+o.colorGenerator.getColorForContext(r||"root","black")),a.push(r||""),a.push("color: "+o.colorMap.default);break;case"data":a.push("color: "+o.colorMap[n]),a.push.apply(a,e),a.push("color: "+o.colorMap.default)}return n})),a},t}();e.SimpleColorFormatter=i;var a=function(){function t(){this.showPriority=!1,this.showContext=!0,this.showTime=!1,this.showTimeOffset=!1,this.colors={},this.colorGenerator=new o,this.lastFormatTime=Date.now()}return t.prototype.formatColored=function(t,e,r){var n=[this.getOutputArray(t,e,r).join(" ")];return this.showPriority&&n.push("color: "+(this.colors.priority||"blue")),this.showContext&&r&&n.push("color: "+this.colorGenerator.getColorForContext(r,this.colors.context||"red")),this.showTime&&n.push("color: "+(this.colors.time||"green")),this.showTimeOffset&&n.push("color: "+(this.colors.timeOffset||"green")),n.push("color: "+(this.colors.textColor||"black")),n},t.prototype.format=function(t,e,r){return this.getOutputArray(t,e,r).join(" ")},t.prototype.getOutputArray=function(t,e,r){var o=[];if(this.showPriority&&o.push("["+t+"]"),this.showContext&&r&&o.push(r+":"),this.showTime&&o.push("["+(new Date).toISOString()+"]"),this.showTimeOffset){var i=Date.now();o.push(""+n.dateAgo(i-this.lastFormatTime)),this.lastFormatTime=i}return o.push.apply(o,e.map(String)),o},t}();e.GLoggerDefaultFormatter=a},2875:function(t,e,r){var n=this&&this.__spreadArrays||function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),o=0;for(e=0;e<r;e++)for(var i=arguments[e],a=0,u=i.length;a<u;a++,o++)n[o]=i[a];return n};Object.defineProperty(e,"__esModule",{value:!0}),e.GLoggerInstance=void 0;var o=r(4031),i=function(){function t(t,e){this.loggerCallbacks=t,this.context=e}return t.localPrint=function(t,e,r,n){r.getCallback(t)(e,n)},t.getContextString=function(t){var e;return"string"==typeof t?t:"string"==typeof(null===(e=null==t?void 0:t.constructor)||void 0===e?void 0:e.name)?t.constructor.name:"string"==typeof(null==t?void 0:t.name)?t.name:void 0},t.prototype.setLogCallback=function(t,e){var r;null===(r=this.loggerCallbacks)||void 0===r||r.setCallback(t,e)},t.prototype.setLogCallbacks=function(t){var e;null===(e=this.loggerCallbacks)||void 0===e||e.set(t)},t.prototype.print=function(e,r){void 0===r&&(r="");for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];var i=t.getContextString(r);t.localPrint(e,n,this.loggerCallbacks,i)},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.print.apply(this,n([o.GLoggerPriority.LOG,this.context],t))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.print.apply(this,n([o.GLoggerPriority.WARN,this.context],t))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.print.apply(this,n([o.GLoggerPriority.ERROR,this.context],t))},t}();e.GLoggerInstance=i},4031:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GLoggerPriority=void 0,function(t){t.LOG="LOG",t.WARN="WARN",t.ERROR="ERROR",t.VERBOSE="VERBOSE",t.SUCCESS="SUCCESS"}(e.GLoggerPriority||(e.GLoggerPriority={}))},3113:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),i=this&&this.__spreadArrays||function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),o=0;for(e=0;e<r;e++)for(var i=arguments[e],a=0,u=i.length;a<u;a++,o++)n[o]=i[a];return n};Object.defineProperty(e,"__esModule",{value:!0}),e.GLogger=void 0;var a=r(5505),u=r(2875),s=r(4031),c=function(t){function e(r,n){return void 0===n&&(n=e.staticCallbacks.copy()),t.call(this,n,r)||this}return o(e,t),e.setCallbacks=function(t){e.staticCallbacks.set(t)},e.getLine=function(t){void 0===t&&(t=2);var e=new Error;if(e.stack){var r=e.stack.split("\n")[t].trim().match(/\(.*\)/);if(r&&r[0])return"at "+r[0]}return""},e.createClassLogger=function(t,r){var n,o;return r?r.extends((null==t?void 0:t.name)||(null===(n=null==t?void 0:t.constructor)||void 0===n?void 0:n.name)):new e(null===(o=null==t?void 0:t.constructor)||void 0===o?void 0:o.name)},e.createArrayLogger=function(t,r,n){return new e(r,a.GLoggerCallbackHolder.createArrayCallbacks(t,{mapper:n}))},e.print=function(t,r){void 0===r&&(r="");for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];var i=e.getContextString(r),a=i&&i.match(e.skipRegexp);a||u.GLoggerInstance.localPrint(t,n,e.staticCallbacks,i)},e.log=function(t,r){e.print.apply(e,i([s.GLoggerPriority.LOG,r],Array.isArray(t)?t:[t]))},e.error=function(t,r){e.print.apply(e,i([s.GLoggerPriority.ERROR,r],Array.isArray(t)?t:[t]))},e.warn=function(t,r){e.print.apply(e,i([s.GLoggerPriority.WARN,r],Array.isArray(t)?t:[t]))},e.prototype.extends=function(t){var r=e.getContextString(this.context),n=e.getContextString(t);return new e(r?r+":"+n:n,this.loggerCallbacks.copy())},e.skipContexts=["renderWorldStatic","CanvasDirective","WorldRendererService","viewport","WorldInputService"],e.skipRegexp=new RegExp(""+e.skipContexts.join("|"),"gi"),e.staticCallbacks=a.GLoggerCallbackHolder.createConsoleCallbacks(),e}(u.GLoggerInstance);e.GLogger=c},3602:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.NumberCounter=void 0;var r=function(){function t(){this.min=1/0,this.max=-1/0,this.sum=0,this.numbers=[]}return t.prototype.add=function(t){this.numbers.push(t),this.min=Math.min(this.min,t),this.max=Math.max(this.max,t),this.sum+=t},t.prototype.getMin=function(){return this.min},t.prototype.getMax=function(){return this.max},t.prototype.getCount=function(){return this.numbers.length},t.prototype.getAverage=function(){return this.sum/this.numbers.length},t.prototype.addAll=function(t){t.forEach(this.add,this)},t}();e.NumberCounter=r},927:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Paginator=void 0;var n=r(8364),o=function(){function t(t,e){void 0===e&&(e=n.GToolsConfig.PAGE_LIMIT),this.allItems=t,this.itemsPerPage=e,this.actualPage=0,this.lastPage=t?Math.floor(t.length/this.itemsPerPage):0,this.actList=this._reCalcList()}return t.prototype.getActualPage=function(){return this.actualPage+1},t.prototype.getPages=function(){return this.lastPage+1},t.prototype.getPagesAround=function(){return this.actualPage<2?[1,2,3,4,5]:this.actualPage>this.lastPage-3?[this.lastPage-3,this.lastPage-2,this.lastPage-1,this.lastPage,this.lastPage+1]:[this.actualPage-1,this.actualPage,this.actualPage+1,this.actualPage+2,this.actualPage+3]},t.prototype.getList=function(){return this.actList},t.prototype.goToNext=function(){return this.actualPage<this.lastPage?(this.actualPage++,this._reCalcList()):this.getList()},t.prototype.gotTo=function(t){return t>=0&&t<=this.lastPage?(this.actualPage=t,this._reCalcList()):this.getList()},t.prototype.goToPrev=function(){return this.actualPage>0?(this.actualPage--,this._reCalcList()):this.getList()},t.prototype.goToFirst=function(){return this.actualPage=0,this._reCalcList()},t.prototype.goToLast=function(){return this.actualPage=this.lastPage,this._reCalcList()},t.prototype._reCalcList=function(){var t=this.actualPage*this.itemsPerPage;return this.actList=this.allItems?this.allItems.slice(t,t+this.itemsPerPage):[],this.actList},t}();e.Paginator=o},3527:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},8364:(t,e)=>{var r;Object.defineProperty(e,"__esModule",{value:!0}),e.GToolsConfig=e.initConfig=e.ClassGToolsConfig=void 0;var n=function(){return r||{URL_API:"",LANGUAGE:"",VERSION:"",PAGE_LIMIT:0}},o=function(){function t(){}return Object.defineProperty(t.prototype,"URL_API",{get:function(){return n().URL_API},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"PAGE_LIMIT",{get:function(){return n().PAGE_LIMIT},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"LANGUAGE",{get:function(){return n().LANGUAGE},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"VERSION",{get:function(){return n().VERSION},enumerable:!1,configurable:!0}),t}();e.ClassGToolsConfig=o,e.initConfig=function(t){r=t},e.GToolsConfig=new o},5601:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ALLOW_IMAGES_ONLY_WITH_ALLOWED_CORS=void 0,e.ALLOW_IMAGES_ONLY_WITH_ALLOWED_CORS=!0},2867:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Deprecated=void 0,e.Deprecated=function(t){return function(e,r,n){var o=e[r];n.value=function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];return console.warn("Method "+e.constructor.name+"."+r+" is deprecated. "+(t||"")),o.apply(e,n)}}}},1430:function(t,e){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.FinalClass=void 0,e.FinalClass=function(t){return function(t){function e(){for(var r=this.constructor,n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];if(r!==e)throw new Error("Cannot inherit from final class");return t.apply(this,n)||this}return n(e,t),e}(t)}},5679:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(2867),e),o(r(1430),e),o(r(3255),e),o(r(3610),e),o(r(6905),e)},3255:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Mapper=void 0,e.Mapper=function(t,e){return void 0===t&&(t={}),void 0===e&&(e="_"),function(r,n){if(delete r[n]){var o={enumerable:!0,configurable:!0},i=e+n;t&&("function"==typeof t.onGet?o.get=function(){return t.onGet&&t.onGet(r[i])}:o.get=function(){return r[i]},"function"==typeof t.onSet?o.set=function(e){return r[i]=t.onSet&&t.onSet(e)}:o.set=function(t){return r[i]=t}),Object.defineProperty(r,n,o)}}}},3610:function(t,e){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Singleton=void 0;var o={};e.Singleton=function(t){var e=t.name;return function(t){function r(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];var i=t.apply(this,r)||this;if(o[e])throw new Error("Instance of "+e+" is already created");return o[e]=i,i}return n(r,t),r}(t)}},6905:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Watch=void 0,e.Watch=function(t,e){var r=e&&e.prefix||"_";return function(n,o){delete n[o]&&Object.defineProperty(n,o,{get:function(){return n[r+o]},set:function(e){t&&(n[r+o]=t(e,n[r+o])),n[r+o]=e},enumerable:!e||"boolean"!=typeof e.enumerable||e.enumerable,configurable:!e||"boolean"!=typeof e.configurable||e.configurable})}}},5083:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),e.CanvasManager=void 0;var i=r(8037),a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.clearCanvas=function(t){t.clearRect(0,0,t.canvas.width,t.canvas.height)},e.setCanvasSize=function(t,e,r){void 0===e&&(e=window.innerWidth),void 0===r&&(r=window.innerHeight),t.width=e,t.height=r},e.setShadow=function(t,e,r,n,o){t.shadowColor=n,t.shadowBlur=o,t.shadowOffsetX=e,t.shadowOffsetY=r},e.imageToCanvas=function(t){if("undefined"==typeof document)throw new i.NotBrowserException;var e=document.createElement("canvas");e.width=t.width,e.height=t.height;var r=e.getContext("2d");return r&&r.drawImage(t,0,0),e},e.setLineDash=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];"function"==typeof t.setLineDash&&t.setLineDash(e)},e.calcTextWidth=function(t,e,r){return r&&(t.font=r),t.measureText(e).width},e.setTransformRaw=function(t,e,r,n,o){void 0===o&&(o=n),t.setTransform(n,0,0,o,e,r)},e.canvasToImage=function(t,e){void 0===e&&(e="image/png");var r=new Image;return r.src=t.toDataURL(e),r.width=t.width,r.height=t.height,r},e}(function(){function t(t,e,r){if(t instanceof HTMLCanvasElement)this.localCanvas=t,e&&r&&this.setCanvasSize(e,r);else if(t instanceof HTMLImageElement)this.localCanvas=a.imageToCanvas(t);else{if("undefined"==typeof document)throw new i.NotBrowserException;this.localCanvas=document.createElement("canvas"),t&&e&&this.setCanvasSize(t,e)}this.localContext=this.localCanvas.getContext("2d")}return Object.defineProperty(t.prototype,"canvas",{get:function(){return this.localCanvas},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"context",{get:function(){return this.localContext},enumerable:!1,configurable:!0}),t.prototype.setTransform=function(t){this.setTransformRaw(t.offset.x,t.offset.y,t.scale)},t.prototype.setTransformRaw=function(t,e,r,n){void 0===n&&(n=r),this.localContext&&a.setTransformRaw(this.localContext,t,e,r,n)},t.prototype.getImage=function(){return a.canvasToImage(this.localCanvas)},t.prototype.setShadow=function(t,e,r,n){this.localContext&&a.setShadow(this.localContext,t,e,r,n)},t.prototype.show=function(t){void 0===t&&(t="image/png"),window.open(this.localCanvas.toDataURL(t),"_blank")},t.prototype.clearCanvas=function(){this.localContext&&a.clearCanvas(this.localContext)},t.prototype.setCanvasSize=function(t,e){void 0===t&&(t=window.innerWidth),void 0===e&&(e=window.innerHeight),a.setCanvasSize(this.localCanvas,t,e)},t.prototype.appendTo=function(t){return t.appendChild(this.localCanvas),t},t}());e.CanvasManager=a},7321:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CanvasUtils=void 0;var n=r(5083);function o(t,e){e?n.CanvasManager.setShadow(t,e.x,e.y,e.color,e.blur):n.CanvasManager.setShadow(t,0,0,"black",0)}function i(t){t.shadow&&o(t.ctx,t.shadow),t.bgImage?(t.ctx.save(),t.ctx.clip(),t.bgImage instanceof HTMLImageElement?t.ctx.drawImage(t.bgImage,t.x,t.y,t.width,t.height):t.ctx.drawImage(t.bgImage.img,t.bgImage.x,t.bgImage.y,t.bgImage.w,t.bgImage.h,t.x,t.y,t.width,t.height),t.ctx.restore()):t.fill&&(t.ctx.fillStyle=t.fillColor,t.ctx.fill()),t.shadow&&o(t.ctx),t.ctx.lineCap=t.lineCap,t.ctx.lineJoin=t.joinType,"function"==typeof t.ctx.setLineDash&&t.ctx.setLineDash(t.lineDash),t.draw&&(t.ctx.lineWidth=t.borderWidth,t.ctx.strokeStyle=t.borderColor,t.ctx.stroke())}function a(t,e){var r=$.extend(t,e),n=function(t,e,n){if(void 0!==r[t]){var o=r[t];isNaN(o)&&Array.isArray(o)?(r[e]=o[0],r[n]=o[1]):(r[e]=o,r[n]=o)}};return n("size","width","size"),n("position","x","y"),r.center&&(r.x-=r.width>>1,r.y-=r.height>>1),r}function u(t,e){return void 0!==t.x&&void 0!==t.y||void 0!==t.position||console.error("MSG_TRY_DRAW_WITHOUT_POSITION: "+e),void 0!==t.width&&void 0!==t.height||void 0!==t.size||console.error("MSG_TRY_DRAW_WITHOUT_SIZE: "+e),(t.width<=0||t.height<=0)&&console.error("MSG_TRY_DRAW_WITH_NEG_POSITION: "+e),function(t){return{borderColor:"black",borderWidth:1,center:!1,ctx:t.ctx,draw:void 0!==t.borderColor||void 0!==t.borderWidth,endAngle:2*Math.PI,fill:void 0!==t.fillColor,fillColor:"white",height:0,joinType:"bevel",lineCap:"round",lineDash:[],offset:null,radius:{tl:0,tr:0,br:0,bl:0},startAngle:0,width:0,x:0,y:0}}(t)}var s=function(){function t(){}return t.doArc=function(t){var e=a(u(t,"Arc"),t);e.ctx.beginPath(),"function"==typeof e.ctx.ellipse?e.ctx.ellipse(e.x+(e.width>>1),e.y+(e.height>>1),e.width>>1,e.height>>1,0,e.startAngle,e.endAngle):e.ctx.rect(e.x+(e.width>>1),e.y+(e.height>>1),e.width>>1,e.height>>1),i(e)},t.doRect=function(t){var e=u(t,"Rect");if(void 0!==t.radius)if(isNaN(t.radius))for(var r in e.radius)e.radius.hasOwnProperty(r)&&(t.radius[r]=t.radius[r]||e.radius[r]);else t.radius={bl:t.radius,br:t.radius,tl:t.radius,tr:t.radius};var n=a(e,t);n.ctx.beginPath(),n.ctx.moveTo(n.x+n.radius.tl,n.y),n.ctx.lineTo(n.x+n.width-n.radius.tr,n.y),n.ctx.quadraticCurveTo(n.x+n.width,n.y,n.x+n.width,n.y+n.radius.tr),n.ctx.lineTo(n.x+n.width,n.y+n.height-n.radius.br),n.ctx.quadraticCurveTo(n.x+n.width,n.y+n.height,n.x+n.width-n.radius.br,n.y+n.height),n.ctx.lineTo(n.x+n.radius.bl,n.y+n.height),n.ctx.quadraticCurveTo(n.x,n.y+n.height,n.x,n.y+n.height-n.radius.bl),n.ctx.lineTo(n.x,n.y+n.radius.tl),n.ctx.quadraticCurveTo(n.x,n.y,n.x+n.radius.tl,n.y),n.ctx.closePath(),i(n)},t}();e.CanvasUtils=s},8439:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.DomGet=void 0;var r="undefined"!=typeof document?document:null,n=function(){function t(){}return t.setContext=function(t){r=t},t.byClass=function(t,e){return void 0===e&&(e=r),e.getElementsByClassName(t)},t.byLink=function(t,e){return void 0===e&&(e=r),e.querySelectorAll('a[attr="'+t+'"]')},t.byId=function(t,e){return void 0===e&&(e=r),e.getElementById(t)},t.byName=function(t,e){return void 0===e&&(e=r),e.getElementsByName(t)},t.byTag=function(t,e){return void 0===e&&(e=r),e.getElementsByTagName(t)},t}();e.DomGet=n},5421:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},8031:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Button=void 0,function(t){t[t.LEFT=0]="LEFT",t[t.MIDDLE=1]="MIDDLE",t[t.RIGHT=2]="RIGHT",t[t.BACK=3]="BACK",t[t.FORWARD=4]="FORWARD"}(e.Button||(e.Button={}))},3982:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Days=void 0,function(t){t.MON="MON",t.TUE="TUE",t.WED="WED",t.THU="THU",t.FRI="FRI",t.SAT="SAT",t.SUN="SUN"}(e.Days||(e.Days={}))},3115:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Encodings=void 0,function(t){t.UTF8="utf8",t.UTF16="utf16",t.UNICODE="unicode",t.ASCII="ascii",t.UCS2="ucs2"}(e.Encodings||(e.Encodings={}))},5440:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.FileTypes=void 0,function(t){t.CSS="text/css",t.HTML="text/html",t.JS="application/javascript",t.MP3="audio/mpeg",t.MP4="video/mp4",t.OGG="application/ogg",t.OGV="video/ogg",t.OGA="audio/ogg",t.TXT="text/plain",t.WAV="audio/x-wav",t.WEBM="video/webm"}(e.FileTypes||(e.FileTypes={}))},8034:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.HttpStatusCodes=void 0,function(t){t[t.CONTINUE=100]="CONTINUE",t[t.SWITCHING_PROTOCOLS=101]="SWITCHING_PROTOCOLS",t[t.OK=200]="OK",t[t.CREATED=201]="CREATED",t[t.ACCEPTED=202]="ACCEPTED",t[t.NON_AUTHORITATIVE_INFORMATION=203]="NON_AUTHORITATIVE_INFORMATION",t[t.NO_CONTENT=204]="NO_CONTENT",t[t.RESET_CONTENT=205]="RESET_CONTENT",t[t.PARTIAL_CONTENT=206]="PARTIAL_CONTENT",t[t.MULTIPLE_CHOICES=300]="MULTIPLE_CHOICES",t[t.MOVED_PERMANENTLY=301]="MOVED_PERMANENTLY",t[t.FOUND=302]="FOUND",t[t.SEE_OTHER=303]="SEE_OTHER",t[t.NOT_MODIFIED=304]="NOT_MODIFIED",t[t.USE_PROXY=305]="USE_PROXY",t[t.TEMPORARY_REDIRECT=307]="TEMPORARY_REDIRECT",t[t.BAD_REQUEST=400]="BAD_REQUEST",t[t.UNAUTHORIZED=401]="UNAUTHORIZED",t[t.PAYMENT_REQUIRED=402]="PAYMENT_REQUIRED",t[t.FORBIDDEN=403]="FORBIDDEN",t[t.NOT_FOUND=404]="NOT_FOUND",t[t.METHOD_NOT_ALLOWED=405]="METHOD_NOT_ALLOWED",t[t.NOT_ACCEPTABLE=406]="NOT_ACCEPTABLE",t[t.PROXY_AUTHENTICATION_REQUIRED=407]="PROXY_AUTHENTICATION_REQUIRED",t[t.REQUEST_TIMEOUT=408]="REQUEST_TIMEOUT",t[t.CONFLICT=409]="CONFLICT",t[t.GONE=410]="GONE",t[t.LENGTH_REQUIRED=411]="LENGTH_REQUIRED",t[t.PRECONDITION_FAILED=412]="PRECONDITION_FAILED",t[t.REQUEST_ENTITY_TOO_LARGE=413]="REQUEST_ENTITY_TOO_LARGE",t[t.REQUEST_URI_TOO_LONG=414]="REQUEST_URI_TOO_LONG",t[t.UNSUPPORTED_MEDIA_TYPE=415]="UNSUPPORTED_MEDIA_TYPE",t[t.REQUESTED_RANGE_NOT_SATISFIABLE=416]="REQUESTED_RANGE_NOT_SATISFIABLE",t[t.EXPECTATION_FAILED=417]="EXPECTATION_FAILED",t[t.UNPROCESSABLE_ENTITY=422]="UNPROCESSABLE_ENTITY",t[t.TOO_MANY_REQUESTS=429]="TOO_MANY_REQUESTS",t[t.INTERNAL_SERVER_ERROR=500]="INTERNAL_SERVER_ERROR",t[t.NOT_IMPLEMENTED=501]="NOT_IMPLEMENTED",t[t.BAD_GATEWAY=502]="BAD_GATEWAY",t[t.SERVICE_UNAVAILABLE=503]="SERVICE_UNAVAILABLE",t[t.GATEWAY_TIMEOUT=504]="GATEWAY_TIMEOUT",t[t.HTTP_VERSION_NOT_SUPPORTED=505]="HTTP_VERSION_NOT_SUPPORTED"}(e.HttpStatusCodes||(e.HttpStatusCodes={}))},542:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(8031),e),o(r(3982),e),o(r(3115),e),o(r(5440),e),o(r(8034),e),o(r(6788),e)},6788:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.KeysOld=e.Keys=void 0,function(t){t.ARROW_UP="ArrowUp",t.ARROW_DOWN="ArrowDown",t.ARROW_LEFT="ArrowLeft",t.ARROW_RIGHT="ArrowRight",t.DELETE="Delete",t.CONTROL="ControlLeft",t.SHIFT="ShiftLeft",t.PAGE_UP="PageUp",t.PAGE_DOWN="PageDown",t.ESCAPE="Escape",t.SPACE="Space",t.ENTER="Enter",t.W="KeyW",t.F="KeyF",t.A="KeyA",t.P="KeyP",t.S="KeyS",t.D="KeyD",t.R="KeyR",t.Y="KeyY",t.Z="KeyZ",t.X="KeyX",t.V="KeyV",t.C="KeyC",t.O="KeyO",t.H="KeyH",t.L="KeyL",t.DIGIT_1="Digit1",t.DIGIT_2="Digit2",t.DIGIT_3="Digit3",t.DIGIT_4="Digit4",t.DIGIT_5="Digit5",t.DIGIT_6="Digit6",t.DIGIT_7="Digit7",t.DIGIT_8="Digit8",t.DIGIT_9="Digit9",t.DIGIT_0="Digit0"}(e.Keys||(e.Keys={}));var r=function(){function t(){}return t.ENTER=13,t.TAB=9,t.W=87,t.A=65,t.S=83,t.D=68,t.Q=81,t.E=69,t.F=70,t.LCONTROL=17,t.ESCAPE=27,t.LALT=18,t.LSHIFT=16,t.SPACE=32,t.ARROW_UP=38,t.ARROW_DOWN=40,t.ARROW_RIGHT=39,t.ARROW_LEFT=37,t}();e.KeysOld=r},8037:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(1351),e),o(r(1566),e),o(r(8650),e),o(r(9089),e),o(r(6162),e),o(r(9043),e)},9089:function(t,e){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.MissingParameterError=void 0;var o=function(t){function e(e){return t.call(this,"Parameter "+e+" must be defined")||this}return n(e,t),e}(Error);e.MissingParameterError=o},6162:function(t,e){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.NoDatabaseConnectionError=void 0;var o=function(t){function e(){return t.call(this,"Database connection is no established")||this}return n(e,t),e}(Error);e.NoDatabaseConnectionError=o},1351:function(t,e){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.NotBrowserException=void 0;var o=function(t){function e(r){var n=t.call(this,"App is not running in browser"+function(t){return t?": "+t:""}(r)+"!")||this;return Object.setPrototypeOf(n,e.prototype),n}return n(e,t),e}(Error);e.NotBrowserException=o},1566:function(t,e){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.NullPointerException=void 0;var o=function(t){function e(r){var n=t.call(this,"Null pointer exception at line"+("string"==typeof r?": "+r:"!"))||this;return Object.setPrototypeOf(n,e.prototype),n}return n(e,t),e}(Error);e.NullPointerException=o},8650:function(t,e){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.WrongParameterException=void 0;var o=function(t){function e(r){var n=t.call(this,"Wrong parameter exception at line"+("string"==typeof r?": "+r:"!"))||this;return Object.setPrototypeOf(n,e.prototype),n}return n(e,t),e}(Error);e.WrongParameterException=o},9043:function(t,e){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.WrongTypeException=void 0;var o=function(t){function e(r,n){var o=t.call(this,"Wrong type exception at line. "+typeof r+" must be "+r+("string"==typeof n?": "+n:"!"))||this;return Object.setPrototypeOf(o,e.prototype),o}return n(e,t),e}(Error);e.WrongTypeException=o},3607:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(1716),e)},3081:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(7533),e),o(r(7153),e),o(r(5015),e),o(r(9281),e),o(r(5079),e),o(r(5870),e),o(r(2343),e),o(r(1433),e),o(r(6122),e)},6122:function(t,e){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Mat4=e.SimpleMat4=void 0;var o=function(){function t(t){this.data=t}return t.prototype.set=function(t,e,r){this.data[t][e]=r},t.prototype.get=function(t,e){return this.data[t][e]},t}();e.SimpleMat4=o;var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.createViewMatrix=function(){},e.createTransformMatrix=function(){},e.createPerspectiveMatrix=function(){},e.createOrthographicMatrix=function(){},e}(o);e.Mat4=i},7533:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},7153:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},5015:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},9281:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},5079:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Vector2=void 0;var n=r(7554),o=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e}return Object.defineProperty(t,"ZERO",{get:function(){return new t(0,0)},enumerable:!1,configurable:!0}),Object.defineProperty(t,"UP",{get:function(){return new t(0,1)},enumerable:!1,configurable:!0}),Object.defineProperty(t,"LEFT",{get:function(){return new t(-1,0)},enumerable:!1,configurable:!0}),Object.defineProperty(t,"BOTTOM",{get:function(){return new t(0,-1)},enumerable:!1,configurable:!0}),Object.defineProperty(t,"RIGHT",{get:function(){return new t(1,0)},enumerable:!1,configurable:!0}),Object.defineProperty(t,"ONE",{get:function(){return new t(1,1)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"avg",{get:function(){return this.sum/2},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"sum",{get:function(){return this.x+this.y},enumerable:!1,configurable:!0}),t.fromArray=function(e){return new t(e[0],e[1])},Object.defineProperty(t.prototype,"length",{get:function(){return t.size(this)},enumerable:!1,configurable:!0}),t.equals=function(t,e){return t===e||t.x===e.x&&t.y===e.y},t.sub=function(e,r,n){return void 0===n&&(n=new t),n.setData(e.x-r.x,e.y-r.y)},t.dot=function(t,e){return t.x*e.x+t.y*e.y},t.lerp=function(e,r,n){var o=t.sub(r,e);return t.mulNum(o,n,o).add(e)},t.getAbs=function(e,r){return void 0===r&&(r=new t),r.setData(Math.abs(e.x),Math.abs(e.y))},t.from=function(e,r){return void 0===r&&(r=e),new t(e,r)},t.isVisible=function(t,e,r,n,o,i){return r-Math.atan2(i-e,o-t)<=n},t.createOutlineRange=function(t){var e={x:1/0,y:1/0},r={x:-1/0,y:-1/0};return t.forEach((function(t){t.x<e.x&&(e.x=t.x),t.y<e.y&&(e.y=t.y),t.x>r.x&&(r.x=t.x),t.y>r.y&&(r.y=t.y)})),new n.Range(e,r)},t.angleBetweenPoints=function(t,e,r,n,o,i){return Math.atan2(n-e,r-t)-Math.atan2(i-e,o-t)},t.isVector=function(t){return t&&!isNaN(t.x)&&!isNaN(t.y)},t.sum=function(e,r,n){return void 0===n&&(n=new t),n.setData(e.x+r.x,e.y+r.y)},t.min=function(e,r,n){return void 0===n&&(n=new t),n.setData(Math.min(e.x,r.x),Math.min(e.y,r.y))},t.max=function(e,r,n){return void 0===n&&(n=new t),n.setData(Math.max(e.x,r.x),Math.max(e.y,r.y))},t.dist=function(t,e){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))},t.size=function(t){return Math.sqrt(t.x*t.x+t.y*t.y)},t.fromVec=function(e){return new t(e.x,e.y)},t.prototype.isZero=function(){return 0===this.x&&0===this.y},t.prototype.clone=function(){return new t(this.x,this.y)},t.prototype.getNormalized=function(e){return void 0===e&&(e=this.clone()),t.normalize(this,e)},t.prototype.normalize=function(){var e=t.size(this);return this.x/=e,this.y/=e,this},t.normalize=function(e,r){void 0===r&&(r=e);var n=t.size(e);return r.x=e.x/n,r.y=e.y/n,r},t.mulNum=function(e,r,n){return void 0===n&&(n=new t),n.setData(e.x*r,e.y*r)},t.addNum=function(e,r,n){return void 0===n&&(n=new t),n.setData(e.x+r,e.y+r)},t.prototype.mul=function(t){return"number"==typeof t?(this.x*=t,this.y*=t):(this.x*=t.x,this.y*=t.y),this},t.prototype.add=function(t){return"number"==typeof t?(this.x+=t,this.y+=t):(this.x+=t.x,this.y+=t.y),this},t.prototype.sub=function(t){return"number"==typeof t?(this.x-=t,this.y-=t):(this.x-=t.x,this.y-=t.y),this},t.prototype.div=function(t){return"number"==typeof t?(this.x/=t,this.y/=t):(this.x/=t.x,this.y/=t.y),this},t.prototype.setData=function(t,e){return this.x=t,this.y=e,this},t.prototype.set=function(t){return this.x=t.x,this.y=t.y,this},t}();e.Vector2=o},5870:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Vector2f=void 0;var r=function(t,e,r){"number"==typeof r?t(e,r):"number"==typeof e?t(e,e):t(e.x,e.y)},n=function(){function t(t,e){this.y=0,this.x=0,this.x=t,this.y=e}return t.prototype.set=function(t,e){var n=this;return r((function(t,e){n.x=t,n.y=e}),t,e),this},t.prototype.add=function(t,e){var n=this;return r((function(t,e){n.x+=t,n.y+=e}),t,e),this},t.prototype.div=function(t,e){var n=this;return r((function(t,e){n.x/=t,n.y/=e}),t,e),this},t.prototype.mul=function(t,e){var n=this;return r((function(t,e){n.x*=t,n.y*=e}),t,e),this},t.prototype.sub=function(t,e){var n=this;return r((function(t,e){n.x-=t,n.y-=e}),t,e),this},t}();e.Vector2f=n},2343:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Vector3=void 0;var n=r(5079),o=function(){function t(t,e,r){void 0===t&&(t=0),void 0===e&&(e=0),void 0===r&&(r=0),this.x=t,this.y=e,this.z=r}return Object.defineProperty(t,"UP",{get:function(){return new t(0,1,0)},enumerable:!1,configurable:!0}),Object.defineProperty(t,"ZERO",{get:function(){return new t(0,0,0)},enumerable:!1,configurable:!0}),Object.defineProperty(t,"ONE",{get:function(){return new t(1,1,1)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"avg",{get:function(){return(this.x+this.y+this.z)/3},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"length",{get:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},enumerable:!1,configurable:!0}),t.equals=function(t,e){return t===e||t.x===e.x&&t.y===e.y&&t.z===e.z},t.sub=function(e,r){return new t(e.x-r.x,e.y-r.y,e.z-r.z)},t.add=function(e,r){return new t(e.x+r.x,e.y+r.y,e.z+r.z)},t.sum=function(e,r,n){return void 0===n&&(n=new t),n.x=e.x+r.x,n.y=e.y+r.y,n.z=e.z+r.z,n},t.sumNum=function(e,r,n){return void 0===n&&(n=new t),n.x=e.x+r,n.y=e.y+r,n.z=e.z+r,n},t.dot=function(t,e){return t.x*e.x+t.y*e.y+t.z*e.z},t.mul=function(e,r,n){return void 0===n&&(n=new t),n.x=e.x*r.x,n.y=e.y*r.y,n.z=e.z*r.z,n},t.mulNum=function(e,r,n){return void 0===n&&(n=new t),n.x=e.x*r,n.y=e.y*r,n.z=e.z*r,n},t.min=function(e,r,n){return void 0===n&&(n=new t),n.x=Math.min(e.x,r.x),n.y=Math.min(e.y,r.y),n.z=Math.min(e.z,r.z),n},t.max=function(e,r,n){return void 0===n&&(n=new t),n.x=Math.max(e.x,r.x),n.y=Math.max(e.y,r.y),n.z=Math.max(e.z,r.z),n},t.createFromSphericalCoords=function(e,r,n){var o=Math.sin(r)*e;return new t(o*Math.sin(n),Math.cos(r)*e,o*Math.cos(n))},t.distSqrt=function(t,e){return Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)+Math.pow(t.z-e.z,2)},t.dist=function(e,r){return Math.sqrt(t.distSqrt(e,r))},t.normalize=function(t){var e=Math.sqrt(t.x*t.x+t.y*t.y+t.z*t.z);return t.x/=e,t.y/=e,t.z/=e,t},Object.defineProperty(t.prototype,"xy",{get:function(){return new n.Vector2(this.x,this.y)},enumerable:!1,configurable:!0}),t.from=function(e,r,n){return void 0===r&&(r=e),void 0===n&&(n=e),new t(e,r,n)},t.fromVec=function(e){return new t(e.x,e.y,e.z)},t.fromArray=function(e){return new t(e[0],e[1],e[2])},t.isVector=function(t){return t&&!isNaN(t.x)&&!isNaN(t.y)&&!isNaN(t.z)},t.prototype.toArray=function(){return[this.x,this.y,this.z]},t.prototype.sum=function(){return this.x+this.y+this.z},t.prototype.getNormalized=function(){return this.clone().normalize()},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.prototype.normalize=function(){var t=this.length;return this.x/=t,this.y/=t,this.z/=t,this},t.prototype.mul=function(t){return"number"==typeof t?(this.x*=t,this.y*=t,this.z*=t):(this.x*=t.x,this.y*=t.y,this.z*=t.z),this},t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this},t.prototype.cross=function(e){return new t(this.y*e.z-this.z*e.y,this.z*e.x-this.x*e.z,this.x*e.y-this.y*e.x)},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y+this.z*t.z},t.prototype.sub=function(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this},t.prototype.setData=function(t,e,r){return this.x=t,this.y=e,this.z=r,this},t.prototype.set=function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this},Object.defineProperty(t.prototype,"yx",{get:function(){return new n.Vector2(this.y,this.x)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"yz",{get:function(){return new n.Vector2(this.y,this.z)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"zy",{get:function(){return new n.Vector2(this.z,this.y)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"xz",{get:function(){return new n.Vector2(this.x,this.z)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"zx",{get:function(){return new n.Vector2(this.z,this.x)},enumerable:!1,configurable:!0}),t}();e.Vector3=o},1433:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Vector4=void 0;var r=function(){function t(t,e,r,n){void 0===t&&(t=0),void 0===e&&(e=0),void 0===r&&(r=0),void 0===n&&(n=0),this.x=t,this.y=e,this.z=r,this.w=n}return Object.defineProperty(t,"ZERO",{get:function(){return new t(0,0,0,0)},enumerable:!1,configurable:!0}),Object.defineProperty(t,"ONE",{get:function(){return new t(1,1,1,1)},enumerable:!1,configurable:!0}),t.fromArray=function(e){return new t(e[0],e[1],e[2],e[3])},t.from=function(e,r,n,o){return void 0===r&&(r=e),void 0===n&&(n=r),void 0===o&&(o=n),new t(e,r,n,o)},Object.defineProperty(t.prototype,"avg",{get:function(){return(this.x+this.y+this.z+this.w)/4},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"length",{get:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},enumerable:!1,configurable:!0}),t.equals=function(t,e){return t===e||t.x===e.x&&t.y===e.y&&t.z===e.z&&t.w===e.w},t.min=function(e,r){return new t(Math.min(e.x,r.x),Math.min(e.y,r.y),Math.min(e.z,r.z),Math.min(e.w,r.w))},t.max=function(e,r){return new t(Math.max(e.x,r.x),Math.max(e.y,r.y),Math.max(e.z,r.z),Math.max(e.w,r.w))},t.dist=function(t,e){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)+Math.pow(t.z-e.z,2)+Math.pow(t.w-e.w,2))},t.normalize=function(t){var e=Math.sqrt(t.x*t.x+t.y*t.y+t.z*t.z+t.w*t.w);return t.x/=e,t.y/=e,t.z/=e,t.w/=e,t},t.isVector=function(t){return t&&!isNaN(t.x)&&!isNaN(t.y)&&!isNaN(t.z)&&!isNaN(t.w)},t.prototype.toArray=function(){return[this.x,this.y,this.z,this.w]},t.prototype.getNormalized=function(){return this.clone().normalize()},t.prototype.clone=function(){return new t(this.x,this.y,this.z,this.w)},t.prototype.normalize=function(){var t=this.length;return this.x/=t,this.y/=t,this.z/=t,this.w/=t,this},t.prototype.mul=function(t){return"number"==typeof t?(this.x*=t,this.y*=t,this.z*=t,this.w*=t):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w),this},t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this},t.prototype.sub=function(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this},t.prototype.setData=function(t,e,r,n){return this.x=t,this.y=e,this.z=r,this.w=n,this},t.prototype.set=function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this},t}();e.Vector4=r},4795:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ajax=void 0;var r=function(t){this.ajaxHandler=t};e.ajax=function(t){var e=t.method,n=void 0===e?"GET":e,o=t.url,i=t.onResponse,a=t.content,u=t.headers,s=void 0===u?{}:u,c=new XMLHttpRequest;return c.onreadystatechange=function(){4!==c.readyState||200!==c.status&&201!==c.status||"function"==typeof i&&i(c.responseText)},c.open(n,o,!0),Object.entries(s).forEach((function(t){return c.setRequestHeader(t[0],t[1])})),c.send(a),new r(c)}},2515:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.formatFileSize=void 0;var r=["B","KB","MB","GB","TB","PB","EB","ZB","YB"],n=["Bytes","Kilobytes","Megabytes","Gigabytes","Pettabytes","Exabytes","Zettabytes","Yottabytes"];e.formatFileSize=function(t,e){void 0===e&&(e=!1);var o=e?n:r,i=Math.round(Math.log(t)/Math.log(1024));i=Math.min(i,o.length-1);var a=t/Math.pow(1024,i),u=Math.round(100*a)/100;return a?u+" "+o[i]:"0"}},5118:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(680),e),o(r(4795),e),o(r(2515),e),o(r(7021),e),o(r(7525),e)},7525:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getAsNumber=e.getAsString=void 0;e.getAsString=function(t){if("string"!=typeof t)throw new Error("Variable with value "+t+" is not a string");return t};e.getAsNumber=function(t){if("number"!=typeof t)throw new Error("Variable with value "+t+" is not a number");return t}},7021:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.simpleLoop=void 0,e.simpleLoop=function(t,e){var r,n;void 0===e&&(e=60);var o=1e3/e,i=function(e){var a=e-r;r=e,n=requestAnimationFrame(i),t(a/o||1)};return n=requestAnimationFrame(i),{stop:function(){return cancelAnimationFrame(n)}}}},680:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SlovakStemmer=void 0;var r=function(){function t(){}return t.steme=function(t){var e,r,n,o=(e=function(t){var e=t.length;if(e>9&&t.endsWith("ejšieho")||t.endsWith("ejšiemu"))return t.substring(0,e-7);if(e>8&&(t.endsWith("ejších")||t.endsWith("encoch")||t.endsWith("ejšími")||t.endsWith("encami")))return t.substring(0,e-6);if(e>7&&(t.endsWith("ejšia")||t.endsWith("atami")||t.endsWith("atách")||t.endsWith("eniec")||t.endsWith("encom")||t.endsWith("ejšom")||t.endsWith("ejším")||t.endsWith("ejšej")||t.endsWith("ejšou")||t.endsWith("ejšiu")||t.endsWith("ejšie")))return t.substring(0,e-5);if(e>6&&(t.endsWith("eťom")||t.endsWith("iami")||t.endsWith("atám")||t.endsWith("aťom")||t.endsWith("ovia")||t.endsWith("iach")||t.endsWith("atám")||t.endsWith("ence")||t.endsWith("ieho")||t.endsWith("iemu")||t.endsWith("ieme")||t.endsWith("iete")||t.endsWith("ejší")||t.endsWith("enie")))return t.substring(0,e-4);if(e>5&&(t.endsWith("ich")||t.endsWith("eho")||t.endsWith("ych")||t.endsWith("ích")||t.endsWith("ého")||t.endsWith("emi")||t.endsWith("ému")||t.endsWith("emu")||t.endsWith("ími")||t.endsWith("imi")||t.endsWith("ách")||t.endsWith("ých")||t.endsWith("ami")||t.endsWith("ovi")||t.endsWith("ieť")||t.endsWith("ieš")||t.endsWith("ejú")||t.endsWith("ajú")||t.endsWith("ujú")||t.endsWith("ejú")||t.endsWith("eme")||t.endsWith("íte")||t.endsWith("íme")||t.endsWith("ými")||t.endsWith("ymi")||t.endsWith("ach")||t.endsWith("iam")||t.endsWith("iac")||t.endsWith("ite")||t.endsWith("ili")||t.endsWith("ila")||t.endsWith("ilo")||t.endsWith("ime")||t.endsWith("och")))return t.substring(0,e-3);if(e>4&&(t.endsWith("ím")||t.endsWith("ám")||t.endsWith("am")||t.endsWith("us")||t.endsWith("ým")||t.endsWith("ym")||t.endsWith("mi")||t.endsWith("ou")||t.endsWith("om")||t.endsWith("ej")||t.endsWith("ov")||t.endsWith("ia")||t.endsWith("ie")||t.endsWith("iu")||t.endsWith("im")||t.endsWith("ho")||t.endsWith("mu")||t.endsWith("me")||t.endsWith("te")||t.endsWith("ať")||t.endsWith("aš")||t.endsWith("úť")||t.endsWith("iť")||t.endsWith("íš")||t.endsWith("iš")||t.endsWith("il")||t.endsWith("úc")||t.endsWith("eš")))return t.substring(0,e-2);if(e>3)switch(t[e-1]){case"a":case"e":case"i":case"o":case"u":case"ú":case"y":case"á":case"é":case"í":case"ý":return t.substring(0,e-1)}return t}((n=t).length>6&&n.startsWith("naj")?n.substr(3,n.length):n),(r=e.length)>5&&e.endsWith("in")||e.endsWith("ov")?e.substr(0,r-2):e);return o.length?function(t){var e=t.length;switch(t[e-1]){case"c":case"č":return t.replace(/./g,(function(t,r){return r===e-1?t:"k"}));case"ľ":return t.replace(/./g,(function(t,r){return r===e-1?t:"l"}));case"ň":return t.replace(/./g,(function(t,r){return r===e-1?t:"n"}));case"ť":return t.replace(/./g,(function(t,r){return r===e-1?t:"t"}))}return e>3&&"i"===t[e-3]&&("e"===t[e-2]||"a"===t[e-2]||"u"===t[e-2])?t.replace(/./g,(function(r,n){return n===e-3?t[e-2]:n===e-2?t[e-1]:r})):t}(o):o},t}();e.SlovakStemmer=r},2472:function(t,e,r){var n=this&&this.__spreadArrays||function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),o=0;for(e=0;e<r;e++)for(var i=arguments[e],a=0,u=i.length;a<u;a++,o++)n[o]=i[a];return n};Object.defineProperty(e,"__esModule",{value:!0}),e.Color=void 0;var o=r(5928);function i(t){console.assert(t>=0),console.assert(t<=255)}var a=function(){function t(t,e,r,n){void 0===n&&(n=255),this.red=t,this.green=e,this.blue=r,this.alpha=n,i(t),i(e),i(r),i(n)}return Object.defineProperty(t.prototype,"rgb",{get:function(){return[this.red,this.green,this.blue]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rgbString",{get:function(){return"rgb("+this.red+", "+this.green+", "+this.blue+")"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rgba",{get:function(){return[this.red,this.green,this.blue,this.alpha]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"hex",{get:function(){return o.rgb2hex(Math.floor(this.red),Math.floor(this.green),Math.floor(this.blue))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"int",{get:function(){return o.rgb2int(this.red,this.green,this.blue)},enumerable:!1,configurable:!0}),t.fromHex=function(e){var r=o.hex2rgb(e);return new(t.bind.apply(t,n([void 0],r)))},t.fromInt=function(e){var r=o.int2rgb(e);return new(t.bind.apply(t,n([void 0],r)))},t.prototype.normalized=function(){return this.red>1||this.green>1||this.blue>1||this.alpha>1?new t(this.red/255,this.green/255,this.blue/255,this.alpha/255):this},t.BLACK=new t(0,0,0),t.WHITE=new t(255,255,255),t.GRAY=new t(128,128,128),t.RED=new t(255,0,0),t.GREEN=new t(0,255,0),t.BLUE=new t(0,0,255),t}();e.Color=a},7699:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BinaryHeap=void 0;var r=function(){function t(t){this.scoreFunction=t,this.content=[]}return t.prototype.push=function(t){this.content.push(t),this.sinkDown(this.content.length-1)},t.prototype.pop=function(){var t=this.content[0],e=this.content.pop();return this.content.length>0&&(this.content[0]=e,this.bubbleUp(0)),t},t.prototype.remove=function(t){var e=this.content.indexOf(t),r=this.content.pop();e!==this.content.length-1&&(this.content[e]=r,this.scoreFunction(r)<this.scoreFunction(t)?this.sinkDown(e):this.bubbleUp(e))},t.prototype.size=function(){return this.content.length},t.prototype.rescoreElement=function(t){this.sinkDown(this.content.indexOf(t))},t.prototype.sinkDown=function(t){for(var e=this.content[t];t>0;){var r=(t+1>>1)-1,n=this.content[r];if(!(this.scoreFunction(e)<this.scoreFunction(n)))break;this.content[r]=e,this.content[t]=n,t=r}},t.prototype.bubbleUp=function(t){for(var e=this.content.length,r=this.content[t],n=this.scoreFunction(r);;){var o=t+1<<1,i=o-1,a=null,u=void 0;if(i<e){var s=this.content[i];(u=this.scoreFunction(s))<n&&(a=i)}if(o<e){var c=this.content[o];this.scoreFunction(c)<(null===a?n:u)&&(a=o)}if(null===a)break;this.content[t]=this.content[a],this.content[a]=r,t=a}},t}();e.BinaryHeap=r},7279:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BinarySearchTree=void 0;var r=function(t){this.val=t,this.leftChild=null,this.rightChild=null},n=function(){function t(t){this._length=0,this.root=new r(t)}return Object.defineProperty(t.prototype,"length",{get:function(){return this._length},enumerable:!1,configurable:!0}),t.prototype.clear=function(){this._length=0,this.root=null},t.prototype.addInternally=function(t,e){return null===t?t=new r(e):e<t.val?t.leftChild=this.addInternally(t.leftChild,e):t.rightChild=this.addInternally(t.rightChild,e),this._length++,t},t.prototype.add=function(t){this.root?this.addInternally(this.root,t):this.root=new r(t)},t.prototype.forEach=function(t){this.forEachInternally(this.root,t)},t.prototype.forEachOrderedInternally=function(t,e,r){t&&("PRE"===r&&e(t.val,NaN),this.forEachOrderedInternally(t.leftChild,e,r),r||e(t.val,NaN),this.forEachOrderedInternally(t.rightChild,e,r),"POST"===r&&e(t.val,NaN))},t.prototype.forEachInternally=function(t,e){t&&(this.forEachInternally(t.leftChild,e),e(t.val,NaN),this.forEachInternally(t.rightChild,e))},t.prototype.searchInternally=function(t,e){return t?e===t.val?t:e<t.val?this.searchInternally(t.leftChild,e):this.searchInternally(t.rightChild,e):null},t.prototype.search=function(t){return this.searchInternally(this.root,t)},t.prototype.contains=function(t){return!!this.search(t)},t.prototype.remove=function(t){var e=this.removeInternally(this.root,t);return e&&this._length--,e},t.prototype.removeInternally=function(t,e){var r,n;if(!t)return!1;for(var o=null;t&&t.val!==e;)o=t,t=e<t.val?t.leftChild:t.rightChild;if(null===t)return!1;if(!t.leftChild&&!t.rightChild)return t.val===(null===(r=this.root)||void 0===r?void 0:r.val)?(this.root=null,!0):t.val<o.val?(o.leftChild=null,!0):(o.rightChild=null,!0);if(!t.rightChild)return t.val===(null===(n=this.root)||void 0===n?void 0:n.val)?(this.root=t.leftChild,!0):t.leftChild.val<o.val?(o.leftChild=t.leftChild,!0):(o.rightChild=t.leftChild,!0);if(!t.leftChild)return t.val===this.root.val?(this.root=t.rightChild,!0):t.rightChild.val<o.val?(o.leftChild=t.rightChild,!0):(o.rightChild=t.rightChild,!0);for(var i=t.rightChild;null!==i.leftChild;)i=i.leftChild;var a=i.val;return this.removeInternally(this.root,i.val),t.val=a,!0},t}();e.BinarySearchTree=n},6213:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},2312:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Grid2Accessor=void 0;var n=r(8110),o=function(){function t(t){this.holder=t,this.around4Offsets=[{x:0,y:1},{x:0,y:-1},{x:1,y:0},{x:-1,y:0}],this.around8Offsets=[{x:0,y:1},{x:0,y:-1},{x:1,y:0},{x:-1,y:0},{x:1,y:1},{x:1,y:-1},{x:-1,y:1},{x:-1,y:-1}]}return t.prototype.get=function(t){return this.holder.get(t.x,t.y)},t.prototype.getAccessor=function(t){return new n.Grid2BlockAccessor(this.holder,t)},t.prototype.getRandomAround=function(t,e,r){return this.holder.getAroundData(t.x,t.y,e).sort(Math.random).find(r)},t.prototype.getRandomBlock=function(t){return this.holder.getRandomBlock(t)},t.prototype.checkEveryFromPosAndSize=function(t,e,r){return this.holder.getArea(t,e).every(r)},t}();e.Grid2Accessor=o},8110:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Grid2BlockAccessor=void 0;var r=function(){function t(t,e){this.holder=t,this.position=e}return t.prototype.check=function(t){return t(this.holder.get(this.position.x,this.position.y))},t.prototype.getByOffset=function(e,r){return void 0===e&&(e=0),void 0===r&&(r=0),new t(this.holder,{x:this.position.x+e,y:this.position.y-r})},Object.defineProperty(t.prototype,"top",{get:function(){return this.getByOffset(0,-1)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bottom",{get:function(){return this.getByOffset(0,1)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"left",{get:function(){return this.getByOffset(-1,0)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"right",{get:function(){return this.getByOffset(1,0)},enumerable:!1,configurable:!0}),t}();e.Grid2BlockAccessor=r},166:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Grid2ArrayHolder=void 0;var n=r(3081);var o=function(){function t(t,e){this.size=t,this.data=e}return t.initEmpty=function(e,r,n){void 0===n&&(n=null);for(var o=e*r,i=new Array(o),a=0;a<o;a++)i[a]=n;return new t({x:e,y:r},i)},t.prototype.get=function(t,e){return this.data[this.getIndex(t,e)]},t.prototype.set=function(t,e,r){this.data[this.getIndex(t,e)]=r},t.prototype.getIndex=function(t,e){return function(t,e,r){return e*r+t}(t,e,this.size.x)},t.prototype.getCoordinates=function(t){return function(t,e){return{x:t%e,y:Math.floor(t/e)}}(t,this.size.x)},t.prototype.getAroundData=function(t,e,r){void 0===r&&(r=1);var o={x:t,y:e},i={x:Math.max(0,t-r),y:Math.max(0,e-r)},a=Math.min(this.size.x-1,r+t),u=Math.min(this.size.y-1,r+e);return this.getAreaInternally(i,{x:a-i.x+1,y:u-i.y+1},"block").filter((function(t){return n.Vector2.dist(t.coordinates,o)<=r}))},t.prototype.getAround=function(t,e,r){return void 0===r&&(r=1),this.getAroundData(t,e,r).map((function(t){return t.item}))},t.prototype.getAroundSQ=function(t,e,r){void 0===r&&(r=1);var n={x:Math.max(0,t-r),y:Math.max(0,e-r)},o=Math.min(this.size.x-1,r+t),i=Math.min(this.size.y-1,r+e);return this.getAreaInternally(n,{x:o-n.x+1,y:i-n.y+1},"data")},t.prototype.getBetween=function(t,e){var r={x:Math.min(t.x,e.x),y:Math.min(t.y,e.y)},n=Math.max(t.x,e.x),o=Math.max(t.y,e.y);return this.getAreaInternally(r,{x:n-r.x+1,y:o-r.y+1},"data")},t.prototype.getNearest=function(t,e,r){var n,o=this;!function(t){t[t.ADDED=0]="ADDED",t[t.FALSE=1]="FALSE"}(n||(n={}));for(var i={},a=[],u=[[this.getIndex(t,e)]],s=function(){var t=u.shift(),e=[];t.forEach((function(t){if(i[t]!==n.ADDED&&i[t]!==n.FALSE){var u=o.getCoordinates(t);r(o.data[t])?(i[t]=n.ADDED,a.push({coordinates:u,item:o.data[t]})):(i[t]=n.FALSE,e.push.apply(e,o.getAround4(u.x,u.y)))}})),u.push(e)};!a.length;)s();return a},t.prototype.expandConditionally=function(t,e,r){var n;!function(t){t[t.ADDED=0]="ADDED",t[t.FALSE=1]="FALSE"}(n||(n={}));for(var o={},i=[this.getIndex(t,e)],a=[];i.length;){var u=i.shift();if(o[u]!==n.ADDED&&o[u]!==n.FALSE)if(r(this.data[u])){o[u]=n.ADDED;var s=this.getCoordinates(u);a.push({coordinates:s,item:this.data[u]}),i.push.apply(i,this.getAround4(s.x,s.y))}else o[u]=n.FALSE}return a},t.prototype.getAround4=function(t,e){var r=this.getIndex(t,e),n=[];return t>0&&n.push(r-1),e>0&&n.push(r-this.size.x),t+1<this.size.x&&n.push(r+1),e+1<this.size.y&&n.push(r+this.size.x),n},t.prototype.getAround4Index=function(t){var e=this.getCoordinates(t),r=e.x,n=e.y,o=[];return r>0&&o.push(t-1),n>0&&o.push(t-this.size.x),r+1<this.size.x&&o.push(t+1),n+1<this.size.y&&o.push(t+this.size.x),o},t.prototype.getArea=function(t,e){return this.getAreaInternally(t,e,"data")},t.prototype.getAreaInternally=function(t,e,r){var n=this,o=new Array(e.x*e.y),i=0,a=t.y;if("block"===r){for(var u=0;u<e.y;u++){for(var s=this.getIndex(t.x,a),c=0;c<e.x;c++)o[i++]={index:s,item:this.data[s++],coordinates:{y:a,x:t.x+c}};a++}return o}for(u=0;u<e.y;u++){for(s=this.getIndex(t.x,a),c=0;c<e.x;c++)o[i++]=s++;a++}return"indices"===r?o:o.map((function(t){return n.data[t]}))},t.prototype.forEach=function(t){for(var e=0;e<this.data.length;e++)if(!1===t(this.data[e],e%this.size.x,Math.floor(e/this.size.x)))return},t.prototype.getRandomBlockOfSize=function(t,e){for(;;){var r=Math.floor(Math.random()*this.data.length);if(this.getArea(this.getCoordinates(r),t).every((function(t){return e(t)})))return{item:this.data[r],coordinates:this.getCoordinates(r)}}},t.prototype.getRandomBlock=function(t){for(;;){var e=Math.floor(Math.random()*this.data.length),r=this.data[e];if(!t||t(r))return{item:r,coordinates:this.getCoordinates(e)}}},t.prototype.getRandomBlock2=function(t){if(!t){var e=Math.floor(Math.random()*this.data.length);return{item:this.data[e],coordinates:this.getCoordinates(e)}}var r=this.data.map((function(t,e){return{item:t,index:e}})).sort((function(){return Math.random()-.5})).find((function(e){return t(e.item)}));return r?{item:r.item,coordinates:this.getCoordinates(r.index)}:null},t}();e.Grid2ArrayHolder=o},6977:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Grid2HashHolder=void 0;var n=r(5595),o=function(){function t(){this.data={}}return t.prototype.get=function(t,e){return this.data[n.hash2Numbers(t,e)].value},t.prototype.set=function(t,e,r){this.data[n.hash2Numbers(t,e)]={x:t,y:e,value:r}},t.prototype.forEach=function(t){Object.values(this.data).forEach((function(e){return t(e.value,e.x,e.y)}))},t.prototype.getArea=function(t,e){throw new Error("Not implemented")},t.prototype.getAroundData=function(t,e,r){throw new Error("Not implemented")},t.prototype.getRandomBlock=function(t){throw new Error("Not implemented")},t}();e.Grid2HashHolder=o},9200:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},8851:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Grid2MapHolder=void 0;var r=function(){function t(t){this.data=t}return t.prototype.get=function(t,e){return this.data[t][e]},t.prototype.set=function(t,e,r){this.data[t][e]=r},t.prototype.forEach=function(t){for(var e=0;e<this.data.length;e++)for(var r=0;r<this.data[e].length;r++)t(this.data[e][r],e,r)},t.prototype.getArea=function(t,e){throw new Error("Not implemented")},t.prototype.getAroundData=function(t,e,r){throw new Error("Not implemented")},t.prototype.getRandomBlock=function(t){throw new Error("Not implemented")},t}();e.Grid2MapHolder=r},5146:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Grid2ObjectHolder=void 0;var n=r(1054),o=function(){function t(){this.data={},this._length=0}return t.prototype.get=function(t,e){return n.getOrSetProperty(this.data,t,{})[e]},t.prototype.remove=function(t,e){var r=n.getOrSetProperty(this.data,t,{});r[e]&&this._length--,delete r[e]},t.prototype.forEach=function(t){Object.entries(this.data).forEach((function(e){var r=e[0],n=e[1];Object.entries(n).forEach((function(e){var n=e[0],o=e[1];t(o,+r,+n)}))}))},t.prototype.set=function(t,e,r){var o=n.getOrSetProperty(this.data,t,{});o[e]||this._length++,o[e]=r},t.prototype.getArea=function(t,e){throw new Error("Not implemented")},t.prototype.getAroundData=function(t,e,r){throw new Error("Not implemented")},t.prototype.getRandomBlock=function(t){throw new Error("Not implemented")},t}();e.Grid2ObjectHolder=o},5180:(t,e)=>{function r(t,e,r,n,o){return void 0===o&&(o=n),t+r*n+e*n*o}function n(t,e,r){return void 0===r&&(r=e),{x:t%e,y:Math.floor(t/(e*r)),z:t/e%e}}Object.defineProperty(e,"__esModule",{value:!0}),e.Grid3ArrayHolder=e.getCoordinates=e.getIndex=void 0,e.getIndex=r,e.getCoordinates=n;var o=function(){function t(t,e){this.size=t,this.data=e}return t.prototype.getIndex=function(t,e,n){return r(t,e,n,this.size.x)},t.prototype.getCoordinates=function(t){return n(t,this.size.x)},t.initEmpty=function(e,r,n,o){void 0===o&&(o=null);for(var i=e*r*n,a=new Array(i),u=0;u<i;u++)a[u]=o;return new t({x:e,y:r,z:n},a)},t.prototype.get=function(t,e,r){return this.data[this.getIndex(t,e,r)]},t.prototype.set=function(t,e,r,n){this.data[this.getIndex(t,e,r)]=n},t.prototype.forEach=function(t){for(var e=0;e<this.data.length;e++){var r=this.getCoordinates(e);if(!1===t(this.data[e],r.x,r.y,r.z))return}},t}();e.Grid3ArrayHolder=o},245:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Grid3HashHolder=void 0;var n=r(5595),o=function(){function t(){this.values={}}return t.prototype.get=function(t,e,r){var o;return null===(o=this.values[n.hash3Numbers(t,e,r)])||void 0===o?void 0:o.value},t.prototype.set=function(t,e,r,o){this.values[n.hash3Numbers(t,e,r)]={value:o,x:t,y:e,z:r}},t.prototype.forEach=function(t){Object.values(this.values).forEach((function(e){return t(e.value,e.x,e.y,e.z)}))},t}();e.Grid3HashHolder=o},3135:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},978:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Grid3MapHolder=void 0;var r=function(){function t(t){this.data=t}return t.initEmpty=function(e,r,n,o){void 0===o&&(o=null);for(var i=new Array(e),a=0;a<e;a++){for(var u=new Array(r),s=0;s<r;s++){for(var c=new Array(n),l=0;l<n;l++)c[l]=o;u[s]=c}i[a]=u}return new t(i)},t.prototype.get=function(t,e,r){var n,o;return null===(o=null===(n=this.data[t])||void 0===n?void 0:n[e])||void 0===o?void 0:o[r]},t.prototype.set=function(t,e,r,n){this.data[t][e][r]=n},t.prototype.getBetween=function(t,e){var r={x:Math.min(t.x,e.x),y:Math.min(t.y,e.y),z:Math.min(t.z,e.z)},n=Math.max(t.x,e.x),o=Math.max(t.y,e.y),i=Math.max(t.z,e.z);return this.getAreaInternally(r,{x:n-r.x+1,y:o-r.y+1,z:i-r.z+1},"data")},t.prototype.getArea=function(t,e){return this.getAreaInternally(t,e,"data")},t.prototype.setData=function(t){this.data.splice(0,this.data.length),Object.assign(this.data,t)},t.prototype.getAreaInternally=function(t,e,r){var n=[];if("block"===r){for(var o=0;o<e.x;o++)for(var i=0;i<e.y;i++)for(var a=0;a<e.z;a++){var u=o+t.x,s=i+t.y,c=a+t.z;n.push({item:this.data[u][s][c],coordinates:{x:u,y:s,z:c}})}return n}for(o=0;o<e.x;o++)for(i=0;i<e.y;i++)for(a=0;a<e.z;a++){u=o+t.x,s=i+t.y,c=a+t.z;n.push(this.data[u][s][c])}return n},t.prototype.forEach=function(t){for(var e=0;e<this.data.length;e++)for(var r=0;r<this.data[e].length;r++)for(var n=0;n<this.data[e][r].length;n++)t(this.data[e][r][n],e,r,n)},t.prototype.getRandomBlock=function(t){for(;;){var e=Math.floor(Math.random()*this.data.length),r=Math.floor(Math.random()*this.data[e].length),n=Math.floor(Math.random()*this.data[e][r].length),o=this.data[e][r][n];if(!t||t(o))return{item:o,coordinates:{x:e,y:r,z:n}}}},t}();e.Grid3MapHolder=r},3085:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Grid3ObjectHolder=void 0;var n=r(1054),o=function(){function t(){this.data={}}return t.prototype.get=function(t,e,r){var o=n.getOrSetProperty(this.data,t,{});return n.getOrSetProperty(o,e,{})[r]},t.prototype.set=function(t,e,r,o){var i=n.getOrSetProperty(this.data,t,{});n.getOrSetProperty(i,e,{})[r]=o},t.prototype.forEach=function(t){Object.entries(this.data).forEach((function(e){var r=e[0],n=e[1];Object.entries(n).forEach((function(e){var n=e[0],o=e[1];Object.entries(o).forEach((function(e){var o=e[0],i=e[1];t(i,+r,+n,+o)}))}))}))},t}();e.Grid3ObjectHolder=o},9849:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(6213),e),o(r(2312),e),o(r(8110),e),o(r(166),e),o(r(6977),e),o(r(9200),e),o(r(8851),e),o(r(5146),e),o(r(5180),e),o(r(245),e),o(r(3135),e),o(r(978),e),o(r(3085),e)},2194:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AbstractLinkedList=void 0;var r=function(){function t(){this.first=null,this.localLength=0}return Object.defineProperty(t.prototype,"length",{get:function(){return this.localLength},enumerable:!1,configurable:!0}),t.prototype[Symbol.iterator]=function(){var t,e=this.first;return(t={})[Symbol.iterator]=function(){return this},t.next=function(){if(e){var t=e.item;return e=e.next,{value:t,done:!1}}return{value:null,done:!0}},t},Object.defineProperty(t.prototype,"empty",{get:function(){return 0===this.localLength},enumerable:!1,configurable:!0}),t.prototype.contains=function(t){for(var e=this.first;e;e=e.next)if(e.item===t)return!0;return!1},t.prototype.toArray=function(){for(var t=new Array(this.localLength),e=0,r=this.first;r;r=r.next)t[e++]=r.item;return t},t}();e.AbstractLinkedList=r},5013:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),e.BiDirectionalLinkedList=void 0;var i=r(2194),a=r(7087),u=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.last=null,e}return o(e,t),e.prototype.add=function(t){var e=new a.BiDirectionalLinkedListEntry(t);return this.empty?this.first=e:this.last.next=e,e.prev=this.last,this.last=e,this.localLength++,!0},e.prototype.forEach=function(t){for(var e=this.first,r=0;e;)t(e.item,r++),e=e.next},e.prototype.forEachReverse=function(t){for(var e=this.last,r=this.length-1;e;)t(e.item,r--),e=e.prev},e.prototype.clear=function(){this.first=null,this.last=null,this.localLength=0},e.prototype.remove=function(t){if(this.empty)return!1;if(1===this.length)return this.clear(),!0;for(var e=this.first;e;e=e.next)if(e.item===t)return e===this.first?(this.first=e.next,e.next.prev=null,this.localLength--,!0):e===this.last?(this.last=e.prev,e.prev.next=null,this.localLength--,!0):(e.prev.next=e.next,e.next.prev=e.prev,this.localLength--,!0);return!0},e}(i.AbstractLinkedList);e.BiDirectionalLinkedList=u},7113:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(2194),e),o(r(5013),e),o(r(7087),e),o(r(9292),e),o(r(359),e),o(r(1186),e)},7087:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BiDirectionalLinkedListEntry=e.OneDirectionalLinkedListEntry=void 0;var r=function(t){this.item=t,this.next=null};e.OneDirectionalLinkedListEntry=r;var n=function(t){this.item=t,this.prev=null,this.next=null};e.BiDirectionalLinkedListEntry=n},9292:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},359:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),e.OneDirectionalLinkedList=void 0;var i=r(2194),a=r(7087),u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.add=function(t){var e=new a.OneDirectionalLinkedListEntry(t);return e.next=this.first,this.first=e,this.localLength++,!0},e.prototype.forEach=function(t){for(var e=this.first,r=0;e;)t(e.item,r++),e=e.next},e.prototype.clear=function(){this.first=null,this.localLength=0},e.prototype.remove=function(t){for(var e,r=this.first;r;r=r.next){if(r===this.first&&r.item===t)return this.first=r.next,this.localLength--,!0;if((null===(e=r.next)||void 0===e?void 0:e.item)===t)return r.next=r.next.next,this.localLength--,!0}return!1},e}(i.AbstractLinkedList);e.OneDirectionalLinkedList=u},1186:function(t,e,r){var n=this&&this.__spreadArrays||function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),o=0;for(e=0;e<r;e++)for(var i=arguments[e],a=0,u=i.length;a<u;a++,o++)n[o]=i[a];return n};Object.defineProperty(e,"__esModule",{value:!0}),e.SortedArrayList=void 0;var o=r(1458),i=function(){function t(t){this.comparator=t,this.data=[]}return t.prototype.forEach=function(t){this.data.forEach(t)},t.prototype[Symbol.iterator]=function(){var t,e=this,r=0;return(t={})[Symbol.iterator]=function(){return this},t.next=function(){return r<e.data.length?{value:e.data[r++],done:!1}:{value:null,done:!0}},t},Object.defineProperty(t.prototype,"length",{get:function(){return this.data.length},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"empty",{get:function(){return 0===this.data.length},enumerable:!1,configurable:!0}),t.prototype.add=function(t){return o.sortedInsert(this.data,t,this.comparator)>=0},t.prototype.clear=function(){this.data.splice(0,this.data.length)},t.prototype.contains=function(t){return o.binarySearch(this.data,t,this.comparator)>=0},t.prototype.remove=function(t){return!!o.sortedRemove(this.data,t,this.comparator)},t.prototype.toArray=function(){return n(this.data)},t}();e.SortedArrayList=i},4915:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PriorityQueue=void 0;var r=function(t){return Math.floor((t-1)/2)},n=function(){function t(t){this.comparator=t,this.heap=[]}return t.createMaxQueue=function(e){return new t((function(t,r){return e(t)>e(r)}))},t.createMinQueue=function(e){return new t((function(t,r){return e(t)<e(r)}))},t.prototype.swap=function(t,e){var r=this.heap[t];this.heap[t]=this.heap[e],this.heap[e]=r},t.prototype.peek=function(){return this.heap[0]},Object.defineProperty(t.prototype,"length",{get:function(){return this.heap.length},enumerable:!1,configurable:!0}),t.prototype.contains=function(t){var e=this;return this.heap.some((function(r){return e.comparator(r,t)}))},t.prototype.clear=function(){this.heap=[]},t.prototype.forEach=function(t){this.heap.forEach(t)},t.prototype.add=function(t){this.heap.push(t);for(var e=this.heap.length-1;0!==e&&this.comparator(this.heap[e],this.heap[r(e)]);)this.swap(e,r(e)),e=r(e)},t.prototype.pop=function(){var t=this.heap.shift();return this.heap.unshift(this.heap[this.heap.length-1]),this.heap.pop(),this.heapify(0),t},t.prototype.heapify=function(t){var e=function(t){return 2*t+1}(t),r=function(t){return 2*t+2}(t),n=t;e<this.heap.length&&this.comparator(this.heap[e],this.heap[n])&&(n=e),r<this.heap.length&&this.comparator(this.heap[r],this.heap[n])&&(n=r),n!==t&&(this.swap(n,t),this.heapify(n))},t}();e.PriorityQueue=n},9664:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.QuadTree=e.Box=e.Point=void 0;var r=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.lte=function(t){return this.x<=t.x&&this.y<=t.y},t.prototype.gte=function(t){return this.x>=t.x&&this.y>=t.y},t.prototype.equals=function(t){return this.x===t.x&&this.y===t.y},t}();e.Point=r;var n=function(){function t(t,e){this.low=t,this.high=e}return t.prototype.contains=function(t){return this.low.lte(t)&&this.high.gte(t)},t.prototype.overlaps=function(t){return!(this.high.x<t.low.x)&&(!(this.low.x>t.high.x)&&(!(this.high.y<t.low.y)&&!(this.low.y>t.high.y)))},t.prototype.containsBox=function(t){return this.contains(t.low)&&this.contains(t.high)},t.prototype.split=function(){return[new t(this.low,new r((this.low.x+this.high.x)/2,(this.low.y+this.high.y)/2)),new t(new r((this.low.x+this.high.x)/2,this.low.y),new r(this.high.x,(this.low.y+this.high.y)/2)),new t(new r((this.low.x+this.high.x)/2,(this.low.y+this.high.y)/2),this.high),new t(new r(this.low.x,(this.low.y+this.high.y)/2),new r((this.low.x+this.high.x)/2,this.high.y))]},t}();e.Box=n;var o=function(){function t(t,e){void 0===e&&(e=10),this.box=t,this.max=e,this.children=null,this.value=[]}return t.prototype.insert=function(t,e){var r;if(!this.box.contains(t))return this;if(null===this.children&&this.value.length<this.max){for(var n=0,o=this.value;n<o.length;n++){var i=o[n];if(i.point.equals(t))return void(i.value=e)}return this.value.push({point:t,value:e}),this}return null===this.children&&this.subdivide(),null===(r=this.children)||void 0===r||r.forEach((function(r){r.insert(t,e)})),this.value=[],this},t.prototype.subdivide=function(){var e=this;this.children=this.box.split().map((function(r){return new t(r,e.max)})),this.value.forEach((function(t){var r;null===(r=e.children)||void 0===r||r.forEach((function(e){e.insert(t.point,t.value)}))}))},t.prototype.queryRange=function(t){var e=[];return this._queryRangeRec(t,e),e},t.prototype._queryRangeRec=function(t,e){var r;if(this.box.overlaps(t))if(this.value.length>0)for(r=0;r<this.value.length;r++)t.contains(this.value[r].point)&&e.push(this.value[r]);else null!==this.children&&this.children.forEach((function(r){r._queryRangeRec(t,e)}))},t.prototype.queryPoint=function(t){if(!this.box.contains(t))return null;if(this.value.length>0&&(n=this.value.find((function(e){return e.point.equals(t)}))))return n.value;if(null!==this.children)for(var e=0,r=this.children;e<r.length;e++){var n;if(n=r[e].queryPoint(t))return n}return null},t.prototype.removePoint=function(t){var e;if(this.box.contains(t))if(this.value.length>0){for(e=0;e<this.value.length;e++)if(this.value[e].point.equals(t))return void this.value.splice(e,1)}else if(null!==this.children)for(e=0;e<this.children.length;e++)this.children[e].removePoint(t)},t.prototype.clear=function(){this.children=null,this.value=[]},t}();e.QuadTree=o},7004:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GenderClass=e.parseGender=e.Gender=void 0;var r,n=/^(male|man|muz|boy|chlapec|m)$/g,o=/^(female|woman|zena|girl|dievca|f|w|z)$/g;function i(t){if(!t)return null;var e=t.trim().toLowerCase().replace("ž","z").replace("č","c");return e.match(n)?r.MAN:e.match(o)?r.WOMAN:null}!function(t){t.MAN="MAN",t.WOMAN="WOMAN"}(r=e.Gender||(e.Gender={})),e.parseGender=i;var a=function(){function t(){}return t.parse=i,t}();e.GenderClass=a},7554:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(7004),e),o(r(2472),e),o(r(7486),e),o(r(182),e),o(r(5863),e),o(r(6440),e),o(r(4706),e),o(r(4915),e),o(r(7699),e),o(r(7279),e),o(r(9664),e),o(r(9849),e),o(r(7113),e)},5863:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Path=void 0;var r=function(){function t(t){if(this.points=t,t.length<2)throw new Error("Cannot create path with less than 2 points")}return Object.defineProperty(t.prototype,"length",{get:function(){return this.points.length},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"first",{get:function(){return this.points[0]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"last",{get:function(){return this.points[this.points.length-1]},enumerable:!1,configurable:!0}),t.prototype.getPoint=function(t){return this.points[t]},t}();e.Path=r},6440:function(t,e){var r=this&&this.__spreadArrays||function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),o=0;for(e=0;e<r;e++)for(var i=arguments[e],a=0,u=i.length;a<u;a++,o++)n[o]=i[a];return n};Object.defineProperty(e,"__esModule",{value:!0}),e.Dijkstra=e.DjikstraVertex=void 0;var n=function(t,e,r){this.name=t,this.nodes=e,this.weight=r};e.DjikstraVertex=n;var o=function(){function t(){this.vertices={}}return t.prototype.addVertex=function(t){this.vertices[t.name]=t},t.prototype.removeVertex=function(t){delete this.vertices[t]},t.prototype.getVertex=function(t){return this.vertices[t]},t.prototype.requireVertex=function(t,e){void 0===e&&(e=0);var r=this.getVertex(t);if(r)return r;var o=new n(t,[],0);return this.addVertex(o),o},t.prototype.findPointsOfShortestWay=function(t,e,r){for(var n=this,o=e,i=[],a=function(){var t=Number.MAX_VALUE,e="";u.vertices[o].nodes.forEach((function(r){r.weight+n.vertices[r.nameOfVertex].weight<t&&(t=n.vertices[r.nameOfVertex].weight,e=r.nameOfVertex)})),i.push(e),o=e},u=this;o!==t;)a();return i},t.prototype.findShortestWay=function(t,e){var n=this,o={};for(Object.values(this.vertices).forEach((function(e){e.name===t?e.weight=0:e.weight=Number.MAX_VALUE,o[e.name]=e.weight}));0!==Object.keys(o).length;){for(var i=Object.keys(o).sort((function(t,e){return n.vertices[t].weight-n.vertices[e].weight})),a=this.vertices[i[0]],u=0,s=a.nodes;u<s.length;u++){var c=s[u],l=a.weight+c.weight;l<this.vertices[c.nameOfVertex].weight&&(this.vertices[c.nameOfVertex].weight=l)}delete o[i[0]]}var f=this.vertices[e].weight,h=this.findPointsOfShortestWay(t,e,f).reverse();return{distance:f,nodes:r(h,[e])}},t}();e.Dijkstra=o},182:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Range=void 0;var n=r(5928),o=r(2472),i=function(){function t(t,e){void 0===e&&(e=t),this.min=t,this.max=e}return t.random=function(t){return n.randomFloatBetween(t.min,t.max)},t.randomVector2i=function(t){return{x:n.randomIntBetween(t.min.x,t.max.x),y:n.randomIntBetween(t.min.y,t.max.y)}},t.randomVector3i=function(t){return{x:n.randomIntBetween(t.min.x,t.max.x),y:n.randomIntBetween(t.min.y,t.max.y),z:n.randomIntBetween(t.min.z,t.max.z)}},t.randomVector4i=function(t){return{x:n.randomIntBetween(t.min.x,t.max.x),y:n.randomIntBetween(t.min.y,t.max.y),z:n.randomIntBetween(t.min.z,t.max.z),w:n.randomIntBetween(t.min.w,t.max.w)}},t.randomVector2f=function(t){return{x:n.randomFloatBetween(t.min.x,t.max.x),y:n.randomFloatBetween(t.min.y,t.max.y)}},t.randomVector3f=function(t){return{x:n.randomFloatBetween(t.min.x,t.max.x),y:n.randomFloatBetween(t.min.y,t.max.y),z:n.randomFloatBetween(t.min.z,t.max.z)}},t.randomVector4f=function(t){return{x:n.randomFloatBetween(t.min.x,t.max.x),y:n.randomFloatBetween(t.min.y,t.max.y),z:n.randomFloatBetween(t.min.z,t.max.z),w:n.randomFloatBetween(t.min.w,t.max.w)}},t.randomColorF=function(t){return new o.Color(n.randomFloatBetween(t.min.red,t.max.red),n.randomFloatBetween(t.min.green,t.max.green),n.randomFloatBetween(t.min.blue,t.max.blue),n.randomFloatBetween(t.min.alpha,t.max.alpha))},t.randomColorI=function(t){return new o.Color(n.randomIntBetween(t.min.red,t.max.red),n.randomIntBetween(t.min.green,t.max.green),n.randomIntBetween(t.min.blue,t.max.blue),n.randomIntBetween(t.min.alpha,t.max.alpha))},t}();e.Range=i},3330:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BucketSort=void 0;var r=function(){function t(){}return t.prototype.sort=function(t,e){for(var r=new Array(e+1),n=0;n<r.length;n++)r[n]=0;for(var o=0,i=t;o<i.length;o++){r[i[o]]++}var a=0;for(n=0;n<r.length;n++)for(var u=0;u<r[n];u++)t[a++]=n},t}();e.BucketSort=r},6204:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CountingSort=void 0;var r=function(){function t(){}return t.prototype.sort=function(t,e,r){for(var n=new Array(r-e+1),o=0,i=t;o<i.length;o++){n[i[o]-e]++}for(var a=0,u=0;u<n.length;u++)t.fill(a,a+n[u],u+e),a+=n[u]},t}();e.CountingSort=r},6308:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.HeapSort=void 0;var r=function(){function t(t){this.comparator=t,this.n=0,this.left=0,this.right=0,this.largest=0,this.tmp=null}return t.prototype.sort=function(t){this.buildHeap(t);for(var e=this.n;e>0;e--)this.exchange(t,0,e),this.n--,this.maxHeap(t,0)},t.prototype.buildHeap=function(t){this.n=t.length-1;for(var e=this.n/2;e>=0;e--)this.maxHeap(t,e)},t.prototype.maxHeap=function(t,e){this.left=2*e,this.right=2*e+1,this.left<=this.n&&this.comparator(t[this.left],t[e])>0?this.largest=this.left:this.largest=e,this.right<=this.n&&this.comparator(t[this.right],t[this.largest])>0&&(this.largest=this.right),this.largest!==e&&(this.exchange(t,e,this.largest),this.maxHeap(t,this.largest))},t.prototype.exchange=function(t,e,r){this.tmp=t[e],t[e]=t[r],t[r]=this.tmp},t}();e.HeapSort=r},4706:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(3330),e),o(r(6204),e),o(r(6308),e),o(r(5382),e),o(r(6255),e),o(r(313),e),o(r(5150),e)},5382:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.InsertionSort=void 0;var r=function(){function t(t){this.comparator=t}return t.prototype.sort=function(t){for(var e=1;e<t.length;e++){var r=t[e];this.comparator(r,t[e-1])<0&&this.sortUpLowToHigh(t,e)}},t.prototype.sortUpLowToHigh=function(t,e){for(var r=t[e],n=e-1;0!==n&&this.comparator(t[n-1],r)>0;)n--;t.splice(e,1),t.splice(n,0,r)},t}();e.InsertionSort=r},6255:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MergeSort=void 0;var r=function(){function t(t){this.comparator=t,this.array=[],this.tempMergeArray=[]}return t.prototype.sort=function(t){this.array=t,this.tempMergeArray=new Array(t.length),this.doMergeSort(0,t.length-1)},t.prototype.doMergeSort=function(t,e){if(!(t>=e)){var r=Math.floor(t+(e-t)/2);this.doMergeSort(t,r),this.doMergeSort(r+1,e),this.mergeParts(t,r,e)}},t.prototype.mergeParts=function(t,e,r){for(var n=t;n<=r;n++)this.tempMergeArray[n]=this.array[n];for(var o=t,i=e+1,a=t;o<=e&&i<=r;)this.comparator(this.tempMergeArray[o],this.tempMergeArray[i])<=0?this.array[a]=this.tempMergeArray[o++]:this.array[a]=this.tempMergeArray[i++],a++;for(;o<=e;)this.array[a++]=this.tempMergeArray[o++]},t}();e.MergeSort=r},313:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.QuickSort=void 0;var r=function(){function t(t){this.comparator=t,this.array=[],this.tmpValue=null}return t.prototype.sort=function(t){(null==t?void 0:t.length)&&(this.array=t,this.quickSort(0,t.length-1))},t.prototype.quickSort=function(t,e){for(var r=t,n=e,o=this.array[~~(t+(e-t)/2)];r<=n;){for(;this.comparator(this.array[r],o)<0;)r++;for(;this.comparator(this.array[n],o)>0;)n--;r<=n&&this.exchangeNumbers(r++,n--)}t<n&&this.quickSort(t,n),r<e&&this.quickSort(r,e)},t.prototype.exchangeNumbers=function(t,e){this.tmpValue=this.array[t],this.array[t]=this.array[e],this.array[e]=this.tmpValue},t}();e.QuickSort=r},5150:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RadixSort=void 0;var r=function(){function t(t){this.mapper=t}return t.prototype.sort=function(t){for(var e=t[0],r=1,n=new Array(t.length),o=1;o<t.length;o++)t[o]>e&&(e=t[o]);for(var i=this.mapper(e);i/r>0;){var a=new Array(10);for(o=0;o<t.length;o++)a[this.mapper(t[o])/r%10]++;for(o=1;o<10;o++)a[o]+=a[o-1];for(o=t.length-1;o>=0;o--)n[--a[this.mapper(t[o])/r%10]]=t[o];for(o=0;o<t.length;o++)t[o]=n[o];r*=10}},t.prototype.sort2=function(t){for(var e=t[0],r=1,n=new Array(t.length),o=1;o<t.length;o++)t[o]>e&&(e=t[o]);for(;e/r>0;){var i=new Array(10);for(o=0;o<t.length;o++)i[t[o]/r%10]++;for(o=1;o<10;o++)i[o]+=i[o-1];for(o=t.length-1;o>=0;o--)n[--i[t[o]/r%10]]=t[o];for(o=0;o<t.length;o++)t[o]=n[o];r*=10}},t}();e.RadixSort=r},7486:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getDefaultTransform=void 0,e.getDefaultTransform=function(){return{offset:{x:0,y:0},scale:1,rotation:0}}},6917:function(t,e){var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0}),e.fixSphere=e.fixPosSize=e.fixXYWH=void 0,e.fixXYWH=function(t,e){var r={x:e.x,y:e.y};return e.x<t.min.x?r.x=t.min.x:e.x+e.w>t.max.x&&(r.x=t.max.x-e.w),e.y<t.min.y?r.y=t.min.y:e.y+e.h>t.max.y&&(r.y=t.max.y-e.h),r},e.fixPosSize=function(t,e){var n=r({},e.position);return e.position.x<t.min.x?n.x=t.min.x:e.position.x+e.size.x>t.max.x&&(n.x=t.max.x-e.size.x),e.position.y<t.min.y?n.y=t.min.y:e.position.y+e.size.y>t.max.y&&(n.y=t.max.y-e.size.y),n},e.fixSphere=function(t,e){var n=r({},e.center),o=e.radius/2;return e.center.x-o<t.min.x?n.x=t.min.x+o:e.center.x+o>t.max.x&&(n.x=t.max.x-o),e.center.y-o<t.min.y?n.y=t.min.y+o:e.center.y+o>t.max.y&&(n.y=t.max.y-o),n}},3438:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.pointLine2dClosest=void 0,e.pointLine2dClosest=function(t,e,r,n,o,i){var a=r-t,u=n-e,s=((o-t)*a+(i-e)*u)/(a*a+u*u);return s<0?{x:t,y:e}:s>1?{x:r,y:n}:{x:t+s*a,y:e+s*u}}},9890:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getClosestPointOnLine=void 0,e.getClosestPointOnLine=function(t,e,r,n,o,i,a,u,s){var c=n-t,l=o-e,f=i-r,h=(a-t)*c+(u-e)*l+(s-r)*f;return(h/=c*c+l*l+f*f)<0?{x:t,y:e,z:r}:h>1?{x:n,y:o,z:i}:{x:t+h*c,y:e+h*l,z:r+h*f}}},2899:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.pointPolygon2dCollision=e.pointMultiPolygon2dCollision=e.pointPolygon2dCollision2=e.pointCircle2dCollision=e.pointRectMinMax2dCollision=e.pointRect2dCollision=e.circleCircle2dCollision=e.rectRect2dCollision=e.lineLine2dCollision2=e.lineLine2dCollision=e.lineRectangle2dCollision=e.circleRect2dCollision=void 0;var n=r(7619);function o(t,e,r,n,o,i,a,u){var s=(r-t)*(u-i)-(n-e)*(a-o),c=(e-i)*(a-o)-(t-o)*(u-i),l=(e-i)*(r-t)-(t-o)*(n-e);if(0===s)return 0===c&&0===l;var f=c/s,h=l/s;return f>=0&&f<=1&&h>=0&&h<=1}function i(t,e,r,n,o,i){return t>=r&&e>=n&&t<=r+o&&e<=n+i}function a(t,e,r){var n=!1;e[0][0]===e[e.length-1][0]&&e[0][1]===e[e.length-1][1]&&(e=e.slice(0,e.length-1));for(var o=0,i=e.length-1;o<e.length;i=o++){var a=e[o][0],u=e[o][1],s=e[i][0],c=e[i][1];if(t[1]*(a-s)+u*(s-t[0])+c*(t[0]-a)==0&&(a-t[0])*(s-t[0])<=0&&(u-t[1])*(c-t[1])<=0)return!r;u>t[1]!=c>t[1]&&t[0]<(s-a)*(t[1]-u)/(c-u)+a&&(n=!n)}return n}e.circleRect2dCollision=function(t,e,r,n,o,i,a){var u=Math.abs(t-n),s=Math.abs(e-o);return!(u>i/2+r)&&(!(s>a/2+r)&&(u<=i/2||(s<=a/2||Math.pow(u-n/2,2)+Math.pow(s-o/2,2)<=Math.pow(r,2))))},e.lineRectangle2dCollision=function(t,e,r,n,a,u,s,c){return i(t,e,a,u,s,c)||i(r,n,a,u,s,c)||o(t,e,r,n,a,u,a+s,u+c)||o(t,e,r,n,a+s,u,a,u+c)},e.lineLine2dCollision=o,e.lineLine2dCollision2=function(t,e,r,n,o,i,a,u){var s=(r-t)*(u-i)-(a-o)*(n-e);if(0===s)return!1;var c=((u-i)*(a-t)+(o-a)*(u-e))/s,l=((e-n)*(a-t)+(r-t)*(u-e))/s;return 0<c&&c<1&&0<l&&l<1},e.rectRect2dCollision=function(t,e,r,n,o,i,a,u){return o+a>=t&&i+u>=e&&o<=t+r&&i<=e+n},e.circleCircle2dCollision=function(t,e,r,o,i,a){return n.pointPoint2dDistance(t,e,o,i)<=r+a},e.pointRect2dCollision=i,e.pointRectMinMax2dCollision=function(t,e,r,n,o,i){return t>=r&&e>=n&&t<=o&&e<=i},e.pointCircle2dCollision=function(t,e,r,o,i){return n.pointPoint2dDistance(t,e,r,o)<=i},e.pointPolygon2dCollision2=function(t,e,r){for(var n=!1,o=0,i=r.length-1;o<r.length;i=o++){var a=r[o][0],u=r[o][1],s=r[i][0],c=r[i][1];u>e!=c>e&&t<(s-a)*(e-u)/(c-u)+a&&(n=!n)}return n},e.pointMultiPolygon2dCollision=function(t,e,r,n){void 0===n&&(n=!1);for(var o=[r],i=[t,e],u=!1,s=0;s<o.length&&!u;s++)if(a(i,o[s][0],n)){for(var c=!1,l=1;l<o[s].length&&!c;)a(i,o[s][l],!n)&&(c=!0),l++;c||(u=!0)}return u},e.pointPolygon2dCollision=a},8381:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.testSphereBoxMinMax=e.sphereCylinder=e.pointCylinder=e.lineEllipsoid=e.pointEllipsoid=e.boxBox=e.lineSphere2=e.lineBox=e.pointBoxMinMax=e.pointBox=e.BoxBoxMinMax=e.lineBox2=e.IntersectionType=e.lineSphere=e.pointSphere=e.sphereSphere=void 0;var n,o=r(3081),i=r(9890),a=r(7619),u=r(7239),s=r(3812);function c(t,e,r,n,o,i,a,u,s){var c=t-n,l=e-o,f=r-i;return c*c/(a*a)+l*l/(u*u)+f*f/(s*s)<=1}e.sphereSphere=function(t,e,r,n,o,i,a,s){return u.pointPoint3dDistance(t,e,r,o,i,a)<=n+s},e.pointSphere=function(t,e,r,n,o,i,a){return u.pointPoint3dDistance(t,e,r,n,o,i)<=a},e.lineSphere=function(t,e,r,n,o,i,a,s,c,l){return u.pointLine3dDistance(t,e,r,n,o,i,a,s,c)<l},function(t){t.OUTSIDE="OUTSIDE",t.INSIDE="INSIDE",t.ONE_INTERSECTION="ONE_INTERSECTION",t.TWO_INTERSECTION="TWO_INTERSECTION"}(n=e.IntersectionType||(e.IntersectionType={})),e.lineBox2=function(t,e,r,o,i,a,u,s,c,l,f,h,p){var d,y,v,g,m,b,x=1/(o-t),_=1/(i-e),O=1/(a-r);if(x>=0?(d=(u-t)*x,y=(l-t)*x):(d=(l-t)*x,y=(u-t)*x),_>=0?(v=(s-e)*_,g=(f-e)*_):(v=(f-e)*_,g=(s-e)*_),d>g||v>y)return n.OUTSIDE;if(O>=0?(m=(c-r)*O,b=(h-r)*O):(m=(h-r)*O,b=(c-r)*O),d>b||m>y)return n.OUTSIDE;d=m>(d=v>d||isNaN(d)?v:d)?m:d,y=b<(y=g<y||isNaN(y)?g:y)?b:y;var P=n.OUTSIDE;return d<y&&d<=1&&y>=0&&(d>0&&y>1?(y=d,P=n.ONE_INTERSECTION):d<0&&y<1?(d=y,P=n.ONE_INTERSECTION):P=d<0&&y>1?n.INSIDE:n.TWO_INTERSECTION,p.x=d,p.y=y),P},e.BoxBoxMinMax=function(t,e,r,n,o,i,a,u,s,c,l,f){return t+n>a&&t<c&&e+o>u&&e<l&&r+i>s&&r<f},e.pointBox=function(t,e,r,n,o,i,a,u,s){return n<t&&n+a>t&&o<e&&o+u>e&&i<r&&i+s>r},e.pointBoxMinMax=function(t,e,r,n,o,i,a,u,s){return t>=n&&t<=a&&e>=o&&e>=o&&r>=i&&r<=s},e.lineBox=function(t,e,r,n,o,i,a,u,c,l,f,h){return s.vectorSquare3dIntersect(t,e,r,n,o,i,a-l,u+f,c-h,a-l,u-f,c-h,a+l,u+f,c-h)||s.vectorSquare3dIntersect(t,e,r,n,o,i,a-l,u+f,c+h,a-l,u-f,c+h,a+l,u-f,c+h)||s.vectorSquare3dIntersect(t,e,r,n,o,i,a+l,u+f,c+h,a+l,u-f,c+h,a+l,u+f,c-h)||s.vectorSquare3dIntersect(t,e,r,n,o,i,a-l,u+f,c+h,a-l,u-f,c+h,a-l,u+f,c-h)||s.vectorSquare3dIntersect(t,e,r,n,o,i,a+l,u+f,c+h,a-l,u+f,c+h,a+l,u+f,c-h)||s.vectorSquare3dIntersect(t,e,r,n,o,i,a+l,u-f,c+h,a-l,u-f,c+h,a+l,u-f,c-h)},e.lineSphere2=function(t,e,r,n,o,i,a,u,s,c){var l=n-t,f=o-e,h=i-r,p=((a-t)*l+(u-e)*f+(s-r)*h)/(l*l+f*f+h*h);if(p<0)l=t-a,f=e-u,h=r-s;else if(p>1)l=n-a,f=o-u,h=i-s;else{l=t+p*l-a,f=e+p*f-u,h=r+p*h-s}return l*l+f*f+h*h<=c},e.boxBox=function(t,e,r,n,o,i,a,u,s,c,l,f){return t+n>a&&a+c>t&&e+o>u&&u+l>e&&r+i>s&&s+f>r},e.pointEllipsoid=c,e.lineEllipsoid=function(t,e,r,n,o,a,u,s,l,f,h,p){var d=i.getClosestPointOnLine(t,e,r,n,o,a,u,s,l);return c(d.x,d.y,d.z,u,s,l,f,h,p)},e.pointCylinder=function(t,e,r,n,o,i,u,s){var c=e>o&&e<o+s,l=a.pointPoint2dDistance(t,r,n,i)<u;return c&&l},e.sphereCylinder=function(t,e,r,n,o,i,u,s,c){var l=e+n>i&&e-n<i+c,f=a.pointPoint2dDistance(t,r,o,u)<n+s;return l&&f},e.testSphereBoxMinMax=function(t,e,r,n,i,a,u,s,c,l){var f=n,h=function(t){var e=0;return t.z<t.x?e=t.z-t.x:t.z>t.y&&(e=t.z-t.y),e*e},p=new o.Vector3;return f-=h(p.setData(i,s,t)),f-=h(p.setData(a,c,e)),(f-=h(p.setData(u,l,r)))>=0}},7619:(t,e)=>{function r(t,e,r,o){return Math.sqrt(n(t,e,r,o))}function n(t,e,r,n){var o=t-r,i=e-n;return o*o+i*i}function o(t,e,r,n,o,i){var a,u,s=r-t,c=n-e,l=s*s+c*c,f=-1;0!==l&&(f=((o-t)*s+(i-e)*c)/l),f<0?(a=t,u=e):f>1?(a=r,u=n):(a=t+f*s,u=e+f*c);var h=o-a,p=i-u;return h*h+p*p}Object.defineProperty(e,"__esModule",{value:!0}),e.pointLineSqr2dDistance=e.pointLine2dDistance=e.pointCircleSqr2dDistance=e.pointCircle2dDistance=e.circleCircleSqr2dDistance=e.circleCircle2dDistance=e.pointPointSqr2dDistance=e.pointPoint2dDistance=void 0,e.pointPoint2dDistance=r,e.pointPointSqr2dDistance=n,e.circleCircle2dDistance=function(t,e,n,o,i,a){return Math.max(r(t,e,o,i)-a-n,0)},e.circleCircleSqr2dDistance=function(t,e,r,o,i,a){return Math.max(n(t,e,o,i)-a-r)},e.pointCircle2dDistance=function(t,e,n,o,i){return Math.max(r(t,e,n,o)-i,0)},e.pointCircleSqr2dDistance=function(t,e,r,o,i){return Math.max(n(t,e,r,o)-i,0)},e.pointLine2dDistance=function(t,e,r,n,i,a){return Math.sqrt(o(t,e,r,n,i,a))},e.pointLineSqr2dDistance=o},7239:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.vectorPoint3dDistance=e.pointNormalPlane3dDistance=e.pointLine3dDistance=e.pointPointSqr3dDistance=e.pointPoint3dDistance=void 0;var n=r(3081);function o(t,e,r,n,o,a){return Math.sqrt(i(t,e,r,n,o,a))}function i(t,e,r,n,o,i){var a=t-n,u=e-o,s=r-i;return a*a+u*u+s*s}function a(t,e,r,n,o,i,a,u,s){var c=t-n,l=e-o,f=r-i,h=n-a,p=o-u,d=i-s,y=l*d-f*p,v=f*h-c*d,g=c*p-l*h;return Math.sqrt(y*y+v*v+g*g)/Math.sqrt(c*c+l*l+f*f)}e.pointPoint3dDistance=o,e.pointPointSqr3dDistance=i,e.pointLine3dDistance=function(t,e,r,n,i,u,s,c,l){return(t-n)*(s-n)+(e-i)*(c-i)+(r-u)*(l-u)<0?o(s,c,l,n,i,u):(n-t)*(s-t)+(i-e)*(c-e)+(u-r)*(l-r)<0?o(s,c,l,t,e,r):a(t,e,r,n,i,u,s,c,l)},e.pointNormalPlane3dDistance=function(t,e,r){var o=-n.Vector3.mul(t,e,new n.Vector3).sum();return Math.abs((n.Vector3.mul(t,r,new n.Vector3).sum()+o)/Math.sqrt(n.Vector3.mul(t,t,new n.Vector3).sum()))},e.vectorPoint3dDistance=a},4991:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(3438),e),o(r(9890),e),o(r(2899),e),o(r(8381),e),o(r(7619),e),o(r(7239),e),o(r(6917),e),o(r(9305),e),o(r(2523),e),o(r(3812),e)},2523:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.lineLine2dIntersect=void 0,e.lineLine2dIntersect=function(t,e,r,n,o,i,a,u){var s=(u-i)*(r-t)-(a-o)*(n-e);if(0===s)return null;var c=((a-o)*(e-i)-(u-i)*(t-o))/s,l=((r-t)*(e-i)-(n-e)*(t-o))/s;return c>=0&&c<=1&&l>=0&&l<=1?{x:t+c*(r-t),y:e+c*(n-e)}:null}},3812:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.vectorSquare3dIntersect_2=e.vectorSquare3dIntersect=void 0;var n=r(3081);function o(t,e,r,o,i){var a=n.Vector3.sub(o,r),u=n.Vector3.sub(i,r),s=n.Vector3.sub(t,e),c=a.cross(u),l=c.dot(s);if(Math.abs(l)<1e-6)return!1;var f=-c.dot(n.Vector3.sub(t,r))/l,h=n.Vector3.add(t,s.mul(f)).sub(r),p=h.dot(a),d=h.dot(u);return p>=0&&p<=a.dot(a)&&d>=0&&d<=u.dot(u)}e.vectorSquare3dIntersect=function(t,e,r,i,a,u,s,c,l,f,h,p,d,y,v){return o(new n.Vector3(t,e,r),new n.Vector3(i,a,u),new n.Vector3(s,c,l),new n.Vector3(f,h,p),new n.Vector3(d,y,v))},e.vectorSquare3dIntersect_2=o},500:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Rect=void 0;var n=r(3081),o=r(8219),i=function(){function t(t,e){this.position=t,this.size=e}return Object.defineProperty(t.prototype,"area",{get:function(){return this.size.x*this.size.y},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"momentOfInertia",{get:function(){return(this.size.x*this.size.x+this.size.y*this.size.y)/12},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"boundingRadius",{get:function(){return Math.sqrt(this.size.x*this.size.x+this.size.y*this.size.y)/2},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"circuit",{get:function(){return this.size.x+this.size.x+this.size.y+this.size.y},enumerable:!1,configurable:!0}),t.prototype.toMinMax=function(){return o.convertPosSizeToMinMax(this)},t.fromSphere=function(e){var r=e.radius,n=e.center;return t.fromMinMax({min:{x:n.x-r,y:n.y-r},max:{x:n.x+r,y:n.y+r}})},t.fromRay=function(e,r){var n=e.origin,o=e.direction,i=e.length;if(void 0===r&&(r=i),r===1/0)throw new Error("Cannot create rectangle from infinite ray");var a={x:n.x+o.x*r,y:n.y+o.y*r};return t.fromMinMax({min:{x:Math.min(a.x,n.x),y:Math.min(a.y,n.y)},max:{x:Math.max(a.x,n.x),y:Math.max(a.y,n.y)}})},t.fromPoints=function(e,r,o){void 0===r&&(r=0),void 0===o&&(o=r);var i=n.Vector2.createOutlineRange(e);return r||o?t.fromMinMax({min:{x:i.min.x-r,y:i.min.y-o},max:{x:i.max.x+r,y:i.max.y+o}}):t.fromMinMax(i)},t.fromMinMax=function(e){var r=e.min,n=e.max,o={x:n.x-r.x,y:n.y-r.y};return new t(Object.assign({},r),o)},t}();e.Rect=i},1417:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Sphere=void 0;var n=r(3081),o=r(8219),i=function(){function t(t,e){this.radius=t,this.center=e}return Object.defineProperty(t.prototype,"circuit",{get:function(){return 2*Math.PI*this.radius},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"momentOfInertia",{get:function(){var t=this.radius;return t*t/2},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"boundingRadius",{get:function(){return this.radius},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"area",{get:function(){return Math.PI*this.radius*this.radius},enumerable:!1,configurable:!0}),t.fromMinMax=function(e,r){var n=e.min,o=e.max;void 0===r&&(r="max");var i={x:(n.x+o.x)/2,y:(n.y+o.y)/2},a=o.x-n.x,u=o.y-n.y;return new t("min"===r?Math.min(a,u):Math.max(a,u),i)},t.fromPosSize=function(e,r){return void 0===r&&(r="max"),t.fromMinMax(o.convertPosSizeToMinMax(e),r)},t.prototype.toMinMax=function(){return{min:n.Vector2.addNum(this.center,-this.radius),max:n.Vector2.addNum(this.center,this.radius)}},t.prototype.raycast=function(t,e){var r=e.from,o=e.to,i=this.radius,a=new n.Vector2(this.center.x,this.center.y),u=Math.pow(o.x-r.x,2)+Math.pow(o.y-r.y,2),s=2*((o.x-r.x)*(r.x-a.x)+(o.y-r.y)*(r.y-a.y)),c=Math.pow(r.x-a.x,2)+Math.pow(r.y-a.y,2)-Math.pow(i,2),l=Math.pow(s,2)-4*u*c,f=new n.Vector2,h=new n.Vector2;if(!(l<0))if(0===l)f.set(n.Vector2.lerp(r,o,l)),n.Vector2.sub(f,a,h),n.Vector2.normalize(h,h),e.reportIntersection(t,l,h,-1);else{var p=Math.sqrt(l),d=1/(2*u),y=(-s-p)*d,v=(-s+p)*d;if(y>=0&&y<=1&&(f.set(n.Vector2.lerp(r,o,y)),n.Vector2.sub(f,a,h),n.Vector2.normalize(h,h),e.reportIntersection(t,y,h,-1),t.shouldStop(e)))return;v>=0&&v<=1&&(f.set(n.Vector2.lerp(r,o,v)),n.Vector2.sub(f,a,h),n.Vector2.normalize(h,h),e.reportIntersection(t,v,h,-1))}},t}();e.Sphere=i},9305:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(500),e),o(r(1417),e),o(r(8219),e)},8219:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.convertPosSizeToMinMax=e.convertMinMaxToPosSize=void 0,e.convertMinMaxToPosSize=function(t){var e=t.min,r=t.max;return{position:{x:e.x,y:e.y},size:{x:r.x-e.x,y:r.y-e.y}}},e.convertPosSizeToMinMax=function(t){var e=t.position,r=t.size;return{min:{x:e.x,y:e.y},max:{x:e.x+r.x,y:e.y+r.y}}}},4503:function(t,e,r){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),e.AbstractDatabaseFixture=void 0;var i=function(t){function e(e,r){var n=t.call(this,e)||this;return n.listDto=e.map(r.mapToDto,r),n.detailDto=n.listDto[0],n}return o(e,t),e}(r(3833).AbstractFixture);e.AbstractDatabaseFixture=i},3833:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AbstractFixture=void 0;var r=function(t){this.list=t,this.detail=t[0]};e.AbstractFixture=r},2501:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AbstractMapper=void 0;var r=function(){};e.AbstractMapper=r},4650:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PaginateModel=void 0;var r=function(){function t(e,r){void 0===e&&(e=t.ITEMS_PER_PAGE),void 0===r&&(r=0),this.limit=+e,this.offset=+r}return t.validate=function(e){return e?new t(isNaN(e.limit)?t.ITEMS_PER_PAGE:e.limit,isNaN(e.offset)?0:e.offset):new t},t.ITEMS_PER_PAGE=10,t}();e.PaginateModel=r},7899:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},3067:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},7281:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},5090:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},7147:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},1230:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(7899),e),o(r(7281),e),o(r(5090),e),o(r(3067),e),o(r(7147),e),o(r(8102),e),o(r(2638),e),o(r(6177),e),o(r(6717),e),o(r(287),e),o(r(8432),e),o(r(7e3),e),o(r(7602),e),o(r(8614),e),o(r(2578),e),o(r(8434),e),o(r(4088),e),o(r(9494),e),o(r(9487),e),o(r(8059),e)},8102:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},2638:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},6177:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},6717:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},287:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},8432:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},7e3:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},7602:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},8614:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},2578:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},8434:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},4088:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},9494:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},9487:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},8059:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},7858:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.hasMouse=e.isTouch=e.isChromeOs=e.isMac=e.isWin=e.isChromeApp=e.isIOS=e.isSafari=e.isEdge=e.isIE11=e.isIE6=e.isIE=void 0,e.isIE=function(){return navigator.userAgent.indexOf("MSIE")>=0},e.isIE6=function(){return navigator.userAgent.indexOf("MSIE 6")>=0},e.isIE11=function(){return!!navigator.userAgent.match(/Trident\/7\./)},e.isEdge=function(){return!!navigator.userAgent.match(/Edge\//)},e.isSafari=function(){return navigator.userAgent.indexOf("AppleWebKit/")>=0&&navigator.userAgent.indexOf("Chrome/")<0&&navigator.userAgent.indexOf("Edge/")<0},e.isIOS=function(){return!!navigator.userAgent.match(/(iPad|iPhone|iPod)/g)},e.isChromeApp=function(){var t,e,r;return null===(r=null===(e=null===(t=window)||void 0===t?void 0:t.chrome)||void 0===e?void 0:e.app)||void 0===r?void 0:r.runtime},e.isWin=function(){return navigator.appVersion.indexOf("Win")>0},e.isMac=function(){return navigator.appVersion.indexOf("Mac")>0},e.isChromeOs=function(){return/\bCrOS\b/.test(navigator.userAgent)},e.isTouch=function(){return"ontouchstart"in document.documentElement},e.hasMouse=function(){return"onmousemove"in document.documentElement}},6042:(t,e)=>{function r(t){return Array.isArray(t)?0===t.length?null:t[Math.floor(Math.random()*t.length)]:t}Object.defineProperty(e,"__esModule",{value:!0}),e.mergeArrays3=e.mergeArrays2=e.eachOther=e.createFilledArray=e.makeUnique=e.getNRandom=e.getRandomItem=e.getLast=e.join=e.avg=e.sum=e.min=e.max=e.subArray=e.analyzeArrayChanges=e.groupByLast=e.compareArrays=e.where=void 0,e.where=function(t,e){if(!Array.isArray(t))return t;if(!e||"object"!=typeof e)return[];var r=[],n=Object.entries(e);return t.forEach((function(t){n.some((function(e){return t[e[0]]===e[1]}))&&(r[r.length]=t)})),r},e.compareArrays=function(t,e,r){if(void 0===r&&(r=function(t,e){return t===e}),t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(!r(t[n],e[n]))return!1;return!0},e.groupByLast=function(t,e){return t.reduce((function(t,r){var n;return Object.assign({},t,((n={})[r[e]]=r,n))}),{})},e.analyzeArrayChanges=function(t,e,r){void 0===r&&(r=function(t,e){return t===e});var n={},o=[],i=[];return e.forEach((function(e){var o=t.findIndex((function(t){return r(e,t)}));o<0?i.push(e):n[o]=!0})),t.forEach((function(t,e){e in n||o.push(t)})),{toAdd:i,toRemove:o}},e.subArray=function(t,e,r){if(void 0===e&&(e=0),void 0===r&&(r=t.length-1),!Array.isArray(t))return t;for(var n=[],o=t.length<r?t.length-1:r,i=e;i<=o;i++)n[n.length]=t[i];return n},e.max=function(t){return Array.isArray(t)?0===t.length?0:t.reduce((function(t,e){return t>e?t:e})):t},e.min=function(t){return Array.isArray(t)?0===t.length?0:t.reduce((function(t,e){return t<e?t:e})):t},e.sum=function(t){return Array.isArray(t)?0===t.length?0:t.reduce((function(t,e){return t+e})):t},e.avg=function(t){return Array.isArray(t)?0===t.length?0:t.reduce((function(t,e){return t+e}))/t.length:t},e.join=function(t,e,r,n){return void 0===r&&(r=""),void 0===n&&(n=""),Array.isArray(t)?r+t.join(e)+n:r+t+n},e.getLast=function(t){return Array.isArray(t)?t[t.length-1]:t},e.getRandomItem=r,e.getNRandom=function(t,e){if(!Array.isArray(t))return t;if(0===t.length||0===e)return[];if(t.length<=e)return t;for(var n=new Set;n.size<=e;){var o=r(t);o&&n.add(o)}return Array.from(n)},e.makeUnique=function(t){return Array.isArray(t)?Array.from(new Set(t)):t},e.createFilledArray=function(t,e){return"function"==typeof e?new Array(t).fill(null).map((function(){return e()})):new Array(t).fill(e)},e.eachOther=function(t,e){t.forEach((function(r,n){for(var o=n+1;o<t.length;o++)e(r,t[o])}))},e.mergeArrays2=function(t,e,r){var n=[];return t.forEach((function(t){e.forEach((function(e){n.push(r(t,e))}))})),n},e.mergeArrays3=function(t,e,r,n){var o=[];return t.forEach((function(t){e.forEach((function(e){r.forEach((function(r){o.push(n(t,e,r))}))}))})),o}},9240:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.coerceBooleanProperty=void 0,e.coerceBooleanProperty=function(t){return null!==t&&""+t!="false"}},8042:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseColor=e.rgb2int=e.hex2int=e.int2rgb=e.int2hex=e.rgb2hex=e.shadeColor=e.hex2rgb=e.lerpHexaColor=e.lerpColor=void 0;var n=r(5595),o={black:[0,0,0],white:[255,255,255],red:[255,0,0],green:[0,255,0],blue:[0,0,255]};function i(t){var e=parseInt(t.slice(1),16);return[e>>16,e>>8&255,255&e]}function a(t,e,r){return"#"+(16777216+65536*(t<255?t<1?0:t:255)+256*(e<255?e<1?0:e:255)+(r<255?r<1?0:r:255)).toString(16).slice(1)}e.lerpColor=function(t,e,r){var o=r*t[0]+(1-r)*e[0],i=r*t[1]+(1-r)*e[1],a=r*t[2]+(1-r)*e[2],u=r*t[3]+(1-r)*e[3];return[n.clamp(o,0,255),n.clamp(i,0,255),n.clamp(a,0,255),n.clamp(u,0,255)]},e.lerpHexaColor=function(t,e,r){var n=+t.replace("#","0x"),o=n>>16,i=n>>8&255,a=255&n,u=+e.replace("#","0x");return"#"+((1<<24)+(o+r*((u>>16)-o)<<16)+(i+r*((u>>8&255)-i)<<8)+(a+r*((255&u)-a))|0).toString(16).slice(1)},e.hex2rgb=i,e.shadeColor=function(t,e){var r=i(t),n=Math.round(2.55*e);return a(r[0]+n,r[1]+n,r[2]+n)},e.rgb2hex=a,e.int2hex=function(t){var e=t.toString(16);return"#"+("000000".substr(0,6-e.length)+e).toUpperCase()},e.int2rgb=function(t){return[t>>16,t>>8&255,255&t]},e.hex2int=function(t){return parseInt(t,16)},e.rgb2int=function(t,e,r){return t<<16|e<<8&65535|r},e.parseColor=function(t){if(o[t])return o[t];var e=t.match(/^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);if(e)return[parseInt(e[1],16),parseInt(e[2],16),parseInt(e[3],16)];var r=t.match(/rgba?\((\d{1,3}) *, *(\d{1,3}) *, *(\d{1,3})( *, *\d*.?\d*)\)/);if(r)return[parseInt(r[1],10),parseInt(r[2],10),parseInt(r[3],10)];throw new Error("Cannot parse color: "+t)}},7291:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.isValidDate=void 0,e.isValidDate=function(t){try{var e=new Date(t);return!isNaN(e.getTime())}catch(t){return!1}}},2102:function(t,e,r){var n=this&&this.__spreadArrays||function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),o=0;for(e=0;e<r;e++)for(var i=arguments[e],a=0,u=i.length;a<u;a++,o++)n[o]=i[a];return n};Object.defineProperty(e,"__esModule",{value:!0}),e.getOrCreateAndAppend=e.getOrCreate=e.chooseColorUsingDefaultInput=e.CreateElement=e.createCheckbox=e.CreateImage=e.dragElement=e.elementToString=void 0;var o=r(5601);function i(t,e){var r=document.createElement(t);return e?(Object.entries(e).forEach((function(t){switch(t[0]){case"className":r.className=t[1];break;case"onChange":r.addEventListener("change",t[1]);break;case"onClick":r.addEventListener("click",t[1]);break;case"checked":r.checked=t[1];break;case"styles":Object.entries(t[1]).forEach((function(t){r.style[t[0]]=t[1]}));break;case"children":Array.isArray(t[1])?r.append.apply(r,t[1]):r.append(t[1]);break;case"content":t[1]&&(r.innerHTML=t[1]);break;default:r.setAttribute(t[0],t[1])}})),r):r}function a(t,e){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];var o=t.querySelector(e+"."+r.join("."));return o||i(e,{className:r.join(" ")})}e.elementToString=function t(e){var r=Array.from(e.classList).join("."),n=e.id?"#"+e.id:"";return(e.parentElement?t(e.parentElement)+" > ":"")+e.localName+n+(r?"."+r:"")},e.dragElement=function(t,e){void 0===e&&(e=".header");var r=0,n=0,o=0,i=0,a=function(e){(e=e||window.event).preventDefault(),r=o-e.clientX,n=i-e.clientY,o=e.clientX,i=e.clientY,t.style.top=t.offsetTop-n+"px",t.style.left=t.offsetLeft-r+"px"},u=function(t){(t=t||window.event).preventDefault(),o=t.clientX,i=t.clientY,document.onpointerup=c,document.onpointermove=a},s=t.querySelector(e);function c(){document.onpointerup=null,document.onpointermove=null}return s?s.addEventListener("pointerdown",u):t.addEventListener("pointerdown",u),{clear:function(){s?s.removeEventListener("pointerdown",u):t.removeEventListener("pointerdown",u)}}},e.CreateImage=function(t){var e=i("img",t);return o.ALLOW_IMAGES_ONLY_WITH_ALLOWED_CORS&&(e.crossOrigin="Anonymous"),e},e.createCheckbox=function(t,e,r){void 0===r&&(r=!1);var n=i("input",{checked:r,type:"checkbox",onChange:function(){return e(n.checked)}});return i("label",{className:"checkbox-container",children:[t,n,i("span",{className:"checkmark"})]})},e.CreateElement=i,e.chooseColorUsingDefaultInput=function(t,e){return void 0===t&&(t="#000000"),new Promise((function(r){var n=i("input",{type:"color",className:"hidden",value:t,onInput:"function"==typeof e?function(){return e(n.value)}:void 0,onChange:function(){r(n.value),document.body.removeChild(n)}});document.body.appendChild(n),n.click()}))},e.getOrCreate=a,e.getOrCreateAndAppend=function(t,e){for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];var i=a.apply(void 0,n([t,e],r));return t.appendChild(i),i}},9199:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.imageAsPromise=e.createImage=e.deserializeImage=e.serializeImage=void 0;var n=r(2102);e.serializeImage=function(t){var e=n.CreateElement("canvas",{width:t.width,height:t.height});return e.getContext("2d").drawImage(t,0,0),e.toDataURL("image/png")},e.deserializeImage=function(t){return n.CreateImage({src:t})},e.createImage=function(t,e,r){void 0===r&&(r=e);var o=n.CreateElement("canvas",{width:e,height:r});return t(o.getContext("2d")),o},e.imageAsPromise=function(t){return new Promise((function(e,r){var n=document.createElement("img"),o=function(i){if(n.dataset.hasError=i?"true":"false","error"===i.type)return r(i),console.error("Error during loading image ",t);n.removeEventListener("load",o),n.removeEventListener("error",o),e(n)};n.addEventListener("load",o),n.addEventListener("error",o),n.src=t}))}},5928:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(7858),e),o(r(6042),e),o(r(9240),e),o(r(8042),e),o(r(7291),e),o(r(2102),e),o(r(9199),e),o(r(5595),e),o(r(5065),e),o(r(7799),e),o(r(1458),e),o(r(669),e),o(r(1054),e),o(r(8244),e),o(r(8476),e),o(r(1320),e),o(r(5429),e),o(r(7788),e),o(r(3683),e)},669:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.compareEventKey=e.getButtonFromEventButtons=e.getButtonFromEvent=void 0;var n=r(542);function o(t){return 0===t?n.Button.LEFT:1===t?n.Button.MIDDLE:2===t?n.Button.RIGHT:void 0}e.getButtonFromEvent=function(t){return o(t.button)},e.getButtonFromEventButtons=o,e.compareEventKey=function(t,e){return t.code===e}},5595:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&n(e,t,r);return o(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.toDegrees=e.getDiff=e.isPowerOf2=e.average=e.random=e.randomInt=e.lamp=e.log2i=e.lerp=e.binomialCoefficient=e.clamp=e.hash3Numbers=e.hash2Numbers=e.roundToDecimals=e.pad=void 0;var a=i(r(5429));function u(t,e,r){return Math.max(e,Math.min(t,r))}e.pad=function(t,e){var r="00000000000000"+t;return r.substr(r.length-e)},e.roundToDecimals=function(t,e,r){void 0===e&&(e=2),void 0===r&&(r="round");var n=parseInt(1+new Array(e+1).join("0"),10);return(Math[r](t*n)/n).toFixed(e)},e.hash2Numbers=function(t,e){var r=t>=0?2*t:2*-t-1,n=e>=0?2*e:2*-e-1;return(r+n)*(r+n+1)/2+n},e.hash3Numbers=function(t,e,r){var n=t>=0?2*t:2*-t-1,o=e>=0?2*e:2*-e-1,i=r>=0?2*r:2*-r-1,a=(n+o)*(n+o+1)/2+o;return(a+i)*(a+i+1)/2+i},e.clamp=u,e.binomialCoefficient=function(t,e){var r=1;if(e>t)return 0;for(var n=1;n<=e;n++)r*=t,t--,r/=n;return r},e.lerp=function(t,e,r){return e*r+(1-r)*t},e.log2i=function(t){for(var e=0;(t>>=1)>0;)e++;return e},e.lamp=function(t,e,r){return u((e-t)*r+t,t,e)},e.randomInt=function(t,e){return a.randomIntBetween(t,e)},e.random=function(t,e){return a.randomFloatBetween(t,e)},e.average=function(t){for(var e=0,r=0,n=t;r<n.length;r++){e+=n[r]}return e/t.length},e.isPowerOf2=function(t){return 0==(t&t-1)},e.getDiff=function(t,e){return Math.abs(t-e)};var s=180/Math.PI;e.toDegrees=function(t){return t*s}},5065:(__unused_webpack_module,exports)=>{function parseCookies(t){var e={};return(t?t.toString().split(";"):[]).forEach((function(t){var r=t.split("="),n=r.shift();n&&(e[n.trim()]=decodeURI(r.join("=")))})),e}function isIn(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];if(Array.isArray(e[0])){if(e[0].indexOf(t)>=0)return!0}else if(e.indexOf(t)>=0)return!0;return!1}function parseJSONWithComments(t){return JSON.parse(t.replace(/\/\/.*\n/g,""))}function setCookie(t,e,r){var n=new Date;n.setTime(n.getTime()+24*r*60*60*1e3);var o=t+"="+e+";expires="+n.toUTCString();return"undefined"!=typeof document&&(document.cookie=o),t+"="+e}function getCookie(t,e){void 0===e&&(e="undefined"!=typeof document?document.cookie:"");for(var r=t+"=",n=0,o=e.split(";");n<o.length;n++){for(var i=o[n];" "===i.charAt(0);)i=i.substring(1);if(0===i.indexOf(r))return i.substring(r.length,i.length)}return""}function parseParams(t,e,r){void 0===t&&(t="undefined"!=typeof window?window.location.search.substring(1):""),void 0===e&&(e="&"),void 0===r&&(r="=");for(var n={},o=0,i=t.split(e);o<i.length;o++){var a=i[o].split(r),u=a[0],s=a[1];void 0===n[u]?n[u]=decodeURIComponent(s):"string"==typeof n[u]?n[u]=[n[u],decodeURIComponent(s)]:n[u].push(decodeURIComponent(s))}return n}function objectToQueryParams(t){var e="";for(var r in t)t.hasOwnProperty(r)&&(e+=(e.length>0?"&":"?")+r+"="+t[r]);return e}function serialize(t){for(var e in t)t.hasOwnProperty(e)&&"function"==typeof t[e]&&(t[e]=t[e].toString());return JSON.stringify(t)}function parse(obj){var result=JSON.parse(obj);for(var i in result)if(result.hasOwnProperty(i)&&"string"==typeof result[i]&&(0===result[i].indexOf("function (")||result[i].match(/^\([_a-zA-Z0-9]+( *, *[_a-zA-Z0-9]+)*\) *=>/)))try{eval("result[i] = "+result[i])}catch(t){result[i]=t}return result}function map(t,e){var r={};return e.forEach((function(e){e.mapFunction?e.attrD?r[e.attrD]=e.mapFunction(t[e.attrS]):r[e.attrS]=e.mapFunction(t[e.attrS]):e.attrD?r[e.attrD]=t[e.attrS]:r[e.attrS]=t[e.attrS]})),r}Object.defineProperty(exports,"__esModule",{value:!0}),exports.map=exports.parse=exports.serialize=exports.objectToQueryParams=exports.parseParams=exports.getCookie=exports.setCookie=exports.parseJSONWithComments=exports.isIn=exports.parseCookies=void 0,exports.parseCookies=parseCookies,exports.isIn=isIn,exports.parseJSONWithComments=parseJSONWithComments,exports.setCookie=setCookie,exports.getCookie=getCookie,exports.parseParams=parseParams,exports.objectToQueryParams=objectToQueryParams,exports.serialize=serialize,exports.parse=parse,exports.map=map},1054:function(t,e){var r=this&&this.__spreadArrays||function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),o=0;for(e=0;e<r;e++)for(var i=arguments[e],a=0,u=i.length;a<u;a++,o++)n[o]=i[a];return n};function n(t){var e=[];for(var r in t)t.hasOwnProperty(r)&&e.push({key:r,value:t[r]});return e}Object.defineProperty(e,"__esModule",{value:!0}),e.makeFlat=e.isPlain=e.size=e.roughSizeOfObject=e.setNestedProperty=e.createMergedObject=e.getNestedProperty=e.getObjectEntries=e.getOrSetProperty=e.deepCopy=e.deepEqual=e.without=void 0,e.without=function(t,e){return n(t).filter((function(t){return!e.includes(t.key)})).reduce((function(t,e){return t[e.key]=e.value,t}),{})},e.deepEqual=function t(e,r){var n,o,i,a;if(typeof e!=typeof r)return!1;if("object"==typeof e){if(!e||!r)return e===r;if((null===(o=null===(n=e)||void 0===n?void 0:n.constructor)||void 0===o?void 0:o.name)!==(null===(a=null===(i=r)||void 0===i?void 0:i.constructor)||void 0===a?void 0:a.name))return!1;var u=Object.keys(e);if(u.length!==Object.keys(r).length)return!1;for(var s=0,c=u;s<c.length;s++){var l=c[s];if(!t(e[l],r[l]))return!1}return!0}return!("number"!=typeof e||"number"!=typeof r||!isNaN(+e)||!isNaN(+r))||e===r},e.deepCopy=function t(e){var r,n;if("object"==typeof e){if(Array.isArray(e))return e.map((function(e){return t(e)}));if("Object"!==(null===(n=null===(r=e)||void 0===r?void 0:r.constructor)||void 0===n?void 0:n.name))throw new Error("This method cannot copy class instances");var o={};return Object.entries(e).forEach((function(e){var r=e[0],n=e[1];o[r]=t(n)})),o}if("function"==typeof e)throw new Error("This method cannot copy functions");return e},e.getOrSetProperty=function(t,e,r){var n=t[e];return n||(t[e]=r,r)},e.getObjectEntries=n,e.getNestedProperty=function(t,e,r){return void 0===r&&(r="."),e.split(r).reduce((function(t,e){return t?t[e]:void 0}),t)},e.createMergedObject=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return Object.assign.apply(Object,r([{},t],e))},e.setNestedProperty=function(t,e,r){for(var n=e,o=t.split("."),i=0;i<o.length-1;i++)n=n[o[i]];n[o[o.length-1]]=r},e.roughSizeOfObject=function(t){for(var e=[],r=[t],n=0;r.length;){var o=r.pop();if("boolean"==typeof o)n+=4;else if("string"==typeof o)n+=o.length<<1;else if("number"==typeof o)n+=8;else if("object"==typeof o&&-1===e.indexOf(o))for(var i in e.push(o),o)o.hasOwnProperty(i)&&r.push(o[i])}return n},e.size=function(t){var e=0;for(var r in t)t.hasOwnProperty(r)&&e++;return e},e.isPlain=function(t){for(var e in t)if(t.hasOwnProperty(e)&&"object"==typeof t[e])return!1;return!0},e.makeFlat=function(t,e,r,n){void 0===r&&(r="."),void 0===n&&(n=!1);var o=e.indexOf(r)>=0?e.split(r):[e];return t.reduce((function(t,e){var r=o.reduce((function(t,e){return t?t[e]:void 0}),e);return void 0===r&&n||t.push(r),t}),[])}},8244:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseBooleanValue=void 0,e.parseBooleanValue=function(t){return!!t.match(/(1|true|yes|ano|áno)/i)||!t.match(/(0|false|no|nie)/i)&&void 0}},8476:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.setDefaultEnvironment=e.getProcessData=e.setEnvironment=e.isDev=e.isProd=e.isTest=void 0,e.isTest=function(){return!1},e.isProd=function(){return!0},e.isDev=function(){return!1},e.setEnvironment=function(t){},e.getProcessData=function(){return{memoryUsage:process.memoryUsage(),cpuUsage:process.cpuUsage(),upTime:process.uptime(),version:process.version,platform:process.platform}},e.setDefaultEnvironment=function(){0}},5429:(t,e)=>{function r(t,e){return t+Math.random()*(e-t)}Object.defineProperty(e,"__esModule",{value:!0}),e.randomItem=e.randomBoolean=e.randomIntBetween=e.randomFloatBetween=void 0,e.randomFloatBetween=r,e.randomIntBetween=function(t,e){return Math.round(r(t,e))},e.randomBoolean=function(){return Math.random()<.5},e.randomItem=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return t[Math.floor(Math.random()*t.length)]}},1320:function(t,e){var r=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function a(t){try{s(n.next(t))}catch(t){i(t)}}function u(t){try{s(n.throw(t))}catch(t){i(t)}}function s(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,u)}s((n=n.apply(t,e||[])).next())}))},n=this&&this.__generator||function(t,e){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},o=this&&this.__spreadArrays||function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),o=0;for(e=0;e<r;e++)for(var i=arguments[e],a=0,u=i.length;a<u;a++,o++)n[o]=i[a];return n};Object.defineProperty(e,"__esModule",{value:!0}),e.callFirstFunction=e.createInstance=e.createClass=void 0,e.createClass=function(t,e){var r=Object.create(t.prototype);return t.apply(r,e),r},e.createInstance=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];return new(t.bind.apply(t,o([void 0],e)))},e.callFirstFunction=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return r(this,void 0,void 0,(function(){var e,r,o;return n(this,(function(n){switch(n.label){case 0:e=0,r=t,n.label=1;case 1:return e<r.length?"function"!=typeof(o=r[e])?[3,3]:[4,o()]:[3,4];case 2:return[2,n.sent()];case 3:return e++,[3,1];case 4:return[2]}}))}))}},1458:(t,e)=>{function r(t,e,r){for(var n=0,o=t.length-1;n<=o;){var i=o+n>>1,a=r(e,t[i]);if(a>0)n=i+1;else{if(!(a<0))return i;o=i-1}}return~n}Object.defineProperty(e,"__esModule",{value:!0}),e.sortedMerge=e.SortedPartition=e.SortedDifference=e.sortedPickAll=e.sortedRemove=e.sortedInsertAll=e.sortedInsert=e.sortedFind=e.binarySearch=void 0,e.binarySearch=r,e.sortedFind=function(t,e,n){var o=r(t,e,n);if(!(o<0))return t[o]},e.sortedInsert=function(t,e,n){var o=r(t,e,n),i=o<0?~o:o;return t.splice(i,0,e),i},e.sortedInsertAll=function(t,e,n,o){void 0===o&&(o=!1);for(var i=0,a=0,u=e;a<u.length;a++){var s=u[a];if(i=r(t.slice(i),s,n),o&&i>=0)break;i<0&&(i=~i),t.splice(i,0,s)}return e.length},e.sortedRemove=function(t,e,n){var o=r(t,e,n);if(!(o<0)){var i=t[o];return t.splice(o,1),i}},e.sortedPickAll=function(t,e,r){for(var n=0,o=0,i=[];n<e.length&&o<t.length;){var a=e[n],u=t[o],s=r(a,u);s>0?++o:s<0?++n:(i.push(u),++n,++o)}return i},e.SortedDifference=function(t,e,r){for(var n=0,o=0,i=[];n<e.length&&o<t.length;){var a=r(e[n],u=t[o]);a>0?(i.push(u),++o):a<0?++n:(++n,++o)}for(;o<t.length;){var u=t[o];i.push(u),++o}return i},e.SortedPartition=function(t,e,r){for(var n=0,o=0,i=[],a=[];n<e.length&&o<t.length;){var u=r(e[n],s=t[o]);u>0?(a.push(s),++o):u<0?++n:(i.push(s),++n,++o)}for(;o<t.length;){var s=t[o];a.push(s),++o}return[i,a]},e.sortedMerge=function(t,e,r){for(var n=0,o=0,i=[];n<e.length&&o<t.length;){var a=e[n],u=t[o],s=r(a,u);s>0?(i.push(u),++o):s<0?(i.push(a),++n):(i.push(a),++n,++o)}for(;n<e.length;){var c=e[n];i.push(c),++n}for(;o<t.length;){c=t[o];i.push(c),++o}return i}},7863:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&n(e,t,r);return o(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.isValidEmail=e.isValidPhoneNumber=e.isTimeFormat=e.isSnakeCase=e.isUpperSnakeCase=e.isLowerSnakeCase=e.isLowerCamelCase=e.isUpperCamelCase=e.isCamelCase=void 0;var a=i(r(3254)),u={HH:"(2[0-3]|[01]\\d)",H:"(2[0-3]|[01]?\\d)",mm:"([0-5]\\d)",m:"([0-5]?\\d)",MM:"(0\\d|1[0-2]|\\d)",M:"([1-9]|1[0-2])",ss:"([0-5]\\d)",s:"([0-5]?\\d)",YYYY:"([1-9]\\d{3,3})",YY:"(\\d{2,2})",DD:"([0-3]\\d)"};e.isCamelCase=function(t){return new RegExp("^[A-Z]?[a-z]+([A-Z][a-z]*)*$","g").test(t)},e.isUpperCamelCase=function(t){return new RegExp("^([A-Z][a-z]*)*$","g").test(t)},e.isLowerCamelCase=function(t){return new RegExp("^[a-z]+([A-Z][a-z]*)*$","g").test(t)},e.isLowerSnakeCase=function(t){return new RegExp("^[a-z]*(_[a-z]*)*$","g").test(t)},e.isUpperSnakeCase=function(t){return new RegExp("^[A-Z]*(_[A-Z]*)*$","g").test(t)},e.isSnakeCase=function(t){return new RegExp("^([a-z]*|[A-Z]*)(_[a-zA-Z]*)*$","g").test(t)},e.isTimeFormat=function(t,e){for(var r in u)u.hasOwnProperty(r)&&(e=e.replace(r,u[r]));return new RegExp("^"+e+"$").test(t)},e.isValidPhoneNumber=function(t){return a.isValidPhoneNumber(t)},e.isValidEmail=function(t){return a.isValidEmail(t)}},7788:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&n(e,t,r);return o(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.replaceForAll=e.getFormattedNumber=e.joinString=e.joinSingle=e.contains=e.toBasicForm=e.getAsciiArray=e.transformToBasicFormat=e.format=e.swapCase=e.collapseWhitespace=e.occurrences=e.between=e.removeEmptyLines=e.template=e.removeAll=e.repeat=e.count=e.getLastPart=e.toCapital=e.capitalize=e.toUpperCamelCase=e.toLowerCamelCase=e.toLowerSnakeCase=e.toUpperSnakeCase=e.cutUsing=e.removeAccentedCharacters=void 0;var a=r(6042),u=i(r(7863)),s="ąàáäâãåæăćčĉďęèéëêĝĥìíïîĵłľńňòóöőôõðøśșşšŝťțţŭùúüűûñÿýçżźž",c="aaaaaaaaacccdeeeeeghiiiijllnnoooooooossssstttuuuuuunyyczzz",l=s+s.toUpperCase(),f=c+c.toUpperCase();function h(t){return t&&t.replace?t.replace(/./g,(function(t){var e=l.indexOf(t);return e>=0?f[e]:t})):t}function p(t){return u.isLowerCamelCase(t)?t:t.trim().replace(/([a-z])([A-Z])([A-Z])/g,"$1$2_$3").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase().replace(/(-|_| |\s)+(.)?/g,(function(t,e,r){return r?r.toUpperCase():""})).replace(/^./,(function(t){return t.toLowerCase()}))}function d(t){return t.replace(/^./,(function(t){return t.toUpperCase()}))}function y(t){return t.replace(/[\s\uFEFF\xA0]{2,}/g," ")}e.removeAccentedCharacters=h,e.cutUsing=function(t,e,r,n){return void 0===r&&(r="..."),void 0===n&&(n=!0),t.length<=e?t:t.substr(0,e-(n?r.length-1:0))+r},e.toUpperSnakeCase=function(t){return u.isCamelCase(t)?t.replace(/([a-z])([A-Z])/g,"$1_$2").replace(/([A-Z])([A-Z])/g,"$1_$2").toUpperCase():u.isUpperSnakeCase(t)?t:t.replace(/(-|_| |\s)+(.)?/g,(function(t,e,r){return r?"_"+r:""})).replace(/^_/,"").toUpperCase()},e.toLowerSnakeCase=function(t){return u.isCamelCase(t)?t.replace(/([a-z])([A-Z])/g,"$1_$2").replace(/([A-Z])([A-Z])/g,"$1_$2").toLowerCase():u.isLowerSnakeCase(t)?t:t.replace(/(-|_| |\s)+(.)?/g,(function(t,e,r){return r?"_"+r:""})).replace(/^_/,"").toLowerCase()},e.toLowerCamelCase=p,e.toUpperCamelCase=function(t){return u.isUpperCamelCase(t)?t:d(p(t))},e.capitalize=function(t){return t.toLowerCase().replace(/^./,(function(t){return t.toUpperCase()}))},e.toCapital=d,e.getLastPart=function(t,e){if(void 0===e&&(e=" "),!t||!t.split)return t;var r=t.split(e);return r[r.length-1]},e.count=function(t,e){return(t.match(new RegExp(e,"g"))||[]).length},e.repeat=function(t,e){return new Array(e+1).join(t)},e.removeAll=function(t,e){return t.replace(new RegExp("("+e.join("|")+")","g"),"")},e.template=function(t,e,r,n){void 0===r&&(r="{{"),void 0===n&&(n="}}");var o=r.replace(/[-[\]()*\s]/g,"\\$&").replace(/\$/g,"\\$"),i=n.replace(/[-[\]()*\s]/g,"\\$&").replace(/\$/g,"\\$");return t.replace(new RegExp(o+"(.+?)"+i,"g"),(function(t,r){return String(e[r])}))},e.removeEmptyLines=function(t){return t.replace(/^\s*$(?:\r\n?|\n)/gm,"")},e.between=function(t,e,r,n){void 0===n&&(n=!1);var o=function(t){return n?t.trim():t},i=t.indexOf(e),a=t.indexOf(r);return o(i<0&&a>=0?t.substring(0,a):a<0&&i>=0?t.substring(i+e.length,t.length):t.substring(i+e.length,a))},e.occurrences=function(t,e,r){void 0===r&&(r=!1);for(var n=t.indexOf(e),o=0,i=r?1:e.length;n>=0;)o++,n=t.indexOf(e,n+i);return o},e.collapseWhitespace=y,e.swapCase=function(t){return t.replace(/\S/g,(function(t){var e=t.toLowerCase();return e===t?t.toUpperCase():e}))},e.format=function(t,e,r){void 0===r&&(r="{}");for(var n,o=[],i=0,a=0;a<e.length;)n=i,i=t.indexOf(r,i),o.push(t.substring(n,i)),o.push(e[a++]),i+=r.length;return o.push(t.substring(i)),o.join("")},e.transformToBasicFormat=function(t){return y(h(t).toLowerCase()).trim()},e.getAsciiArray=function(t){for(var e=[],r=0,n=t;r<n.length;r++){var o=n[r];e[e.length]=o.charCodeAt(0)}return e},e.toBasicForm=function(t){return h(t.toLowerCase())},e.contains=function(t,e){return!!t&&h(t.toLowerCase()).indexOf(e)>=0},e.joinSingle=function(t,e,r){return r.startsWith(e)&&t.endsWith(e)?t+r.substring(e.length):r.startsWith(e)||t.endsWith(e)?t+r:t+e+r},e.joinString=function(t,e,r,n){return void 0===e&&(e=" "),void 0===r&&(r=""),void 0===n&&(n=""),a.join(t,e,r,n)},e.getFormattedNumber=function(t,e){return void 0===e&&(e="+421"),(t=t.replace(/[( )/-]/g,"")).startsWith("+")?t:t.startsWith("00")?t.substring(2):t.startsWith("09")||t.startsWith("02")?e+t.substring(1):t},e.replaceForAll=function(t,e,r){return e.map((function(e){return t.replace(r,e)}))}},3683:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getTransform=e.createSvg=void 0;e.createSvg=function(t){return document.createElementNS("http://www.w3.org/2000/svg",t)},e.getTransform=function(t){var e=t.transform.baseVal;if(0===e.numberOfItems||e.getItem(0).type!==SVGTransform.SVG_TRANSFORM_TRANSLATE){var r=t.ownerSVGElement.createSVGTransform();r.setTranslate(0,0),t.transform.baseVal.insertItemBefore(r,0)}return e.getItem(0)}},7799:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getEndOfTheDay=e.getStartOfTheDay=e.createStopWatch=e.formatTime=e.dateAgo=void 0;var r=Object.entries({year:31536e3,month:2592e3,week:604800,day:86400,hour:3600,minute:60,second:1});function n(t,e){return t?(isNaN(e.ms)||t.setMilliseconds(e.ms),isNaN(e.s)||t.setSeconds(e.s),isNaN(e.m)||t.setMinutes(e.m),isNaN(e.h)||t.setHours(e.h),t):new Date("")}e.dateAgo=function(t){if(t){var e=Math.floor((+new Date-+new Date(t))/1e3);if(e<29)return"Just now";for(var n=void 0,o=0,i=r;o<i.length;o++){var a=i[o],u=a[0],s=a[1];if(!((n=Math.floor(e/s))<=0))return 1===n?n+" "+u+" ago":n+" "+u+"s ago"}}return t},e.formatTime=function(t,e){var r=function(t){return t<10?"0"+t:""+t},n=new RegExp("(DD|MM|YYYY|YYY|YY|HH|mm|SS)","g"),o=r(t.getDate()),i=r(t.getMonth()+1),a=t.getFullYear()+"",u=a.substr(1,4),s=u.substr(1,4),c=r(t.getHours()),l=r(t.getMinutes()),f=r(t.getSeconds());return e.replace(n,(function(t){switch(t){case"DD":return o;case"MM":return i;case"YYYY":return a;case"YYY":return u;case"YY":return s;case"HH":return c;case"mm":return l;case"SS":return f;default:return t}}))},e.createStopWatch=function(){var t=Date.now(),e=function(){return Date.now()-t};return{getDiffMs:e,getDiff:function(){return e()+"ms"}}},e.getStartOfTheDay=function(t){return n(t,{ms:0,s:0,m:0,h:0})},e.getEndOfTheDay=function(t){return n(t,{ms:999,s:59,m:59,h:23})}},3871:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(3254),e)},3254:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.isValidEmail=e.isValidPhoneNumber=e.isEmpty=e.isElement=e.isUndefined=e.isFloat=e.isInt=e.isArray=e.isBoolean=e.isNumber=e.isObject=e.isString=e.isFunction=void 0;var r=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/i,n=/^([+]|00)?[(]?[0-9]{3,4}[)]?[-\s.]?[0-9]{2,3}[-\s.]?[0-9]{2,6}([-\s.]?[0-9]{3})?$/im;function o(t){return typeof t}function i(t){return"object"===o(t)}e.isFunction=function(t){return"function"===o(t)},e.isString=function(t){return"string"===o(t)},e.isObject=i,e.isNumber=function(t){return"number"===o(t)},e.isBoolean=function(t){return"boolean"===o(t)},e.isArray=function(t){return Array.isArray(t)},e.isInt=function(t){return"number"===o(t)&&t%1==0},e.isFloat=function(t){return"number"===o(t)&&t%1!=0},e.isUndefined=function(t){return"undefined"===o(t)},e.isElement=function(t){try{return t instanceof HTMLElement}catch(e){return i(t)&&1===t.nodeType&&i(t.style)&&i(t.ownerDocument)}},e.isEmpty=function(t){return null==t||("string"==typeof t?0===t.length||/^[\s\xa0]*$/.test(t):Array.isArray(t)?0===t.length:t.constructor===Object&&0===Object.keys(t).length)},e.isValidPhoneNumber=function(t){return!!t&&n.test(t.trim())},e.isValidEmail=function(t){return!!t&&r.test(t.trim())}}},__webpack_module_cache__={};function __webpack_require__(t){if(__webpack_module_cache__[t])return __webpack_module_cache__[t].exports;var e=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t].call(e.exports,e,e.exports,__webpack_require__),e.exports}return __webpack_require__(3607)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,