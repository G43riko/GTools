!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("G43Lib",[],t):"object"==typeof exports?exports.G43Lib=t():e.G43Lib=t()}(self,(function(){return(()=>{"use strict";var __webpack_modules__={1716:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(542),t),o(n(3527),t),o(n(8364),t),o(n(5679),t),o(n(5083),t),o(n(7321),t),o(n(8439),t),o(n(5421),t),o(n(2740),t),o(n(8037),t),o(n(3871),t),o(n(5118),t),o(n(3081),t),o(n(4991),t),o(n(7554),t),o(n(4503),t),o(n(3833),t),o(n(2501),t),o(n(4650),t),o(n(1230),t),o(n(5928),t)},5797:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FileManager=void 0;var r=n(5440),o=function(){function e(){this.input=document.createElement("input"),this.input.setAttribute("type","file"),this.input.setAttribute("value","files"),this.input.setAttribute("class","hide"),this.link=document.createElement("a"),this.link.setAttribute("class","hide"),this.link.setAttribute("href","")}return e.prototype.saveFile=function(e,t,n){void 0===n&&(n=r.FileTypes.TXT),this.link.href=URL.createObjectURL(new Blob([t],{type:n})),this.link.download=e,this.link.click()},e.prototype.saveImage=function(e,t){this.link.href="string"==typeof t?t:t.src,this.link.download=e,this.link.click()},e.prototype.loadImage=function(e){this.input.onchange=function(t){var n=t.target.files;if(!(n.length<=0)){var r=new FileReader;r.onload=function(){var t=new Image;t.src=r.result,e(t,n[0])},r.readAsDataURL(n[0])}},this.input.click()},e.prototype.loadFile=function(e){this.input.onchange=function(t){var n=new FileReader,r=t.target.files;r.length>0&&(n.onload=function(){return e(n.result,r)},n.readAsText(r[0]))},this.input.click()},e.prototype.loadBinaryFile=function(e){this.input.onchange=function(t){var n=new FileReader,r=t.target.files;r.length>0&&(n.onload=function(){return e(n.result,r[0].name)},n.readAsBinaryString(r[0]))},this.input.click()},e}();t.FileManager=o},4673:function(e,t){var n,r=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.GMap=void 0;var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.get=function(t,n){return e.prototype.get.call(this,t)||n},t.prototype.getOrCreate=function(t,n){var r=e.prototype.get.call(this,t);return r||(this.set(t,n),n)},t}(Map);t.GMap=o},2740:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.GLoggerInstance=t.GLoggerCallbackHolder=t.SimpleColorFormatter=t.GLoggerDefaultFormatter=t.GLoggerPriority=void 0,o(n(5797),t),o(n(3113),t),o(n(4673),t),o(n(1556),t),o(n(3602),t),o(n(927),t);var i=n(4031);Object.defineProperty(t,"GLoggerPriority",{enumerable:!0,get:function(){return i.GLoggerPriority}});var a=n(1703);Object.defineProperty(t,"GLoggerDefaultFormatter",{enumerable:!0,get:function(){return a.GLoggerDefaultFormatter}}),Object.defineProperty(t,"SimpleColorFormatter",{enumerable:!0,get:function(){return a.SimpleColorFormatter}});var u=n(5505);Object.defineProperty(t,"GLoggerCallbackHolder",{enumerable:!0,get:function(){return u.GLoggerCallbackHolder}});var s=n(2875);Object.defineProperty(t,"GLoggerInstance",{enumerable:!0,get:function(){return s.GLoggerInstance}})},1556:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.KeyValueCounter=void 0;var n=function(){function e(){this.data={},this.results=[],this.processed=!1}return e.prototype.add=function(e){e in this.data?this.data[e]++:this.data[e]=1,this.processed&&(this.processed=!1)},e.prototype.addAll=function(e){e.forEach(this.add,this)},e.prototype.getAll=function(){return this.processed||this.process(),this.results},e.prototype.getTopN=function(e){return this.processed||this.process(),this.results.slice(0,e)},e.prototype.getCount=function(){return this.getAll().length},e.prototype.process=function(){for(var e in this.data)this.data.hasOwnProperty(e)&&this.results.push({key:e,count:this.data[e]});this.results.sort((function(e,t){return t.count-e.count})),this.processed=!0},e}();t.KeyValueCounter=n},5505:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GLoggerCallbackHolder=void 0;var r=n(1703),o=n(4031),i=function(){function e(e){this.callbacks=e}return e.prototype.copy=function(){return new e(this.callbacks)},e.createConsoleCallbacks=function(t){var n;return void 0===t&&(t=new r.SimpleColorFormatter),new e(((n={})[o.GLoggerPriority.LOG]=function(e,n){return console.log.apply(console,t.formatColored(o.GLoggerPriority.LOG,e,n))},n[o.GLoggerPriority.WARN]=function(e,n){return console.warn.apply(console,t.formatColored(o.GLoggerPriority.WARN,e,n))},n[o.GLoggerPriority.ERROR]=function(e,n){return console.error.apply(console,t.formatColored(o.GLoggerPriority.ERROR,e,n))},n[o.GLoggerPriority.SUCCESS]=function(e,n){return console.log.apply(console,t.formatColored(o.GLoggerPriority.SUCCESS,e,n))},n[o.GLoggerPriority.VERBOSE]=function(e,n){return console.log.apply(console,t.formatColored(o.GLoggerPriority.VERBOSE,e,n))},n))},e.createArrayCallbacks=function(t,n){var r;void 0===n&&(n={});var i=n.mapper||function(e,t,n){return[e,t,n]},a=function(e,n,r){t.push(i(e,n,r))};return new e(((r={})[o.GLoggerPriority.LOG]=function(e,t){return a(o.GLoggerPriority.LOG,e,t)},r[o.GLoggerPriority.WARN]=function(e,t){return a(o.GLoggerPriority.WARN,e,t)},r[o.GLoggerPriority.ERROR]=function(e,t){return a(o.GLoggerPriority.ERROR,e,t)},r[o.GLoggerPriority.SUCCESS]=function(e,t){return a(o.GLoggerPriority.SUCCESS,e,t)},r[o.GLoggerPriority.VERBOSE]=function(e,t){return a(o.GLoggerPriority.VERBOSE,e,t)},r))},e.prototype.setCallback=function(e,t){this.callbacks[e]=t},e.prototype.set=function(e){var t=this;Object.values(o.GLoggerPriority).forEach((function(n){t.setCallback(n,e.getCallback(n))}))},e.prototype.getCallback=function(e){return this.callbacks[e]},e}();t.GLoggerCallbackHolder=i},1703:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GLoggerDefaultFormatter=t.SimpleColorFormatter=t.ColorGenerator=void 0;var r=n(5928),o=function(){function e(){this.useDifferentColorsForContexts=!0,this.contextColorMap={}}return e.prototype.getColorForContext=function(e,t){if(!this.useDifferentColorsForContexts)return t;if(e in this.contextColorMap)return this.contextColorMap[e];return this.contextColorMap[e]="#"+new Array(6).fill("").map((function(){return r.randomItem("0","1","2","3","4","5","6","7","8","9","A","B","C","D")})).join("")},e}();t.ColorGenerator=o;var i=function(){function e(e){void 0===e&&(e="[{{priority}}] {{context}}: {{data}}"),this.pattern=e,this.colorGenerator=new o,this.colorMap={priority:"red",context:"blue",data:"black",default:"black"}}return e.prototype.format=function(e,t,n){var o=t.map((function(e){switch(typeof e){case"object":return"%o";case"number":return e%1==0?"%d":"%f";default:return"%s"}})),i=[r.template(this.pattern,{priority:"%s",context:"%s",data:o.join(" ")})];return this.pattern.replace(/(priority|context|data)/g,(function(r){switch(r){case"priority":i.push(e);break;case"context":i.push(n||"");break;case"data":i.push.apply(i,t)}return r})),i.join(", ")},e.prototype.formatColored=function(e,t,n){var o=this,i=t.map((function(e){switch(typeof e){case"object":return"%o";case"number":return e%1==0?"%d":"%f";default:return"%s"}})),a=[r.template(this.pattern,{priority:"%c%s%c",context:"%c%s%c",data:"%c"+i.join(" ")+"%c"})];return this.pattern.replace(/(priority|context|data)/g,(function(r){switch(r){case"priority":a.push("color: "+o.colorMap[r]),a.push(e),a.push("color: "+o.colorMap.default);break;case"context":a.push("color: "+o.colorGenerator.getColorForContext(n||"root","black")),a.push(n||""),a.push("color: "+o.colorMap.default);break;case"data":a.push("color: "+o.colorMap[r]),a.push.apply(a,t),a.push("color: "+o.colorMap.default)}return r})),a},e}();t.SimpleColorFormatter=i;var a=function(){function e(){this.showPriority=!1,this.showContext=!0,this.showTime=!1,this.showTimeOffset=!1,this.colors={},this.colorGenerator=new o,this.lastFormatTime=Date.now()}return e.prototype.formatColored=function(e,t,n){var r=[this.getOutputArray(e,t,n).join(" ")];return this.showPriority&&r.push("color: "+(this.colors.priority||"blue")),this.showContext&&n&&r.push("color: "+this.colorGenerator.getColorForContext(n,this.colors.context||"red")),this.showTime&&r.push("color: "+(this.colors.time||"green")),this.showTimeOffset&&r.push("color: "+(this.colors.timeOffset||"green")),r.push("color: "+(this.colors.textColor||"black")),r},e.prototype.format=function(e,t,n){return this.getOutputArray(e,t,n).join(" ")},e.prototype.getOutputArray=function(e,t,n){var o=[];if(this.showPriority&&o.push("["+e+"]"),this.showContext&&n&&o.push(n+":"),this.showTime&&o.push("["+(new Date).toISOString()+"]"),this.showTimeOffset){var i=Date.now();o.push(""+r.dateAgo(i-this.lastFormatTime)),this.lastFormatTime=i}return o.push.apply(o,t.map(String)),o},e}();t.GLoggerDefaultFormatter=a},2875:function(e,t,n){var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r};Object.defineProperty(t,"__esModule",{value:!0}),t.GLoggerInstance=void 0;var o=n(4031),i=function(){function e(e,t){this.loggerCallbacks=e,this.context=t}return e.localPrint=function(e,t,n,r){n.getCallback(e)(t,r)},e.getContextString=function(e){var t;return"string"==typeof e?e:"string"==typeof(null===(t=null==e?void 0:e.constructor)||void 0===t?void 0:t.name)?e.constructor.name:"string"==typeof(null==e?void 0:e.name)?e.name:void 0},e.prototype.setLogCallback=function(e,t){var n;null===(n=this.loggerCallbacks)||void 0===n||n.setCallback(e,t)},e.prototype.setLogCallbacks=function(e){var t;null===(t=this.loggerCallbacks)||void 0===t||t.set(e)},e.prototype.print=function(t,n){void 0===n&&(n="");for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];var i=e.getContextString(n);e.localPrint(t,r,this.loggerCallbacks,i)},e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this.print.apply(this,r([o.GLoggerPriority.LOG,this.context],e))},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this.print.apply(this,r([o.GLoggerPriority.WARN,this.context],e))},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this.print.apply(this,r([o.GLoggerPriority.ERROR,this.context],e))},e}();t.GLoggerInstance=i},4031:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GLoggerPriority=void 0,function(e){e.LOG="LOG",e.WARN="WARN",e.ERROR="ERROR",e.VERBOSE="VERBOSE",e.SUCCESS="SUCCESS"}(t.GLoggerPriority||(t.GLoggerPriority={}))},3113:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r};Object.defineProperty(t,"__esModule",{value:!0}),t.GLogger=void 0;var a=n(5505),u=n(2875),s=n(4031),c=function(e){function t(n,r){return void 0===r&&(r=t.staticCallbacks.copy()),e.call(this,r,n)||this}return o(t,e),t.setCallbacks=function(e){t.staticCallbacks.set(e)},t.getLine=function(e){void 0===e&&(e=2);var t=new Error;if(t.stack){var n=t.stack.split("\n")[e].trim().match(/\(.*\)/);if(n&&n[0])return"at "+n[0]}return""},t.createClassLogger=function(e,n){var r,o;return n?n.extends((null==e?void 0:e.name)||(null===(r=null==e?void 0:e.constructor)||void 0===r?void 0:r.name)):new t(null===(o=null==e?void 0:e.constructor)||void 0===o?void 0:o.name)},t.createArrayLogger=function(e,n,r){return new t(n,a.GLoggerCallbackHolder.createArrayCallbacks(e,{mapper:r}))},t.print=function(e,n){void 0===n&&(n="");for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];var i=t.getContextString(n),a=i&&i.match(t.skipRegexp);a||u.GLoggerInstance.localPrint(e,r,t.staticCallbacks,i)},t.log=function(e,n){t.print.apply(t,i([s.GLoggerPriority.LOG,n],Array.isArray(e)?e:[e]))},t.error=function(e,n){t.print.apply(t,i([s.GLoggerPriority.ERROR,n],Array.isArray(e)?e:[e]))},t.warn=function(e,n){t.print.apply(t,i([s.GLoggerPriority.WARN,n],Array.isArray(e)?e:[e]))},t.prototype.extends=function(e){var n=t.getContextString(this.context),r=t.getContextString(e);return new t(n?n+":"+r:r,this.loggerCallbacks.copy())},t.skipContexts=["renderWorldStatic","CanvasDirective","WorldRendererService","viewport","WorldInputService"],t.skipRegexp=new RegExp(""+t.skipContexts.join("|"),"gi"),t.staticCallbacks=a.GLoggerCallbackHolder.createConsoleCallbacks(),t}(u.GLoggerInstance);t.GLogger=c},3602:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NumberCounter=void 0;var n=function(){function e(){this.min=1/0,this.max=-1/0,this.sum=0,this.numbers=[]}return e.prototype.add=function(e){this.numbers.push(e),this.min=Math.min(this.min,e),this.max=Math.max(this.max,e),this.sum+=e},e.prototype.getMin=function(){return this.min},e.prototype.getMax=function(){return this.max},e.prototype.getCount=function(){return this.numbers.length},e.prototype.getAverage=function(){return this.sum/this.numbers.length},e.prototype.addAll=function(e){e.forEach(this.add,this)},e}();t.NumberCounter=n},927:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Paginator=void 0;var r=n(8364),o=function(){function e(e,t){void 0===t&&(t=r.GToolsConfig.PAGE_LIMIT),this.allItems=e,this.itemsPerPage=t,this.actualPage=0,this.lastPage=e?Math.floor(e.length/this.itemsPerPage):0,this.actList=this._reCalcList()}return e.prototype.getActualPage=function(){return this.actualPage+1},e.prototype.getPages=function(){return this.lastPage+1},e.prototype.getPagesAround=function(){return this.actualPage<2?[1,2,3,4,5]:this.actualPage>this.lastPage-3?[this.lastPage-3,this.lastPage-2,this.lastPage-1,this.lastPage,this.lastPage+1]:[this.actualPage-1,this.actualPage,this.actualPage+1,this.actualPage+2,this.actualPage+3]},e.prototype.getList=function(){return this.actList},e.prototype.goToNext=function(){return this.actualPage<this.lastPage?(this.actualPage++,this._reCalcList()):this.getList()},e.prototype.gotTo=function(e){return e>=0&&e<=this.lastPage?(this.actualPage=e,this._reCalcList()):this.getList()},e.prototype.goToPrev=function(){return this.actualPage>0?(this.actualPage--,this._reCalcList()):this.getList()},e.prototype.goToFirst=function(){return this.actualPage=0,this._reCalcList()},e.prototype.goToLast=function(){return this.actualPage=this.lastPage,this._reCalcList()},e.prototype._reCalcList=function(){var e=this.actualPage*this.itemsPerPage;return this.actList=this.allItems?this.allItems.slice(e,e+this.itemsPerPage):[],this.actList},e}();t.Paginator=o},3527:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},8364:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.GToolsConfig=t.initConfig=t.ClassGToolsConfig=void 0;var r=function(){return n||{URL_API:"",LANGUAGE:"",VERSION:"",PAGE_LIMIT:0}},o=function(){function e(){}return Object.defineProperty(e.prototype,"URL_API",{get:function(){return r().URL_API},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"PAGE_LIMIT",{get:function(){return r().PAGE_LIMIT},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"LANGUAGE",{get:function(){return r().LANGUAGE},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"VERSION",{get:function(){return r().VERSION},enumerable:!1,configurable:!0}),e}();t.ClassGToolsConfig=o,t.initConfig=function(e){n=e},t.GToolsConfig=new o},5601:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ALLOW_IMAGES_ONLY_WITH_ALLOWED_CORS=void 0,t.ALLOW_IMAGES_ONLY_WITH_ALLOWED_CORS=!0},2867:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Deprecated=void 0,t.Deprecated=function(e){return function(t,n,r){var o=t[n];r.value=function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return console.warn("Method "+t.constructor.name+"."+n+" is deprecated. "+(e||"")),o.apply(t,r)}}}},1430:function(e,t){var n,r=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.FinalClass=void 0,t.FinalClass=function(e){return function(e){function t(){for(var n=this.constructor,r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];if(n!==t)throw new Error("Cannot inherit from final class");return e.apply(this,r)||this}return r(t,e),t}(e)}},5679:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(2867),t),o(n(1430),t),o(n(3255),t),o(n(3610),t),o(n(6905),t)},3255:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Mapper=void 0,t.Mapper=function(e,t){return void 0===e&&(e={}),void 0===t&&(t="_"),function(n,r){if(delete n[r]){var o={enumerable:!0,configurable:!0},i=t+r;e&&("function"==typeof e.onGet?o.get=function(){return e.onGet&&e.onGet(n[i])}:o.get=function(){return n[i]},"function"==typeof e.onSet?o.set=function(t){return n[i]=e.onSet&&e.onSet(t)}:o.set=function(e){return n[i]=e}),Object.defineProperty(n,r,o)}}}},3610:function(e,t){var n,r=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Singleton=void 0;var o={};t.Singleton=function(e){var t=e.name;return function(e){function n(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var i=e.apply(this,n)||this;if(o[t])throw new Error("Instance of "+t+" is already created");return o[t]=i,i}return r(n,e),n}(e)}},6905:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Watch=void 0,t.Watch=function(e,t){var n=t&&t.prefix||"_";return function(r,o){delete r[o]&&Object.defineProperty(r,o,{get:function(){return r[n+o]},set:function(t){e&&(r[n+o]=e(t,r[n+o])),r[n+o]=t},enumerable:!t||"boolean"!=typeof t.enumerable||t.enumerable,configurable:!t||"boolean"!=typeof t.configurable||t.configurable})}}},5083:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.CanvasManager=void 0;var i=n(8037),a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.clearCanvas=function(e){e.clearRect(0,0,e.canvas.width,e.canvas.height)},t.setCanvasSize=function(e,t,n){void 0===t&&(t=window.innerWidth),void 0===n&&(n=window.innerHeight),e.width=t,e.height=n},t.setShadow=function(e,t,n,r,o){e.shadowColor=r,e.shadowBlur=o,e.shadowOffsetX=t,e.shadowOffsetY=n},t.imageToCanvas=function(e){if("undefined"==typeof document)throw new i.NotBrowserException;var t=document.createElement("canvas");t.width=e.width,t.height=e.height;var n=t.getContext("2d");return n&&n.drawImage(e,0,0),t},t.setLineDash=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];"function"==typeof e.setLineDash&&e.setLineDash(t)},t.calcTextWidth=function(e,t,n){return n&&(e.font=n),e.measureText(t).width},t.setTransformRaw=function(e,t,n,r,o){void 0===o&&(o=r),e.setTransform(r,0,0,o,t,n)},t.canvasToImage=function(e,t){void 0===t&&(t="image/png");var n=new Image;return n.src=e.toDataURL(t),n.width=e.width,n.height=e.height,n},t}(function(){function e(e,t,n){if(e instanceof HTMLCanvasElement)this.localCanvas=e,t&&n&&this.setCanvasSize(t,n);else if(e instanceof HTMLImageElement)this.localCanvas=a.imageToCanvas(e);else{if("undefined"==typeof document)throw new i.NotBrowserException;this.localCanvas=document.createElement("canvas"),e&&t&&this.setCanvasSize(e,t)}this.localContext=this.localCanvas.getContext("2d")}return Object.defineProperty(e.prototype,"canvas",{get:function(){return this.localCanvas},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"context",{get:function(){return this.localContext},enumerable:!1,configurable:!0}),e.prototype.setTransform=function(e){this.setTransformRaw(e.offset.x,e.offset.y,e.scale)},e.prototype.setTransformRaw=function(e,t,n,r){void 0===r&&(r=n),this.localContext&&a.setTransformRaw(this.localContext,e,t,n,r)},e.prototype.getImage=function(){return a.canvasToImage(this.localCanvas)},e.prototype.setShadow=function(e,t,n,r){this.localContext&&a.setShadow(this.localContext,e,t,n,r)},e.prototype.show=function(e){void 0===e&&(e="image/png"),window.open(this.localCanvas.toDataURL(e),"_blank")},e.prototype.clearCanvas=function(){this.localContext&&a.clearCanvas(this.localContext)},e.prototype.setCanvasSize=function(e,t){void 0===e&&(e=window.innerWidth),void 0===t&&(t=window.innerHeight),a.setCanvasSize(this.localCanvas,e,t)},e.prototype.appendTo=function(e){return e.appendChild(this.localCanvas),e},e}());t.CanvasManager=a},7321:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CanvasUtils=void 0;var r=n(5083);function o(e,t){t?r.CanvasManager.setShadow(e,t.x,t.y,t.color,t.blur):r.CanvasManager.setShadow(e,0,0,"black",0)}function i(e){e.shadow&&o(e.ctx,e.shadow),e.bgImage?(e.ctx.save(),e.ctx.clip(),e.bgImage instanceof HTMLImageElement?e.ctx.drawImage(e.bgImage,e.x,e.y,e.width,e.height):e.ctx.drawImage(e.bgImage.img,e.bgImage.x,e.bgImage.y,e.bgImage.w,e.bgImage.h,e.x,e.y,e.width,e.height),e.ctx.restore()):e.fill&&(e.ctx.fillStyle=e.fillColor,e.ctx.fill()),e.shadow&&o(e.ctx),e.ctx.lineCap=e.lineCap,e.ctx.lineJoin=e.joinType,"function"==typeof e.ctx.setLineDash&&e.ctx.setLineDash(e.lineDash),e.draw&&(e.ctx.lineWidth=e.borderWidth,e.ctx.strokeStyle=e.borderColor,e.ctx.stroke())}function a(e,t){var n=$.extend(e,t),r=function(e,t,r){if(void 0!==n[e]){var o=n[e];isNaN(o)&&Array.isArray(o)?(n[t]=o[0],n[r]=o[1]):(n[t]=o,n[r]=o)}};return r("size","width","size"),r("position","x","y"),n.center&&(n.x-=n.width>>1,n.y-=n.height>>1),n}function u(e,t){return void 0!==e.x&&void 0!==e.y||void 0!==e.position||console.error("MSG_TRY_DRAW_WITHOUT_POSITION: "+t),void 0!==e.width&&void 0!==e.height||void 0!==e.size||console.error("MSG_TRY_DRAW_WITHOUT_SIZE: "+t),(e.width<=0||e.height<=0)&&console.error("MSG_TRY_DRAW_WITH_NEG_POSITION: "+t),function(e){return{borderColor:"black",borderWidth:1,center:!1,ctx:e.ctx,draw:void 0!==e.borderColor||void 0!==e.borderWidth,endAngle:2*Math.PI,fill:void 0!==e.fillColor,fillColor:"white",height:0,joinType:"bevel",lineCap:"round",lineDash:[],offset:null,radius:{tl:0,tr:0,br:0,bl:0},startAngle:0,width:0,x:0,y:0}}(e)}var s=function(){function e(){}return e.doArc=function(e){var t=a(u(e,"Arc"),e);t.ctx.beginPath(),"function"==typeof t.ctx.ellipse?t.ctx.ellipse(t.x+(t.width>>1),t.y+(t.height>>1),t.width>>1,t.height>>1,0,t.startAngle,t.endAngle):t.ctx.rect(t.x+(t.width>>1),t.y+(t.height>>1),t.width>>1,t.height>>1),i(t)},e.doRect=function(e){var t=u(e,"Rect");if(void 0!==e.radius)if(isNaN(e.radius))for(var n in t.radius)t.radius.hasOwnProperty(n)&&(e.radius[n]=e.radius[n]||t.radius[n]);else e.radius={bl:e.radius,br:e.radius,tl:e.radius,tr:e.radius};var r=a(t,e);r.ctx.beginPath(),r.ctx.moveTo(r.x+r.radius.tl,r.y),r.ctx.lineTo(r.x+r.width-r.radius.tr,r.y),r.ctx.quadraticCurveTo(r.x+r.width,r.y,r.x+r.width,r.y+r.radius.tr),r.ctx.lineTo(r.x+r.width,r.y+r.height-r.radius.br),r.ctx.quadraticCurveTo(r.x+r.width,r.y+r.height,r.x+r.width-r.radius.br,r.y+r.height),r.ctx.lineTo(r.x+r.radius.bl,r.y+r.height),r.ctx.quadraticCurveTo(r.x,r.y+r.height,r.x,r.y+r.height-r.radius.bl),r.ctx.lineTo(r.x,r.y+r.radius.tl),r.ctx.quadraticCurveTo(r.x,r.y,r.x+r.radius.tl,r.y),r.ctx.closePath(),i(r)},e}();t.CanvasUtils=s},8439:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DomGet=void 0;var n="undefined"!=typeof document?document:null,r=function(){function e(){}return e.setContext=function(e){n=e},e.byClass=function(e,t){return void 0===t&&(t=n),t.getElementsByClassName(e)},e.byLink=function(e,t){return void 0===t&&(t=n),t.querySelectorAll('a[attr="'+e+'"]')},e.byId=function(e,t){return void 0===t&&(t=n),t.getElementById(e)},e.byName=function(e,t){return void 0===t&&(t=n),t.getElementsByName(e)},e.byTag=function(e,t){return void 0===t&&(t=n),t.getElementsByTagName(e)},e}();t.DomGet=r},5421:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},8031:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Button=void 0,function(e){e[e.LEFT=0]="LEFT",e[e.RIGHT=1]="RIGHT",e[e.MIDDLE=2]="MIDDLE"}(t.Button||(t.Button={}))},3982:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Days=void 0,function(e){e.MON="MON",e.TUE="TUE",e.WED="WED",e.THU="THU",e.FRI="FRI",e.SAT="SAT",e.SUN="SUN"}(t.Days||(t.Days={}))},3115:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Encodings=void 0,function(e){e.UTF8="utf8",e.UTF16="utf16",e.UNICODE="unicode",e.ASCII="ascii",e.UCS2="ucs2"}(t.Encodings||(t.Encodings={}))},5440:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FileTypes=void 0,function(e){e.CSS="text/css",e.HTML="text/html",e.JS="application/javascript",e.MP3="audio/mpeg",e.MP4="video/mp4",e.OGG="application/ogg",e.OGV="video/ogg",e.OGA="audio/ogg",e.TXT="text/plain",e.WAV="audio/x-wav",e.WEBM="video/webm"}(t.FileTypes||(t.FileTypes={}))},8034:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.HttpStatusCodes=void 0,function(e){e[e.CONTINUE=100]="CONTINUE",e[e.SWITCHING_PROTOCOLS=101]="SWITCHING_PROTOCOLS",e[e.OK=200]="OK",e[e.CREATED=201]="CREATED",e[e.ACCEPTED=202]="ACCEPTED",e[e.NON_AUTHORITATIVE_INFORMATION=203]="NON_AUTHORITATIVE_INFORMATION",e[e.NO_CONTENT=204]="NO_CONTENT",e[e.RESET_CONTENT=205]="RESET_CONTENT",e[e.PARTIAL_CONTENT=206]="PARTIAL_CONTENT",e[e.MULTIPLE_CHOICES=300]="MULTIPLE_CHOICES",e[e.MOVED_PERMANENTLY=301]="MOVED_PERMANENTLY",e[e.FOUND=302]="FOUND",e[e.SEE_OTHER=303]="SEE_OTHER",e[e.NOT_MODIFIED=304]="NOT_MODIFIED",e[e.USE_PROXY=305]="USE_PROXY",e[e.TEMPORARY_REDIRECT=307]="TEMPORARY_REDIRECT",e[e.BAD_REQUEST=400]="BAD_REQUEST",e[e.UNAUTHORIZED=401]="UNAUTHORIZED",e[e.PAYMENT_REQUIRED=402]="PAYMENT_REQUIRED",e[e.FORBIDDEN=403]="FORBIDDEN",e[e.NOT_FOUND=404]="NOT_FOUND",e[e.METHOD_NOT_ALLOWED=405]="METHOD_NOT_ALLOWED",e[e.NOT_ACCEPTABLE=406]="NOT_ACCEPTABLE",e[e.PROXY_AUTHENTICATION_REQUIRED=407]="PROXY_AUTHENTICATION_REQUIRED",e[e.REQUEST_TIMEOUT=408]="REQUEST_TIMEOUT",e[e.CONFLICT=409]="CONFLICT",e[e.GONE=410]="GONE",e[e.LENGTH_REQUIRED=411]="LENGTH_REQUIRED",e[e.PRECONDITION_FAILED=412]="PRECONDITION_FAILED",e[e.REQUEST_ENTITY_TOO_LARGE=413]="REQUEST_ENTITY_TOO_LARGE",e[e.REQUEST_URI_TOO_LONG=414]="REQUEST_URI_TOO_LONG",e[e.UNSUPPORTED_MEDIA_TYPE=415]="UNSUPPORTED_MEDIA_TYPE",e[e.REQUESTED_RANGE_NOT_SATISFIABLE=416]="REQUESTED_RANGE_NOT_SATISFIABLE",e[e.EXPECTATION_FAILED=417]="EXPECTATION_FAILED",e[e.UNPROCESSABLE_ENTITY=422]="UNPROCESSABLE_ENTITY",e[e.TOO_MANY_REQUESTS=429]="TOO_MANY_REQUESTS",e[e.INTERNAL_SERVER_ERROR=500]="INTERNAL_SERVER_ERROR",e[e.NOT_IMPLEMENTED=501]="NOT_IMPLEMENTED",e[e.BAD_GATEWAY=502]="BAD_GATEWAY",e[e.SERVICE_UNAVAILABLE=503]="SERVICE_UNAVAILABLE",e[e.GATEWAY_TIMEOUT=504]="GATEWAY_TIMEOUT",e[e.HTTP_VERSION_NOT_SUPPORTED=505]="HTTP_VERSION_NOT_SUPPORTED"}(t.HttpStatusCodes||(t.HttpStatusCodes={}))},542:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(8031),t),o(n(3982),t),o(n(3115),t),o(n(5440),t),o(n(8034),t),o(n(6788),t)},6788:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.KeysOld=t.Keys=void 0,function(e){e.ARROW_UP="ArrowUp",e.ARROW_DOWN="ArrowDown",e.ARROW_LEFT="ArrowLeft",e.ARROW_RIGHT="ArrowRight",e.DELETE="Delete",e.CONTROL="ControlLeft",e.SHIFT="ShiftLeft",e.PAGE_UP="PageUp",e.PAGE_DOWN="PageDown",e.ESCAPE="Escape",e.W="KeyW",e.F="KeyF",e.A="KeyA",e.P="KeyP",e.S="KeyS",e.D="KeyD",e.R="KeyR",e.DIGIT_1="Digit1",e.DIGIT_2="Digit2",e.DIGIT_3="Digit3",e.DIGIT_4="Digit4",e.DIGIT_5="Digit5",e.DIGIT_6="Digit6",e.DIGIT_7="Digit7",e.DIGIT_8="Digit8",e.DIGIT_9="Digit9",e.DIGIT_0="Digit0"}(t.Keys||(t.Keys={}));var n=function(){function e(){}return e.ENTER=13,e.TAB=9,e.W=87,e.A=65,e.S=83,e.D=68,e.Q=81,e.E=69,e.F=70,e.LCONTROL=17,e.ESCAPE=27,e.LALT=18,e.LSHIFT=16,e.SPACE=32,e.ARROW_UP=38,e.ARROW_DOWN=40,e.ARROW_RIGHT=39,e.ARROW_LEFT=37,e}();t.KeysOld=n},8037:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(1351),t),o(n(1566),t),o(n(8650),t),o(n(9089),t),o(n(6162),t),o(n(9043),t)},9089:function(e,t){var n,r=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.MissingParameterError=void 0;var o=function(e){function t(t){return e.call(this,"Parameter "+t+" must be defined")||this}return r(t,e),t}(Error);t.MissingParameterError=o},6162:function(e,t){var n,r=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.NoDatabaseConnectionError=void 0;var o=function(e){function t(){return e.call(this,"Database connection is no established")||this}return r(t,e),t}(Error);t.NoDatabaseConnectionError=o},1351:function(e,t){var n,r=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.NotBrowserException=void 0;var o=function(e){function t(n){var r=e.call(this,"App is not running in browser"+function(e){return e?": "+e:""}(n)+"!")||this;return Object.setPrototypeOf(r,t.prototype),r}return r(t,e),t}(Error);t.NotBrowserException=o},1566:function(e,t){var n,r=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.NullPointerException=void 0;var o=function(e){function t(n){var r=e.call(this,"Null pointer exception at line"+("string"==typeof n?": "+n:"!"))||this;return Object.setPrototypeOf(r,t.prototype),r}return r(t,e),t}(Error);t.NullPointerException=o},8650:function(e,t){var n,r=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.WrongParameterException=void 0;var o=function(e){function t(n){var r=e.call(this,"Wrong parameter exception at line"+("string"==typeof n?": "+n:"!"))||this;return Object.setPrototypeOf(r,t.prototype),r}return r(t,e),t}(Error);t.WrongParameterException=o},9043:function(e,t){var n,r=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.WrongTypeException=void 0;var o=function(e){function t(n,r){var o=e.call(this,"Wrong type exception at line. "+typeof n+" must be "+n+("string"==typeof r?": "+r:"!"))||this;return Object.setPrototypeOf(o,t.prototype),o}return r(t,e),t}(Error);t.WrongTypeException=o},3607:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(1716),t)},3081:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(7533),t),o(n(7153),t),o(n(5015),t),o(n(9281),t),o(n(5079),t),o(n(5870),t),o(n(2343),t),o(n(1433),t)},7533:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},7153:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},5015:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},9281:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},5079:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Vector2=void 0;var r=n(7554),o=function(){function e(e,t){void 0===e&&(e=0),void 0===t&&(t=0),this.x=e,this.y=t}return Object.defineProperty(e,"ZERO",{get:function(){return new e(0,0)},enumerable:!1,configurable:!0}),Object.defineProperty(e,"UP",{get:function(){return new e(0,1)},enumerable:!1,configurable:!0}),Object.defineProperty(e,"LEFT",{get:function(){return new e(-1,0)},enumerable:!1,configurable:!0}),Object.defineProperty(e,"BOTTOM",{get:function(){return new e(0,-1)},enumerable:!1,configurable:!0}),Object.defineProperty(e,"RIGHT",{get:function(){return new e(1,0)},enumerable:!1,configurable:!0}),Object.defineProperty(e,"ONE",{get:function(){return new e(1,1)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"avg",{get:function(){return this.sum/2},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"sum",{get:function(){return this.x+this.y},enumerable:!1,configurable:!0}),e.fromArray=function(t){return new e(t[0],t[1])},Object.defineProperty(e.prototype,"length",{get:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},enumerable:!1,configurable:!0}),e.equals=function(e,t){return e===t||e.x===t.x&&e.y===t.y},e.sub=function(t,n){return new e(t.x-n.x,t.y-n.y)},e.from=function(t,n){return void 0===n&&(n=t),new e(t,n)},e.isVisible=function(e,t,n,r,o,i){return n-Math.atan2(i-t,o-e)<=r},e.createOutlineRange=function(e){var t={x:1/0,y:1/0},n={x:-1/0,y:-1/0};return e.forEach((function(e){e.x<t.x&&(t.x=e.x),e.y<t.y&&(t.y=e.y),e.x>n.x&&(n.x=e.x),e.y>n.y&&(n.y=e.y)})),new r.Range(t,n)},e.angleBetweenPoints=function(e,t,n,r,o,i){return Math.atan2(r-t,n-e)-Math.atan2(i-t,o-e)},e.isVector=function(e){return e&&!isNaN(e.x)&&!isNaN(e.y)},e.sum=function(t,n){return new e(t.x+n.x,t.y+n.y)},e.min=function(t,n){return new e(Math.min(t.x,n.x),Math.min(t.y,n.y))},e.max=function(t,n){return new e(Math.max(t.x,n.x),Math.max(t.y,n.y))},e.dist=function(e,t){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))},e.prototype.isZero=function(){return 0===this.x&&0===this.y},e.prototype.getNormalized=function(){return this.clone().normalize()},e.prototype.clone=function(){return new e(this.x,this.y)},e.prototype.normalize=function(){var e=this.length;return this.x/=e,this.y/=e,this},e.mulNum=function(t,n){return new e(t.x*n,t.y*n)},e.prototype.mul=function(e){return"number"==typeof e?(this.x*=e,this.y*=e):(this.x*=e.x,this.y*=e.y),this},e.prototype.add=function(e){return"number"==typeof e?(this.x+=e,this.y+=e):(this.x+=e.x,this.y+=e.y),this},e.prototype.sub=function(e){return"number"==typeof e?(this.x-=e,this.y-=e):(this.x-=e.x,this.y-=e.y),this},e.prototype.div=function(e){return"number"==typeof e?(this.x/=e,this.y/=e):(this.x/=e.x,this.y/=e.y),this},e.prototype.setData=function(e,t){return this.x=e,this.y=t,this},e.prototype.set=function(e){return this.x=e.x,this.y=e.y,this},e}();t.Vector2=o},5870:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Vector2f=void 0;var n=function(e,t,n){"number"==typeof n?e(t,n):"number"==typeof t?e(t,t):e(t.x,t.y)},r=function(){function e(e,t){this.y=0,this.x=0,this.x=e,this.y=t}return e.prototype.set=function(e,t){var r=this;return n((function(e,t){r.x=e,r.y=t}),e,t),this},e.prototype.add=function(e,t){var r=this;return n((function(e,t){r.x+=e,r.y+=t}),e,t),this},e.prototype.div=function(e,t){var r=this;return n((function(e,t){r.x/=e,r.y/=t}),e,t),this},e.prototype.mul=function(e,t){var r=this;return n((function(e,t){r.x*=e,r.y*=t}),e,t),this},e.prototype.sub=function(e,t){var r=this;return n((function(e,t){r.x-=e,r.y-=t}),e,t),this},e}();t.Vector2f=r},2343:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Vector3=void 0;var r=n(5079),o=function(){function e(e,t,n){void 0===e&&(e=0),void 0===t&&(t=0),void 0===n&&(n=0),this.x=e,this.y=t,this.z=n}return Object.defineProperty(e,"UP",{get:function(){return new e(0,1,0)},enumerable:!1,configurable:!0}),Object.defineProperty(e,"ZERO",{get:function(){return new e(0,0,0)},enumerable:!1,configurable:!0}),Object.defineProperty(e,"ONE",{get:function(){return new e(1,1,1)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"avg",{get:function(){return(this.x+this.y+this.z)/3},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},enumerable:!1,configurable:!0}),e.equals=function(e,t){return e===t||e.x===t.x&&e.y===t.y&&e.z===t.z},e.sub=function(t,n){return new e(t.x-n.x,t.y-n.y,t.z-n.z)},e.add=function(t,n){return new e(t.x+n.x,t.y+n.y,t.z+n.z)},e.sum=function(t,n){return new e(t.x+n.x,t.y+n.y,t.z+n.z)},e.mulNum=function(t,n){return new e(t.x*n,t.y*n,t.z*n)},e.mul=function(t,n){return new e(t.x+n.x,t.y+n.y,t.z+n.z)},e.min=function(t,n){return new e(Math.min(t.x,n.x),Math.min(t.y,n.y),Math.min(t.z,n.z))},e.createFromSphericalCoords=function(t,n,r){var o=Math.sin(n)*t;return new e(o*Math.sin(r),Math.cos(n)*t,o*Math.cos(r))},e.max=function(t,n){return new e(Math.max(t.x,n.x),Math.max(t.y,n.y),Math.max(t.z,n.z))},e.dist=function(e,t){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)+Math.pow(e.z-t.z,2))},e.normalize=function(e){var t=Math.sqrt(e.x*e.x+e.y*e.y+e.z*e.z);return e.x/=t,e.y/=t,e.z/=t,e},Object.defineProperty(e.prototype,"xy",{get:function(){return new r.Vector2(this.x,this.y)},enumerable:!1,configurable:!0}),e.from=function(t,n,r){return void 0===n&&(n=t),void 0===r&&(r=t),new e(t,n,r)},e.isVector=function(e){return e&&!isNaN(e.x)&&!isNaN(e.y)&&!isNaN(e.z)},e.prototype.toArray=function(){return[this.x,this.y,this.z]},e.prototype.sum=function(){return this.x+this.y+this.z},e.prototype.getNormalized=function(){return this.clone().normalize()},e.prototype.clone=function(){return new e(this.x,this.y,this.z)},e.prototype.normalize=function(){var e=this.length;return this.x/=e,this.y/=e,this.z/=e,this},e.prototype.mul=function(e){return"number"==typeof e?(this.x*=e,this.y*=e,this.z*=e):(this.x*=e.x,this.y*=e.y,this.z*=e.z),this},e.prototype.add=function(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this},e.prototype.cross=function(t){return new e(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)},e.prototype.dot=function(e){return this.x*e.x+this.y*e.y+this.z*e.z},e.prototype.sub=function(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this},e.prototype.setData=function(e,t,n){return this.x=e,this.y=t,this.z=n,this},e.prototype.set=function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this},Object.defineProperty(e.prototype,"yx",{get:function(){return new r.Vector2(this.y,this.x)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"yz",{get:function(){return new r.Vector2(this.y,this.z)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"zy",{get:function(){return new r.Vector2(this.z,this.y)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"xz",{get:function(){return new r.Vector2(this.x,this.z)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"zx",{get:function(){return new r.Vector2(this.z,this.x)},enumerable:!1,configurable:!0}),e.fromArray=function(t){return new e(t[0],t[1],t[2])},e}();t.Vector3=o},1433:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Vector4=void 0;var n=function(){function e(e,t,n,r){void 0===e&&(e=0),void 0===t&&(t=0),void 0===n&&(n=0),void 0===r&&(r=0),this.x=e,this.y=t,this.z=n,this.w=r}return Object.defineProperty(e,"ZERO",{get:function(){return new e(0,0,0,0)},enumerable:!1,configurable:!0}),Object.defineProperty(e,"ONE",{get:function(){return new e(1,1,1,1)},enumerable:!1,configurable:!0}),e.fromArray=function(t){return new e(t[0],t[1],t[2],t[3])},e.from=function(t,n,r,o){return void 0===n&&(n=t),void 0===r&&(r=n),void 0===o&&(o=r),new e(t,n,r,o)},Object.defineProperty(e.prototype,"avg",{get:function(){return(this.x+this.y+this.z+this.w)/4},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},enumerable:!1,configurable:!0}),e.equals=function(e,t){return e===t||e.x===t.x&&e.y===t.y&&e.z===t.z&&e.w===t.w},e.min=function(t,n){return new e(Math.min(t.x,n.x),Math.min(t.y,n.y),Math.min(t.z,n.z),Math.min(t.w,n.w))},e.max=function(t,n){return new e(Math.max(t.x,n.x),Math.max(t.y,n.y),Math.max(t.z,n.z),Math.max(t.w,n.w))},e.dist=function(e,t){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)+Math.pow(e.z-t.z,2)+Math.pow(e.w-t.w,2))},e.normalize=function(e){var t=Math.sqrt(e.x*e.x+e.y*e.y+e.z*e.z+e.w*e.w);return e.x/=t,e.y/=t,e.z/=t,e.w/=t,e},e.isVector=function(e){return e&&!isNaN(e.x)&&!isNaN(e.y)&&!isNaN(e.z)&&!isNaN(e.w)},e.prototype.toArray=function(){return[this.x,this.y,this.z,this.w]},e.prototype.getNormalized=function(){return this.clone().normalize()},e.prototype.clone=function(){return new e(this.x,this.y,this.z,this.w)},e.prototype.normalize=function(){var e=this.length;return this.x/=e,this.y/=e,this.z/=e,this.w/=e,this},e.prototype.mul=function(e){return"number"==typeof e?(this.x*=e,this.y*=e,this.z*=e,this.w*=e):(this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w),this},e.prototype.add=function(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this},e.prototype.sub=function(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this},e.prototype.setData=function(e,t,n,r){return this.x=e,this.y=t,this.z=n,this.w=r,this},e.prototype.set=function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w,this},e}();t.Vector4=n},4795:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ajax=void 0;var n=function(e){this.ajaxHandler=e};t.ajax=function(e){var t=e.method,r=void 0===t?"GET":t,o=e.url,i=e.onResponse,a=e.content,u=e.headers,s=void 0===u?{}:u,c=new XMLHttpRequest;return c.onreadystatechange=function(){4!==c.readyState||200!==c.status&&201!==c.status||"function"==typeof i&&i(c.responseText)},c.open(r,o,!0),Object.entries(s).forEach((function(e){return c.setRequestHeader(e[0],e[1])})),c.send(a),new n(c)}},2515:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.formatFileSize=void 0;var n=["B","KB","MB","GB","TB","PB","EB","ZB","YB"],r=["Bytes","Kilobytes","Megabytes","Gigabytes","Pettabytes","Exabytes","Zettabytes","Yottabytes"];t.formatFileSize=function(e,t){void 0===t&&(t=!1);var o=t?r:n,i=Math.round(Math.log(e)/Math.log(1024));i=Math.min(i,o.length-1);var a=e/Math.pow(1024,i),u=Math.round(100*a)/100;return a?u+" "+o[i]:"0"}},5118:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(680),t),o(n(4795),t),o(n(2515),t),o(n(7021),t),o(n(7525),t)},7525:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getAsNumber=t.getAsString=void 0,t.getAsString=function(e){if("string"!=typeof e)throw new Error("Variable with value "+e+" is not a string");return e},t.getAsNumber=function(e){if("number"!=typeof e)throw new Error("Variable with value "+e+" is not a number");return e}},7021:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.simpleLoop=void 0,t.simpleLoop=function(e,t){var n,r;void 0===t&&(t=60);var o=1e3/t,i=function(t){var a=t-n;n=t,r=requestAnimationFrame(i),e(a/o||1)};return r=requestAnimationFrame(i),{stop:function(){return cancelAnimationFrame(r)}}}},680:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SlovakStemmer=void 0;var n=function(){function e(){}return e.steme=function(e){var t,n,r,o=(t=function(e){var t=e.length;if(t>9&&e.endsWith("ejšieho")||e.endsWith("ejšiemu"))return e.substring(0,t-7);if(t>8&&(e.endsWith("ejších")||e.endsWith("encoch")||e.endsWith("ejšími")||e.endsWith("encami")))return e.substring(0,t-6);if(t>7&&(e.endsWith("ejšia")||e.endsWith("atami")||e.endsWith("atách")||e.endsWith("eniec")||e.endsWith("encom")||e.endsWith("ejšom")||e.endsWith("ejším")||e.endsWith("ejšej")||e.endsWith("ejšou")||e.endsWith("ejšiu")||e.endsWith("ejšie")))return e.substring(0,t-5);if(t>6&&(e.endsWith("eťom")||e.endsWith("iami")||e.endsWith("atám")||e.endsWith("aťom")||e.endsWith("ovia")||e.endsWith("iach")||e.endsWith("atám")||e.endsWith("ence")||e.endsWith("ieho")||e.endsWith("iemu")||e.endsWith("ieme")||e.endsWith("iete")||e.endsWith("ejší")||e.endsWith("enie")))return e.substring(0,t-4);if(t>5&&(e.endsWith("ich")||e.endsWith("eho")||e.endsWith("ych")||e.endsWith("ích")||e.endsWith("ého")||e.endsWith("emi")||e.endsWith("ému")||e.endsWith("emu")||e.endsWith("ími")||e.endsWith("imi")||e.endsWith("ách")||e.endsWith("ých")||e.endsWith("ami")||e.endsWith("ovi")||e.endsWith("ieť")||e.endsWith("ieš")||e.endsWith("ejú")||e.endsWith("ajú")||e.endsWith("ujú")||e.endsWith("ejú")||e.endsWith("eme")||e.endsWith("íte")||e.endsWith("íme")||e.endsWith("ými")||e.endsWith("ymi")||e.endsWith("ach")||e.endsWith("iam")||e.endsWith("iac")||e.endsWith("ite")||e.endsWith("ili")||e.endsWith("ila")||e.endsWith("ilo")||e.endsWith("ime")||e.endsWith("och")))return e.substring(0,t-3);if(t>4&&(e.endsWith("ím")||e.endsWith("ám")||e.endsWith("am")||e.endsWith("us")||e.endsWith("ým")||e.endsWith("ym")||e.endsWith("mi")||e.endsWith("ou")||e.endsWith("om")||e.endsWith("ej")||e.endsWith("ov")||e.endsWith("ia")||e.endsWith("ie")||e.endsWith("iu")||e.endsWith("im")||e.endsWith("ho")||e.endsWith("mu")||e.endsWith("me")||e.endsWith("te")||e.endsWith("ať")||e.endsWith("aš")||e.endsWith("úť")||e.endsWith("iť")||e.endsWith("íš")||e.endsWith("iš")||e.endsWith("il")||e.endsWith("úc")||e.endsWith("eš")))return e.substring(0,t-2);if(t>3)switch(e[t-1]){case"a":case"e":case"i":case"o":case"u":case"ú":case"y":case"á":case"é":case"í":case"ý":return e.substring(0,t-1)}return e}((r=e).length>6&&r.startsWith("naj")?r.substr(3,r.length):r),(n=t.length)>5&&t.endsWith("in")||t.endsWith("ov")?t.substr(0,n-2):t);return o.length?function(e){var t=e.length;switch(e[t-1]){case"c":case"č":return e.replace(/./g,(function(e,n){return n===t-1?e:"k"}));case"ľ":return e.replace(/./g,(function(e,n){return n===t-1?e:"l"}));case"ň":return e.replace(/./g,(function(e,n){return n===t-1?e:"n"}));case"ť":return e.replace(/./g,(function(e,n){return n===t-1?e:"t"}))}return t>3&&"i"===e[t-3]&&("e"===e[t-2]||"a"===e[t-2]||"u"===e[t-2])?e.replace(/./g,(function(n,r){return r===t-3?e[t-2]:r===t-2?e[t-1]:n})):e}(o):o},e}();t.SlovakStemmer=n},2472:function(e,t,n){var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r};Object.defineProperty(t,"__esModule",{value:!0}),t.Color=void 0;var o=n(5928);function i(e){console.assert(e>=0),console.assert(e<=255)}var a=function(){function e(e,t,n,r){void 0===r&&(r=255),this.red=e,this.green=t,this.blue=n,this.alpha=r,i(e),i(t),i(n),i(r)}return Object.defineProperty(e.prototype,"rgb",{get:function(){return[this.red,this.green,this.blue]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rgbString",{get:function(){return"rgb("+this.red+", "+this.green+", "+this.blue+")"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rgba",{get:function(){return[this.red,this.green,this.blue,this.alpha]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"hex",{get:function(){return o.rgb2hex(Math.floor(this.red),Math.floor(this.green),Math.floor(this.blue))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"int",{get:function(){return o.rgb2int(this.red,this.green,this.blue)},enumerable:!1,configurable:!0}),e.fromHex=function(t){var n=o.hex2rgb(t);return new(e.bind.apply(e,r([void 0],n)))},e.fromInt=function(t){var n=o.int2rgb(t);return new(e.bind.apply(e,r([void 0],n)))},e.prototype.normalized=function(){return this.red>1||this.green>1||this.blue>1||this.alpha>1?new e(this.red/255,this.green/255,this.blue/255,this.alpha/255):this},e.BLACK=new e(0,0,0),e.WHITE=new e(255,255,255),e.GRAY=new e(128,128,128),e.RED=new e(255,0,0),e.GREEN=new e(0,255,0),e.BLUE=new e(0,0,255),e}();t.Color=a},7004:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GenderClass=t.parseGender=t.Gender=void 0;var n,r=/^(male|man|muz|boy|chlapec|m)$/g,o=/^(female|woman|zena|girl|dievca|f|w|z)$/g;function i(e){if(!e)return null;var t=e.trim().toLowerCase().replace("ž","z").replace("č","c");return t.match(r)?n.MAN:t.match(o)?n.WOMAN:null}!function(e){e.MAN="MAN",e.WOMAN="WOMAN"}(n=t.Gender||(t.Gender={})),t.parseGender=i;var a=function(){function e(){}return e.parse=i,e}();t.GenderClass=a},7554:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(7004),t),o(n(2472),t),o(n(7486),t),o(n(182),t),o(n(5863),t)},5863:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Path=void 0;var n=function(){function e(e){if(this.points=e,e.length<2)throw new Error("Cannot create path with less than 2 points")}return Object.defineProperty(e.prototype,"length",{get:function(){return this.points.length},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"first",{get:function(){return this.points[0]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"last",{get:function(){return this.points[this.points.length-1]},enumerable:!1,configurable:!0}),e.prototype.getPoint=function(e){return this.points[e]},e}();t.Path=n},182:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Range=void 0;var r=n(5928),o=n(2472),i=function(){function e(e,t){void 0===t&&(t=e),this.min=e,this.max=t}return e.random=function(e){return r.randomFloatBetween(e.min,e.max)},e.randomVector=function(e){return{x:r.randomFloatBetween(e.min.x,e.max.x),y:r.randomFloatBetween(e.min.y,e.max.y)}},e.randomColorF=function(e){return new o.Color(r.randomFloatBetween(e.min.red,e.max.red),r.randomFloatBetween(e.min.green,e.max.green),r.randomFloatBetween(e.min.blue,e.max.blue),r.randomFloatBetween(e.min.alpha,e.max.alpha))},e.randomColorI=function(e){return new o.Color(r.randomIntBetween(e.min.red,e.max.red),r.randomIntBetween(e.min.green,e.max.green),r.randomIntBetween(e.min.blue,e.max.blue),r.randomIntBetween(e.min.alpha,e.max.alpha))},e}();t.Range=i},7486:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getDefaultTransform=void 0,t.getDefaultTransform=function(){return{offset:{x:0,y:0},scale:1,rotation:0}}},6917:function(e,t){var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.fixSphere=t.fixPosSize=t.fixXYWH=void 0,t.fixXYWH=function(e,t){var n={x:t.x,y:t.y};return t.x<e.min.x?n.x=e.min.x:t.x+t.w>e.max.x&&(n.x=e.max.x-t.w),t.y<e.min.y?n.y=e.min.y:t.y+t.h>e.max.y&&(n.y=e.max.y-t.h),n},t.fixPosSize=function(e,t){var r=n({},t.position);return t.position.x<e.min.x?r.x=e.min.x:t.position.x+t.size.x>e.max.x&&(r.x=e.max.x-t.size.x),t.position.y<e.min.y?r.y=e.min.y:t.position.y+t.size.y>e.max.y&&(r.y=e.max.y-t.size.y),r},t.fixSphere=function(e,t){var r=n({},t.center),o=t.radius/2;return t.center.x-o<e.min.x?r.x=e.min.x+o:t.center.x+o>e.max.x&&(r.x=e.max.x-o),t.center.y-o<e.min.y?r.y=e.min.y+o:t.center.y+o>e.max.y&&(r.y=e.max.y-o),r}},3438:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pointLine2dClosest=void 0,t.pointLine2dClosest=function(e,t,n,r,o,i){var a=n-e,u=r-t,s=((o-e)*a+(i-t)*u)/(a*a+u*u);return s<0?{x:e,y:t}:s>1?{x:n,y:r}:{x:e+s*a,y:t+s*u}}},9890:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getClosestPointOnLine=void 0,t.getClosestPointOnLine=function(e,t,n,r,o,i,a,u,s){var c=r-e,l=o-t,f=i-n,p=(a-e)*c+(u-t)*l+(s-n)*f;return(p/=c*c+l*l+f*f)<0?{x:e,y:t,z:n}:p>1?{x:r,y:o,z:i}:{x:e+p*c,y:t+p*l,z:n+p*f}}},2899:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pointCircle2dCollision=t.pointRectMinMax2dCollision=t.pointRect2dCollision=t.circleCircle2dCollision=t.rectRect2dCollision=t.lineLine2dCollision=t.lineRectangle2dCollision=t.circleRect2dCollision=void 0;var r=n(7619);function o(e,t,n,r,o,i,a,u){var s=(n-e)*(u-i)-(r-t)*(a-o),c=(t-i)*(a-o)-(e-o)*(u-i),l=(t-i)*(n-e)-(e-o)*(r-t);if(0===s)return 0===c&&0===l;var f=c/s,p=l/s;return f>=0&&f<=1&&p>=0&&p<=1}function i(e,t,n,r,o,i){return e>=n&&t>=r&&e<=n+o&&t<=r+i}t.circleRect2dCollision=function(e,t,n,r,o,i,a){var u=Math.abs(e-r),s=Math.abs(t-o);return!(u>i/2+n)&&(!(s>a/2+n)&&(u<=i/2||(s<=a/2||Math.pow(u-r/2,2)+Math.pow(s-o/2,2)<=Math.pow(n,2))))},t.lineRectangle2dCollision=function(e,t,n,r,a,u,s,c){return i(e,t,a,u,s,c)||i(n,r,a,u,s,c)||o(e,t,n,r,a,u,a+s,u+c)||o(e,t,n,r,a+s,u,a,u+c)},t.lineLine2dCollision=o,t.rectRect2dCollision=function(e,t,n,r,o,i,a,u){return o+a>=e&&i+u>=t&&o<=e+n&&i<=t+r},t.circleCircle2dCollision=function(e,t,n,o,i,a){return r.pointPoint2dDistance(e,t,o,i)<=n+a},t.pointRect2dCollision=i,t.pointRectMinMax2dCollision=function(e,t,n,r,o,i){return e>=n&&t>=r&&e<=o&&t<=i},t.pointCircle2dCollision=function(e,t,n,o,i){return r.pointPoint2dDistance(e,t,n,o)<=i}},8381:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.testSphereBoxMinMax=t.sphereCylinder=t.pointCylinder=t.lineEllipsoid=t.pointEllipsoid=t.boxBox=t.lineSphere2=t.lineBox=t.pointBoxMinMax=t.pointBox=t.lineBox2=t.IntersectionType=t.lineSphere=t.pointSphere=t.sphereSphere=void 0;var r,o=n(3081),i=n(9890),a=n(7619),u=n(7239),s=n(3812);function c(e,t,n,r,o,i,a,u,s){var c=e-r,l=t-o,f=n-i;return c*c/(a*a)+l*l/(u*u)+f*f/(s*s)<=1}t.sphereSphere=function(e,t,n,r,o,i,a,s){return u.pointPoint3dDistance(e,t,n,o,i,a)<=r+s},t.pointSphere=function(e,t,n,r,o,i,a){return u.pointPoint3dDistance(e,t,n,r,o,i)<=a},t.lineSphere=function(e,t,n,r,o,i,a,s,c,l){return u.pointLine3dDistance(e,t,n,r,o,i,a,s,c)<l},function(e){e.OUTSIDE="OUTSIDE",e.INSIDE="INSIDE",e.ONE_INTERSECTION="ONE_INTERSECTION",e.TWO_INTERSECTION="TWO_INTERSECTION"}(r=t.IntersectionType||(t.IntersectionType={})),t.lineBox2=function(e,t,n,o,i,a,u,s,c,l,f,p,d){var h,y,v,g,m,b,_=1/(o-e),O=1/(i-t),x=1/(a-n);if(_>=0?(h=(u-e)*_,y=(l-e)*_):(h=(l-e)*_,y=(u-e)*_),O>=0?(v=(s-t)*O,g=(f-t)*O):(v=(f-t)*O,g=(s-t)*O),h>g||v>y)return r.OUTSIDE;if(x>=0?(m=(c-n)*x,b=(p-n)*x):(m=(p-n)*x,b=(c-n)*x),h>b||m>y)return r.OUTSIDE;h=m>(h=v>h||isNaN(h)?v:h)?m:h,y=b<(y=g<y||isNaN(y)?g:y)?b:y;var P=r.OUTSIDE;return h<y&&h<=1&&y>=0&&(h>0&&y>1?(y=h,P=r.ONE_INTERSECTION):h<0&&y<1?(h=y,P=r.ONE_INTERSECTION):P=h<0&&y>1?r.INSIDE:r.TWO_INTERSECTION,d.x=h,d.y=y),P},t.pointBox=function(e,t,n,r,o,i,a,u,s){return r<e&&r+a>e&&o<t&&o+u>t&&i<n&&i+s>n},t.pointBoxMinMax=function(e,t,n,r,o,i,a,u,s){return e>=r&&t>=o&&n>=i&&e<=a&&t>=o&&n<=s},t.lineBox=function(e,t,n,r,o,i,a,u,c,l,f,p){return s.vectorSquareIntersect3d(e,t,n,r,o,i,a-l,u+f,c-p,a-l,u-f,c-p,a+l,u+f,c-p)||s.vectorSquareIntersect3d(e,t,n,r,o,i,a-l,u+f,c+p,a-l,u-f,c+p,a+l,u-f,c+p)||s.vectorSquareIntersect3d(e,t,n,r,o,i,a+l,u+f,c+p,a+l,u-f,c+p,a+l,u+f,c-p)||s.vectorSquareIntersect3d(e,t,n,r,o,i,a-l,u+f,c+p,a-l,u-f,c+p,a-l,u+f,c-p)||s.vectorSquareIntersect3d(e,t,n,r,o,i,a+l,u+f,c+p,a-l,u+f,c+p,a+l,u+f,c-p)||s.vectorSquareIntersect3d(e,t,n,r,o,i,a+l,u-f,c+p,a-l,u-f,c+p,a+l,u-f,c-p)},t.lineSphere2=function(e,t,n,r,o,i,a,u,s,c){var l=r-e,f=o-t,p=i-n,d=((a-e)*l+(u-t)*f+(s-n)*p)/(l*l+f*f+p*p);if(d<0)l=e-a,f=t-u,p=n-s;else if(d>1)l=r-a,f=o-u,p=i-s;else{l=e+d*l-a,f=t+d*f-u,p=n+d*p-s}return l*l+f*f+p*p<=c},t.boxBox=function(e,t,n,r,o,i,a,u,s,c,l,f){return e+r>a&&a+c>e&&t+o>u&&u+l>t&&n+i>s&&s+f>n},t.pointEllipsoid=c,t.lineEllipsoid=function(e,t,n,r,o,a,u,s,l,f,p,d){var h=i.getClosestPointOnLine(e,t,n,r,o,a,u,s,l);return c(h.x,h.y,h.z,u,s,l,f,p,d)},t.pointCylinder=function(e,t,n,r,o,i,u,s){var c=t>o&&t<o+s,l=a.pointPoint2dDistance(e,n,r,i)<u;return c&&l},t.sphereCylinder=function(e,t,n,r,o,i,u,s,c){var l=t+r>i&&t-r<i+c,f=a.pointPoint2dDistance(e,n,o,u)<r+s;return l&&f},t.testSphereBoxMinMax=function(e,t,n,r,i,a,u,s,c,l){var f=r,p=function(e){var t=0;return e.z<e.x?t=e.z-e.x:e.z>e.y&&(t=e.z-e.y),t*t},d=new o.Vector3;return f-=p(d.setData(i,s,e)),f-=p(d.setData(a,c,t)),(f-=p(d.setData(u,l,n)))>=0}},7619:(e,t)=>{function n(e,t,n,o){return Math.sqrt(r(e,t,n,o))}function r(e,t,n,r){var o=e-n,i=t-r;return o*o+i*i}function o(e,t,n,r,o,i){var a,u,s=n-e,c=r-t,l=s*s+c*c,f=-1;0!==l&&(f=((o-e)*s+(i-t)*c)/l),f<0?(a=e,u=t):f>1?(a=n,u=r):(a=e+f*s,u=t+f*c);var p=o-a,d=i-u;return p*p+d*d}Object.defineProperty(t,"__esModule",{value:!0}),t.pointLineSqr2dDistance=t.pointLine2dDistance=t.pointCircleSqr2dDistance=t.pointCircle2dDistance=t.circleCircleSqr2dDistance=t.circleCircle2dDistance=t.pointPointSqr2dDistance=t.pointPoint2dDistance=void 0,t.pointPoint2dDistance=n,t.pointPointSqr2dDistance=r,t.circleCircle2dDistance=function(e,t,r,o,i,a){return Math.max(n(e,t,o,i)-a-r,0)},t.circleCircleSqr2dDistance=function(e,t,n,o,i,a){return Math.max(r(e,t,o,i)-a-n)},t.pointCircle2dDistance=function(e,t,r,o,i){return Math.max(n(e,t,r,o)-i,0)},t.pointCircleSqr2dDistance=function(e,t,n,o,i){return Math.max(r(e,t,n,o)-i,0)},t.pointLine2dDistance=function(e,t,n,r,i,a){return Math.sqrt(o(e,t,n,r,i,a))},t.pointLineSqr2dDistance=o},7239:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.vectorPoint3dDistance=t.pointNormalPlane3dDistance=t.pointLine3dDistance=t.pointPointSqr3dDistance=t.pointPoint3dDistance=void 0;var r=n(3081);function o(e,t,n,r,o,a){return Math.sqrt(i(e,t,n,r,o,a))}function i(e,t,n,r,o,i){var a=e-r,u=t-o,s=n-i;return a*a+u*u+s*s}function a(e,t,n,r,o,i,a,u,s){var c=e-r,l=t-o,f=n-i,p=r-a,d=o-u,h=i-s,y=l*h-f*d,v=f*p-c*h,g=c*d-l*p;return Math.sqrt(y*y+v*v+g*g)/Math.sqrt(c*c+l*l+f*f)}t.pointPoint3dDistance=o,t.pointPointSqr3dDistance=i,t.pointLine3dDistance=function(e,t,n,r,i,u,s,c,l){return(e-r)*(s-r)+(t-i)*(c-i)+(n-u)*(l-u)<0?o(s,c,l,r,i,u):(r-e)*(s-e)+(i-t)*(c-t)+(u-n)*(l-n)<0?o(s,c,l,e,t,n):a(e,t,n,r,i,u,s,c,l)},t.pointNormalPlane3dDistance=function(e,t,n){var o=-r.Vector3.mul(e,t).sum();return Math.abs((r.Vector3.mul(e,n).sum()+o)/Math.sqrt(r.Vector3.mul(e,e).sum()))},t.vectorPoint3dDistance=a},4991:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(3438),t),o(n(9890),t),o(n(2899),t),o(n(8381),t),o(n(7619),t),o(n(7239),t),o(n(6917),t),o(n(9305),t),o(n(3812),t)},3812:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.vectorSquareIntersect3d_2=t.vectorSquareIntersect3d=void 0;var r=n(3081);function o(e,t,n,o,i){var a=r.Vector3.sub(o,n),u=r.Vector3.sub(i,n),s=r.Vector3.sub(e,t),c=a.cross(u),l=c.dot(s);if(Math.abs(l)<1e-6)return!1;var f=-c.dot(r.Vector3.sub(e,n))/l,p=r.Vector3.add(e,s.mul(f)).sub(n),d=p.dot(a),h=p.dot(u);return d>=0&&d<=a.dot(a)&&h>=0&&h<=u.dot(u)}t.vectorSquareIntersect3d=function(e,t,n,i,a,u,s,c,l,f,p,d,h,y,v){return o(new r.Vector3(e,t,n),new r.Vector3(i,a,u),new r.Vector3(s,c,l),new r.Vector3(f,p,d),new r.Vector3(h,y,v))},t.vectorSquareIntersect3d_2=o},500:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Rect=void 0;var r=n(8219),o=function(){function e(e,t){this.position=e,this.size=t}return Object.defineProperty(e.prototype,"area",{get:function(){return this.size.x*this.size.y},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"circuit",{get:function(){return this.size.x+this.size.x+this.size.y+this.size.y},enumerable:!1,configurable:!0}),e.prototype.toMinMax=function(){return r.convertPosSizeToMinMax(this)},e.fromSphere=function(t){var n=t.radius,r=t.center;return e.fromMinMax({min:{x:r.x-n,y:r.y-n},max:{x:r.x+n,y:r.y+n}})},e.fromMinMax=function(t){var n=t.min,r=t.max,o={x:r.x-n.x,y:r.y-n.y};return new e(Object.assign({},n),o)},e}();t.Rect=o},1417:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Sphere=void 0;var r=n(8219),o=function(){function e(e,t){this.radius=e,this.center=t}return Object.defineProperty(e.prototype,"circuit",{get:function(){return 2*Math.PI*this.radius},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"area",{get:function(){return Math.PI*this.radius*this.radius},enumerable:!1,configurable:!0}),e.fromMinMax=function(t,n){var r=t.min,o=t.max;void 0===n&&(n="max");var i={x:(r.x+o.x)/2,y:(r.y+o.y)/2},a=o.x-r.x,u=o.y-r.y;return new e("min"===n?Math.min(a,u):Math.max(a,u),i)},e.fromPosSize=function(t,n){return void 0===n&&(n="max"),e.fromMinMax(r.convertPosSizeToMinMax(t),n)},e}();t.Sphere=o},9305:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(500),t),o(n(1417),t),o(n(8219),t)},8219:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.convertPosSizeToMinMax=t.convertMinMaxToPosSize=void 0,t.convertMinMaxToPosSize=function(e){var t=e.min,n=e.max;return{position:{x:t.x,y:t.y},size:{x:n.x-t.x,y:n.y-t.y}}},t.convertPosSizeToMinMax=function(e){var t=e.position,n=e.size;return{min:{x:t.x,y:t.y},max:{x:t.x+n.x,y:t.y+n.y}}}},4503:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractDatabaseFixture=void 0;var i=function(e){function t(t,n){var r=e.call(this,t)||this;return r.listDto=t.map(n.mapToDto,n),r.detailDto=r.listDto[0],r}return o(t,e),t}(n(3833).AbstractFixture);t.AbstractDatabaseFixture=i},3833:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractFixture=void 0;var n=function(e){this.list=e,this.detail=e[0]};t.AbstractFixture=n},2501:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractMapper=void 0;var n=function(){};t.AbstractMapper=n},4650:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PaginateModel=void 0;var n=function(){function e(t,n){void 0===t&&(t=e.ITEMS_PER_PAGE),void 0===n&&(n=0),this.limit=+t,this.offset=+n}return e.validate=function(t){return t?new e(isNaN(t.limit)?e.ITEMS_PER_PAGE:t.limit,isNaN(t.offset)?0:t.offset):new e},e.ITEMS_PER_PAGE=10,e}();t.PaginateModel=n},7899:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},3067:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},7281:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},5090:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},7147:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},1230:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(7899),t),o(n(7281),t),o(n(5090),t),o(n(3067),t),o(n(7147),t),o(n(8102),t),o(n(2638),t),o(n(6177),t),o(n(6717),t),o(n(287),t),o(n(8432),t),o(n(7e3),t),o(n(7602),t),o(n(8614),t),o(n(2578),t),o(n(8434),t),o(n(4088),t),o(n(9494),t),o(n(9487),t),o(n(8059),t)},8102:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},2638:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},6177:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},6717:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},287:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},8432:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},7e3:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},7602:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},8614:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},2578:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},8434:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},4088:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},9494:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},9487:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},8059:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},7858:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.hasMouse=t.isTouch=t.isChromeOs=t.isMac=t.isWin=t.isChromeApp=t.isIOS=t.isSafari=t.isEdge=t.isIE11=t.isIE6=t.isIE=void 0,t.isIE=function(){return navigator.userAgent.indexOf("MSIE")>=0},t.isIE6=function(){return navigator.userAgent.indexOf("MSIE 6")>=0},t.isIE11=function(){return!!navigator.userAgent.match(/Trident\/7\./)},t.isEdge=function(){return!!navigator.userAgent.match(/Edge\//)},t.isSafari=function(){return navigator.userAgent.indexOf("AppleWebKit/")>=0&&navigator.userAgent.indexOf("Chrome/")<0&&navigator.userAgent.indexOf("Edge/")<0},t.isIOS=function(){return!!navigator.userAgent.match(/(iPad|iPhone|iPod)/g)},t.isChromeApp=function(){var e,t,n;return null===(n=null===(t=null===(e=window)||void 0===e?void 0:e.chrome)||void 0===t?void 0:t.app)||void 0===n?void 0:n.runtime},t.isWin=function(){return navigator.appVersion.indexOf("Win")>0},t.isMac=function(){return navigator.appVersion.indexOf("Mac")>0},t.isChromeOs=function(){return/\bCrOS\b/.test(navigator.userAgent)},t.isTouch=function(){return"ontouchstart"in document.documentElement},t.hasMouse=function(){return"onmousemove"in document.documentElement}},6042:(e,t)=>{function n(e){return Array.isArray(e)?0===e.length?null:e[Math.floor(Math.random()*e.length)]:e}Object.defineProperty(t,"__esModule",{value:!0}),t.eachOther=t.makeUnique=t.getNRandom=t.getRandomItem=t.getLast=t.join=t.avg=t.sum=t.min=t.max=t.subArray=t.analyzeArrayChanges=t.compareArrays=t.where=void 0,t.where=function(e,t){if(!Array.isArray(e))return e;if(!t||"object"!=typeof t)return[];var n=[],r=Object.entries(t);return e.forEach((function(e){r.some((function(t){return e[t[0]]===t[1]}))&&(n[n.length]=e)})),n},t.compareArrays=function(e,t,n){if(void 0===n&&(n=function(e,t){return e===t}),e.length!==t.length)return!1;for(var r=0;r<e.length;r++)if(!n(e[r],t[r]))return!1;return!0},t.analyzeArrayChanges=function(e,t,n){void 0===n&&(n=function(e,t){return e===t});var r={},o=[],i=[];return t.forEach((function(t){var o=e.findIndex((function(e){return n(t,e)}));o<0?i.push(t):r[o]=!0})),e.forEach((function(e,t){t in r||o.push(e)})),{toAdd:i,toRemove:o}},t.subArray=function(e,t,n){if(void 0===t&&(t=0),void 0===n&&(n=e.length-1),!Array.isArray(e))return e;for(var r=[],o=e.length<n?e.length-1:n,i=t;i<=o;i++)r[r.length]=e[i];return r},t.max=function(e){return Array.isArray(e)?0===e.length?0:e.reduce((function(e,t){return e>t?e:t})):e},t.min=function(e){return Array.isArray(e)?0===e.length?0:e.reduce((function(e,t){return e<t?e:t})):e},t.sum=function(e){return Array.isArray(e)?0===e.length?0:e.reduce((function(e,t){return e+t})):e},t.avg=function(e){return Array.isArray(e)?0===e.length?0:e.reduce((function(e,t){return e+t}))/e.length:e},t.join=function(e,t,n,r){return void 0===n&&(n=""),void 0===r&&(r=""),Array.isArray(e)?n+e.join(t)+r:n+e+r},t.getLast=function(e){return Array.isArray(e)?e[e.length-1]:e},t.getRandomItem=n,t.getNRandom=function(e,t){if(!Array.isArray(e))return e;if(0===e.length||0===t)return[];if(e.length<=t)return e;for(var r=new Set;r.size<=t;){var o=n(e);o&&r.add(o)}return Array.from(r)},t.makeUnique=function(e){return Array.isArray(e)?Array.from(new Set(e)):e},t.eachOther=function(e,t){e.forEach((function(n,r){for(var o=r+1;o<e.length;o++)t(n,e[o])}))}},9240:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.coerceBooleanProperty=void 0,t.coerceBooleanProperty=function(e){return null!==e&&""+e!="false"}},8042:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.parseColor=t.rgb2int=t.hex2int=t.int2rgb=t.int2hex=t.rgb2hex=t.shadeColor=t.hex2rgb=t.lerpHexaColor=t.lerpColor=void 0;var r=n(5595),o={black:[0,0,0],white:[255,255,255],red:[255,0,0],green:[0,255,0],blue:[0,0,255]};function i(e){var t=parseInt(e.slice(1),16);return[t>>16,t>>8&255,255&t]}function a(e,t,n){return"#"+(16777216+65536*(e<255?e<1?0:e:255)+256*(t<255?t<1?0:t:255)+(n<255?n<1?0:n:255)).toString(16).slice(1)}t.lerpColor=function(e,t,n){var o=n*e[0]+(1-n)*t[0],i=n*e[1]+(1-n)*t[1],a=n*e[2]+(1-n)*t[2],u=n*e[3]+(1-n)*t[3];return[r.clamp(o,0,255),r.clamp(i,0,255),r.clamp(a,0,255),r.clamp(u,0,255)]},t.lerpHexaColor=function(e,t,n){var r=+e.replace("#","0x"),o=r>>16,i=r>>8&255,a=255&r,u=+t.replace("#","0x");return"#"+((1<<24)+(o+n*((u>>16)-o)<<16)+(i+n*((u>>8&255)-i)<<8)+(a+n*((255&u)-a))|0).toString(16).slice(1)},t.hex2rgb=i,t.shadeColor=function(e,t){var n=i(e),r=Math.round(2.55*t);return a(n[0]+r,n[1]+r,n[2]+r)},t.rgb2hex=a,t.int2hex=function(e){var t=e.toString(16);return"#"+("000000".substr(0,6-t.length)+t).toUpperCase()},t.int2rgb=function(e){return[e>>16,e>>8&255,255&e]},t.hex2int=function(e){return parseInt(e,16)},t.rgb2int=function(e,t,n){return e<<16|t<<8&65535|n},t.parseColor=function(e){if(o[e])return o[e];var t=e.match(/^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);if(t)return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)];var n=e.match(/rgba?\((\d{1,3}) *, *(\d{1,3}) *, *(\d{1,3})( *, *\d*.?\d*)\)/);if(n)return[parseInt(n[1],10),parseInt(n[2],10),parseInt(n[3],10)];throw new Error("Cannot parse color: "+e)}},7291:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isValidDate=void 0,t.isValidDate=function(e){try{var t=new Date(e);return!isNaN(t.getTime())}catch(e){return!1}}},2102:function(e,t,n){var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r};Object.defineProperty(t,"__esModule",{value:!0}),t.getOrCreateAndAppend=t.getOrCreate=t.chooseColorUsingDefaultInput=t.CreateElement=t.createCheckbox=t.CreateImage=t.dragElement=t.elementToString=void 0;var o=n(5601);function i(e,t){var n=document.createElement(e);return t?(Object.entries(t).forEach((function(e){switch(e[0]){case"className":n.className=e[1];break;case"onChange":n.addEventListener("change",e[1]);break;case"onClick":n.addEventListener("click",e[1]);break;case"checked":n.checked=e[1];break;case"styles":Object.entries(e[1]).forEach((function(e){n.style[e[0]]=e[1]}));break;case"children":Array.isArray(e[1])?n.append.apply(n,e[1]):n.append(e[1]);break;case"content":e[1]&&(n.innerHTML=e[1]);break;default:n.setAttribute(e[0],e[1])}})),n):n}function a(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var o=e.querySelector(t+"."+n.join("."));return o||i(t,{className:n.join(" ")})}t.elementToString=function e(t){var n=Array.from(t.classList).join("."),r=t.id?"#"+t.id:"";return(t.parentElement?e(t.parentElement)+" > ":"")+t.localName+r+(n?"."+n:"")},t.dragElement=function(e,t){void 0===t&&(t=".header");var n=0,r=0,o=0,i=0,a=function(t){(t=t||window.event).preventDefault(),n=o-t.clientX,r=i-t.clientY,o=t.clientX,i=t.clientY,e.style.top=e.offsetTop-r+"px",e.style.left=e.offsetLeft-n+"px"},u=function(e){(e=e||window.event).preventDefault(),o=e.clientX,i=e.clientY,document.onpointerup=c,document.onpointermove=a},s=e.querySelector(t);function c(){document.onpointerup=null,document.onpointermove=null}return s?s.addEventListener("pointerdown",u):e.addEventListener("pointerdown",u),{clear:function(){s?s.removeEventListener("pointerdown",u):e.removeEventListener("pointerdown",u)}}},t.CreateImage=function(e){var t=i("img",e);return o.ALLOW_IMAGES_ONLY_WITH_ALLOWED_CORS&&(t.crossOrigin="Anonymous"),t},t.createCheckbox=function(e,t,n){void 0===n&&(n=!1);var r=i("input",{checked:n,type:"checkbox",onChange:function(){return t(r.checked)}});return i("label",{className:"checkbox-container",children:[e,r,i("span",{className:"checkmark"})]})},t.CreateElement=i,t.chooseColorUsingDefaultInput=function(e,t){return void 0===e&&(e="#000000"),new Promise((function(n){var r=i("input",{type:"color",className:"hidden",value:e,onInput:"function"==typeof t?function(){return t(r.value)}:void 0,onChange:function(){n(r.value),document.body.removeChild(r)}});document.body.appendChild(r),r.click()}))},t.getOrCreate=a,t.getOrCreateAndAppend=function(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];var i=a.apply(void 0,r([e,t],n));return e.appendChild(i),i}},9199:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createImage=t.deserializeImage=t.serializeImage=void 0;var r=n(2102);t.serializeImage=function(e){var t=r.CreateElement("canvas",{width:e.width,height:e.height});return t.getContext("2d").drawImage(e,0,0),t.toDataURL("image/png")},t.deserializeImage=function(e){return r.CreateImage({src:e})},t.createImage=function(e,t,n){void 0===n&&(n=t);var o=r.CreateElement("canvas",{width:t,height:n});return e(o.getContext("2d")),o}},5928:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(7858),t),o(n(6042),t),o(n(9240),t),o(n(8042),t),o(n(7291),t),o(n(2102),t),o(n(9199),t),o(n(5595),t),o(n(5065),t),o(n(7799),t),o(n(1458),t),o(n(669),t),o(n(1054),t),o(n(8244),t),o(n(8476),t),o(n(1320),t),o(n(5429),t),o(n(7788),t),o(n(3683),t)},669:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.compareEventKey=t.getButtonFromEventButtons=t.getButtonFromEvent=void 0;var r=n(542);function o(e){return 0===e?r.Button.LEFT:1===e?r.Button.MIDDLE:2===e?r.Button.RIGHT:void 0}t.getButtonFromEvent=function(e){return o(e.button)},t.getButtonFromEventButtons=o,t.compareEventKey=function(e,t){return e.code===t}},5595:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.toDegrees=t.getDiff=t.isPowerOf2=t.average=t.random=t.randomInt=t.lamp=t.log2i=t.lerp=t.binomialCoefficient=t.clamp=t.hash2Numbers=t.roundToDecimals=t.pad=void 0;var a=i(n(5429));function u(e,t,n){return Math.max(t,Math.min(e,n))}t.pad=function(e,t){var n="00000000000000"+e;return n.substr(n.length-t)},t.roundToDecimals=function(e,t,n){void 0===t&&(t=2),void 0===n&&(n="round");var r=parseInt(1+new Array(t+1).join("0"),10);return(Math[n](e*r)/r).toFixed(t)},t.hash2Numbers=function(e,t){var n=e>=0?2*e:2*-e-1,r=t>=0?2*t:2*-t-1;return(n+r)*(n+r+1)/2+r},t.clamp=u,t.binomialCoefficient=function(e,t){var n=1;if(t>e)return 0;for(var r=1;r<=t;r++)n*=e,e--,n/=r;return n},t.lerp=function(e,t,n){return t*n+(1-n)*e},t.log2i=function(e){for(var t=0;(e>>=1)>0;)t++;return t},t.lamp=function(e,t,n){return u((t-e)*n+e,e,t)},t.randomInt=function(e,t){return a.randomIntBetween(e,t)},t.random=function(e,t){return a.randomFloatBetween(e,t)},t.average=function(e){for(var t=0,n=0,r=e;n<r.length;n++){t+=r[n]}return t/e.length},t.isPowerOf2=function(e){return 0==(e&e-1)},t.getDiff=function(e,t){return Math.abs(e-t)};var s=180/Math.PI;t.toDegrees=function(e){return e*s}},5065:(__unused_webpack_module,exports)=>{function parseCookies(e){var t={};return(e?e.toString().split(";"):[]).forEach((function(e){var n=e.split("="),r=n.shift();r&&(t[r.trim()]=decodeURI(n.join("=")))})),t}function isIn(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(Array.isArray(t[0])){if(t[0].indexOf(e)>=0)return!0}else if(t.indexOf(e)>=0)return!0;return!1}function parseJSONWithComments(e){return JSON.parse(e.replace(/\/\/.*\n/g,""))}function setCookie(e,t,n){var r=new Date;r.setTime(r.getTime()+24*n*60*60*1e3);var o=e+"="+t+";expires="+r.toUTCString();return"undefined"!=typeof document&&(document.cookie=o),e+"="+t}function getCookie(e,t){void 0===t&&(t="undefined"!=typeof document?document.cookie:"");for(var n=e+"=",r=0,o=t.split(";");r<o.length;r++){for(var i=o[r];" "===i.charAt(0);)i=i.substring(1);if(0===i.indexOf(n))return i.substring(n.length,i.length)}return""}function parseParams(e,t,n){void 0===e&&(e="undefined"!=typeof window?window.location.search.substring(1):""),void 0===t&&(t="&"),void 0===n&&(n="=");for(var r={},o=0,i=e.split(t);o<i.length;o++){var a=i[o].split(n),u=a[0],s=a[1];void 0===r[u]?r[u]=decodeURIComponent(s):"string"==typeof r[u]?r[u]=[r[u],decodeURIComponent(s)]:r[u].push(decodeURIComponent(s))}return r}function objectToQueryParams(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t+=(t.length>0?"&":"?")+n+"="+e[n]);return t}function serialize(e){for(var t in e)e.hasOwnProperty(t)&&"function"==typeof e[t]&&(e[t]=e[t].toString());return JSON.stringify(e)}function parse(obj){var result=JSON.parse(obj);for(var i in result)if(result.hasOwnProperty(i)&&"string"==typeof result[i]&&(0===result[i].indexOf("function (")||result[i].match(/^\([_a-zA-Z0-9]+( *, *[_a-zA-Z0-9]+)*\) *=>/)))try{eval("result[i] = "+result[i])}catch(e){result[i]=e}return result}function map(e,t){var n={};return t.forEach((function(t){t.mapFunction?t.attrD?n[t.attrD]=t.mapFunction(e[t.attrS]):n[t.attrS]=t.mapFunction(e[t.attrS]):t.attrD?n[t.attrD]=e[t.attrS]:n[t.attrS]=e[t.attrS]})),n}Object.defineProperty(exports,"__esModule",{value:!0}),exports.map=exports.parse=exports.serialize=exports.objectToQueryParams=exports.parseParams=exports.getCookie=exports.setCookie=exports.parseJSONWithComments=exports.isIn=exports.parseCookies=void 0,exports.parseCookies=parseCookies,exports.isIn=isIn,exports.parseJSONWithComments=parseJSONWithComments,exports.setCookie=setCookie,exports.getCookie=getCookie,exports.parseParams=parseParams,exports.objectToQueryParams=objectToQueryParams,exports.serialize=serialize,exports.parse=parse,exports.map=map},1054:(e,t)=>{function n(e){var t=[];for(var n in e)e.hasOwnProperty(n)&&t.push({key:n,value:e[n]});return t}Object.defineProperty(t,"__esModule",{value:!0}),t.makeFlat=t.isPlain=t.size=t.roughSizeOfObject=t.setNestedProperty=t.getNestedProperty=t.getObjectEntries=t.deepCopy=t.deepEqual=t.without=void 0,t.without=function(e,t){return n(e).filter((function(e){return!t.includes(e.key)})).reduce((function(e,t){return e[t.key]=t.value,e}),{})},t.deepEqual=function e(t,n){var r,o,i,a;if(typeof t!=typeof n)return!1;if("object"==typeof t){if(!t||!n)return t===n;if((null===(o=null===(r=t)||void 0===r?void 0:r.constructor)||void 0===o?void 0:o.name)!==(null===(a=null===(i=n)||void 0===i?void 0:i.constructor)||void 0===a?void 0:a.name))return!1;var u=Object.keys(t);if(u.length!==Object.keys(n).length)return!1;for(var s=0,c=u;s<c.length;s++){var l=c[s];if(!e(t[l],n[l]))return!1}return!0}return!("number"!=typeof t||"number"!=typeof n||!isNaN(+t)||!isNaN(+n))||t===n},t.deepCopy=function e(t){var n,r;if("object"==typeof t){if(Array.isArray(t))return t.map((function(t){return e(t)}));if("Object"!==(null===(r=null===(n=t)||void 0===n?void 0:n.constructor)||void 0===r?void 0:r.name))throw new Error("This method cannot copy class instances");var o={};return Object.entries(t).forEach((function(t){var n=t[0],r=t[1];o[n]=e(r)})),o}if("function"==typeof t)throw new Error("This method cannot copy functions");return t},t.getObjectEntries=n,t.getNestedProperty=function(e,t,n){return void 0===n&&(n="."),t.split(n).reduce((function(e,t){return e?e[t]:void 0}),e)},t.setNestedProperty=function(e,t,n){for(var r=t,o=e.split("."),i=0;i<o.length-1;i++)r=r[o[i]];r[o[o.length-1]]=n},t.roughSizeOfObject=function(e){for(var t=[],n=[e],r=0;n.length;){var o=n.pop();if("boolean"==typeof o)r+=4;else if("string"==typeof o)r+=o.length<<1;else if("number"==typeof o)r+=8;else if("object"==typeof o&&-1===t.indexOf(o))for(var i in t.push(o),o)o.hasOwnProperty(i)&&n.push(o[i])}return r},t.size=function(e){var t=0;for(var n in e)e.hasOwnProperty(n)&&t++;return t},t.isPlain=function(e){for(var t in e)if(e.hasOwnProperty(t)&&"object"==typeof e[t])return!1;return!0},t.makeFlat=function(e,t,n,r){void 0===n&&(n="."),void 0===r&&(r=!1);var o=t.indexOf(n)>=0?t.split(n):[t];return e.reduce((function(e,t){var n=o.reduce((function(e,t){return e?e[t]:void 0}),t);return void 0===n&&r||e.push(n),e}),[])}},8244:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.parseBooleanValue=void 0,t.parseBooleanValue=function(e){return!!e.match(/(1|true|yes|ano|áno)/i)||!e.match(/(0|false|no|nie)/i)&&void 0}},8476:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setDefaultEnvironment=t.getProcessData=t.setEnvironment=t.isDev=t.isProd=t.isTest=void 0,t.isTest=function(){return!1},t.isProd=function(){return!0},t.isDev=function(){return!1},t.setEnvironment=function(e){},t.getProcessData=function(){return{memoryUsage:process.memoryUsage(),cpuUsage:process.cpuUsage(),upTime:process.uptime(),version:process.version,platform:process.platform}},t.setDefaultEnvironment=function(){0}},5429:(e,t)=>{function n(e,t){return e+Math.random()*(t-e)}Object.defineProperty(t,"__esModule",{value:!0}),t.randomItem=t.randomBoolean=t.randomIntBetween=t.randomFloatBetween=void 0,t.randomFloatBetween=n,t.randomIntBetween=function(e,t){return Math.floor(n(e,t))},t.randomBoolean=function(){return Math.random()<.5},t.randomItem=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e[Math.floor(Math.random()*e.length)]}},1320:function(e,t){var n=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function u(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}s((r=r.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.callFirstFunction=t.createClass=void 0,t.createClass=function(e,t){var n=Object.create(e.prototype);return e.apply(n,t),n},t.callFirstFunction=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n(this,void 0,void 0,(function(){var t,n,o;return r(this,(function(r){switch(r.label){case 0:t=0,n=e,r.label=1;case 1:return t<n.length?"function"!=typeof(o=n[t])?[3,3]:[4,o()]:[3,4];case 2:return[2,r.sent()];case 3:return t++,[3,1];case 4:return[2]}}))}))}},1458:(e,t)=>{function n(e,t,n){for(var r=0,o=e.length-1;r<=o;){var i=o+r>>1,a=n(t,e[i]);if(a>0)r=i+1;else{if(!(a<0))return i;o=i-1}}return~r}Object.defineProperty(t,"__esModule",{value:!0}),t.sortedMerge=t.SortedPartition=t.SortedDifference=t.sortedPickAll=t.sortedRemove=t.sortedInsertAll=t.sortedInsert=t.sortedFind=t.binarySearch=void 0,t.binarySearch=n,t.sortedFind=function(e,t,r){var o=n(e,t,r);if(!(o<0))return e[o]},t.sortedInsert=function(e,t,r){var o=n(e,t,r),i=o<0?~o:o;return e.splice(i,0,t),i},t.sortedInsertAll=function(e,t,r,o){void 0===o&&(o=!1);for(var i=0,a=0,u=t;a<u.length;a++){var s=u[a];if(i=n(e.slice(i),s,r),o&&i>=0)break;i<0&&(i=~i),e.splice(i,0,s)}return t.length},t.sortedRemove=function(e,t,r){var o=n(e,t,r);if(!(o<0)){var i=e[o];return e.splice(o,1),i}},t.sortedPickAll=function(e,t,n){for(var r=0,o=0,i=[];r<t.length&&o<e.length;){var a=t[r],u=e[o],s=n(a,u);s>0?++o:s<0?++r:(i.push(u),++r,++o)}return i},t.SortedDifference=function(e,t,n){for(var r=0,o=0,i=[];r<t.length&&o<e.length;){var a=n(t[r],u=e[o]);a>0?(i.push(u),++o):a<0?++r:(++r,++o)}for(;o<e.length;){var u=e[o];i.push(u),++o}return i},t.SortedPartition=function(e,t,n){for(var r=0,o=0,i=[],a=[];r<t.length&&o<e.length;){var u=n(t[r],s=e[o]);u>0?(a.push(s),++o):u<0?++r:(i.push(s),++r,++o)}for(;o<e.length;){var s=e[o];a.push(s),++o}return[i,a]},t.sortedMerge=function(e,t,n){for(var r=0,o=0,i=[];r<t.length&&o<e.length;){var a=t[r],u=e[o],s=n(a,u);s>0?(i.push(u),++o):s<0?(i.push(a),++r):(i.push(a),++r,++o)}for(;r<t.length;){var c=t[r];i.push(c),++r}for(;o<e.length;){c=e[o];i.push(c),++o}return i}},7863:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.isValidEmail=t.isValidPhoneNumber=t.isTimeFormat=t.isSnakeCase=t.isUpperSnakeCase=t.isLowerSnakeCase=t.isLowerCamelCase=t.isUpperCamelCase=t.isCamelCase=void 0;var a=i(n(3254)),u={HH:"(2[0-3]|[01]\\d)",H:"(2[0-3]|[01]?\\d)",mm:"([0-5]\\d)",m:"([0-5]?\\d)",MM:"(0\\d|1[0-2]|\\d)",M:"([1-9]|1[0-2])",ss:"([0-5]\\d)",s:"([0-5]?\\d)",YYYY:"([1-9]\\d{3,3})",YY:"(\\d{2,2})",DD:"([0-3]\\d)"};t.isCamelCase=function(e){return new RegExp("^[A-Z]?[a-z]+([A-Z][a-z]*)*$","g").test(e)},t.isUpperCamelCase=function(e){return new RegExp("^([A-Z][a-z]*)*$","g").test(e)},t.isLowerCamelCase=function(e){return new RegExp("^[a-z]+([A-Z][a-z]*)*$","g").test(e)},t.isLowerSnakeCase=function(e){return new RegExp("^[a-z]*(_[a-z]*)*$","g").test(e)},t.isUpperSnakeCase=function(e){return new RegExp("^[A-Z]*(_[A-Z]*)*$","g").test(e)},t.isSnakeCase=function(e){return new RegExp("^([a-z]*|[A-Z]*)(_[a-zA-Z]*)*$","g").test(e)},t.isTimeFormat=function(e,t){for(var n in u)u.hasOwnProperty(n)&&(t=t.replace(n,u[n]));return new RegExp("^"+t+"$").test(e)},t.isValidPhoneNumber=function(e){return a.isValidPhoneNumber(e)},t.isValidEmail=function(e){return a.isValidEmail(e)}},7788:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.replaceForAll=t.getFormattedNumber=t.joinString=t.joinSingle=t.contains=t.toBasicForm=t.getAsciiArray=t.transformToBasicFormat=t.format=t.swapCase=t.collapseWhitespace=t.occurrences=t.between=t.removeEmptyLines=t.template=t.removeAll=t.repeat=t.count=t.getLastPart=t.toCapital=t.capitalize=t.toUpperCamelCase=t.toLowerCamelCase=t.toLowerSnakeCase=t.toUpperSnakeCase=t.cutUsing=t.removeAccentedCharacters=void 0;var a=n(6042),u=i(n(7863)),s="ąàáäâãåæăćčĉďęèéëêĝĥìíïîĵłľńňòóöőôõðøśșşšŝťțţŭùúüűûñÿýçżźž",c="aaaaaaaaacccdeeeeeghiiiijllnnoooooooossssstttuuuuuunyyczzz",l=s+s.toUpperCase(),f=c+c.toUpperCase();function p(e){return e&&e.replace?e.replace(/./g,(function(e){var t=l.indexOf(e);return t>=0?f[t]:e})):e}function d(e){return u.isLowerCamelCase(e)?e:e.trim().replace(/([a-z])([A-Z])([A-Z])/g,"$1$2_$3").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase().replace(/(-|_| |\s)+(.)?/g,(function(e,t,n){return n?n.toUpperCase():""})).replace(/^./,(function(e){return e.toLowerCase()}))}function h(e){return e.replace(/^./,(function(e){return e.toUpperCase()}))}function y(e){return e.replace(/[\s\uFEFF\xA0]{2,}/g," ")}t.removeAccentedCharacters=p,t.cutUsing=function(e,t,n,r){return void 0===n&&(n="..."),void 0===r&&(r=!0),e.length<=t?e:e.substr(0,t-(r?n.length-1:0))+n},t.toUpperSnakeCase=function(e){return u.isCamelCase(e)?e.replace(/([a-z])([A-Z])/g,"$1_$2").replace(/([A-Z])([A-Z])/g,"$1_$2").toUpperCase():u.isUpperSnakeCase(e)?e:e.replace(/(-|_| |\s)+(.)?/g,(function(e,t,n){return n?"_"+n:""})).replace(/^_/,"").toUpperCase()},t.toLowerSnakeCase=function(e){return u.isCamelCase(e)?e.replace(/([a-z])([A-Z])/g,"$1_$2").replace(/([A-Z])([A-Z])/g,"$1_$2").toLowerCase():u.isLowerSnakeCase(e)?e:e.replace(/(-|_| |\s)+(.)?/g,(function(e,t,n){return n?"_"+n:""})).replace(/^_/,"").toLowerCase()},t.toLowerCamelCase=d,t.toUpperCamelCase=function(e){return u.isUpperCamelCase(e)?e:h(d(e))},t.capitalize=function(e){return e.toLowerCase().replace(/^./,(function(e){return e.toUpperCase()}))},t.toCapital=h,t.getLastPart=function(e,t){if(void 0===t&&(t=" "),!e||!e.split)return e;var n=e.split(t);return n[n.length-1]},t.count=function(e,t){return(e.match(new RegExp(t,"g"))||[]).length},t.repeat=function(e,t){return new Array(t+1).join(e)},t.removeAll=function(e,t){return e.replace(new RegExp("("+t.join("|")+")","g"),"")},t.template=function(e,t,n,r){void 0===n&&(n="{{"),void 0===r&&(r="}}");var o=n.replace(/[-[\]()*\s]/g,"\\$&").replace(/\$/g,"\\$"),i=r.replace(/[-[\]()*\s]/g,"\\$&").replace(/\$/g,"\\$");return e.replace(new RegExp(o+"(.+?)"+i,"g"),(function(e,n){return String(t[n])}))},t.removeEmptyLines=function(e){return e.replace(/^\s*$(?:\r\n?|\n)/gm,"")},t.between=function(e,t,n,r){void 0===r&&(r=!1);var o=function(e){return r?e.trim():e},i=e.indexOf(t),a=e.indexOf(n);return o(i<0&&a>=0?e.substring(0,a):a<0&&i>=0?e.substring(i+t.length,e.length):e.substring(i+t.length,a))},t.occurrences=function(e,t,n){void 0===n&&(n=!1);for(var r=e.indexOf(t),o=0,i=n?1:t.length;r>=0;)o++,r=e.indexOf(t,r+i);return o},t.collapseWhitespace=y,t.swapCase=function(e){return e.replace(/\S/g,(function(e){var t=e.toLowerCase();return t===e?e.toUpperCase():t}))},t.format=function(e,t,n){void 0===n&&(n="{}");for(var r,o=[],i=0,a=0;a<t.length;)r=i,i=e.indexOf(n,i),o.push(e.substring(r,i)),o.push(t[a++]),i+=n.length;return o.push(e.substring(i)),o.join("")},t.transformToBasicFormat=function(e){return y(p(e).toLowerCase()).trim()},t.getAsciiArray=function(e){for(var t=[],n=0,r=e;n<r.length;n++){var o=r[n];t[t.length]=o.charCodeAt(0)}return t},t.toBasicForm=function(e){return p(e.toLowerCase())},t.contains=function(e,t){return!!e&&p(e.toLowerCase()).indexOf(t)>=0},t.joinSingle=function(e,t,n){return n.startsWith(t)&&e.endsWith(t)?e+n.substring(t.length):n.startsWith(t)||e.endsWith(t)?e+n:e+t+n},t.joinString=function(e,t,n,r){return void 0===t&&(t=" "),void 0===n&&(n=""),void 0===r&&(r=""),a.join(e,t,n,r)},t.getFormattedNumber=function(e,t){return void 0===t&&(t="+421"),(e=e.replace(/[( )/-]/g,"")).startsWith("+")?e:e.startsWith("00")?e.substring(2):e.startsWith("09")||e.startsWith("02")?t+e.substring(1):e},t.replaceForAll=function(e,t,n){return t.map((function(t){return e.replace(n,t)}))}},3683:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getTransform=t.createSvg=void 0;t.createSvg=function(e){return document.createElementNS("http://www.w3.org/2000/svg",e)},t.getTransform=function(e){var t=e.transform.baseVal;if(0===t.numberOfItems||t.getItem(0).type!==SVGTransform.SVG_TRANSFORM_TRANSLATE){var n=e.ownerSVGElement.createSVGTransform();n.setTranslate(0,0),e.transform.baseVal.insertItemBefore(n,0)}return t.getItem(0)}},7799:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getEndOfTheDay=t.getStartOfTheDay=t.createStopWatch=t.formatTime=t.dateAgo=void 0;var n=Object.entries({year:31536e3,month:2592e3,week:604800,day:86400,hour:3600,minute:60,second:1});function r(e,t){return e?(isNaN(t.ms)||e.setMilliseconds(t.ms),isNaN(t.s)||e.setSeconds(t.s),isNaN(t.m)||e.setMinutes(t.m),isNaN(t.h)||e.setHours(t.h),e):new Date("")}t.dateAgo=function(e){if(e){var t=Math.floor((+new Date-+new Date(e))/1e3);if(t<29)return"Just now";for(var r=void 0,o=0,i=n;o<i.length;o++){var a=i[o],u=a[0],s=a[1];if(!((r=Math.floor(t/s))<=0))return 1===r?r+" "+u+" ago":r+" "+u+"s ago"}}return e},t.formatTime=function(e,t){var n=function(e){return e<10?"0"+e:""+e},r=new RegExp("(DD|MM|YYYY|YYY|YY|HH|mm|SS)","g"),o=n(e.getDate()),i=n(e.getMonth()+1),a=e.getFullYear()+"",u=a.substr(1,4),s=u.substr(1,4),c=n(e.getHours()),l=n(e.getMinutes()),f=n(e.getSeconds());return t.replace(r,(function(e){switch(e){case"DD":return o;case"MM":return i;case"YYYY":return a;case"YYY":return u;case"YY":return s;case"HH":return c;case"mm":return l;case"SS":return f;default:return e}}))},t.createStopWatch=function(){var e=Date.now(),t=function(){return Date.now()-e};return{getDiffMs:t,getDiff:function(){return t()+"ms"}}},t.getStartOfTheDay=function(e){return r(e,{ms:0,s:0,m:0,h:0})},t.getEndOfTheDay=function(e){return r(e,{ms:999,s:59,m:59,h:23})}},3871:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(3254),t)},3254:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isValidEmail=t.isValidPhoneNumber=t.isEmpty=t.isElement=t.isUndefined=t.isFloat=t.isInt=t.isArray=t.isBoolean=t.isNumber=t.isObject=t.isString=t.isFunction=void 0;var n=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/i,r=/^([+]|00)?[(]?[0-9]{3,4}[)]?[-\s.]?[0-9]{2,3}[-\s.]?[0-9]{2,6}([-\s.]?[0-9]{3})?$/im;function o(e){return typeof e}function i(e){return"object"===o(e)}t.isFunction=function(e){return"function"===o(e)},t.isString=function(e){return"string"===o(e)},t.isObject=i,t.isNumber=function(e){return"number"===o(e)},t.isBoolean=function(e){return"boolean"===o(e)},t.isArray=function(e){return Array.isArray(e)},t.isInt=function(e){return"number"===o(e)&&e%1==0},t.isFloat=function(e){return"number"===o(e)&&e%1!=0},t.isUndefined=function(e){return"undefined"===o(e)},t.isElement=function(e){try{return e instanceof HTMLElement}catch(t){return i(e)&&1===e.nodeType&&i(e.style)&&i(e.ownerDocument)}},t.isEmpty=function(e){return null==e||("string"==typeof e?0===e.length||/^[\s\xa0]*$/.test(e):Array.isArray(e)?0===e.length:e.constructor===Object&&0===Object.keys(e).length)},t.isValidPhoneNumber=function(e){return!!e&&r.test(e.trim())},t.isValidEmail=function(e){return!!e&&n.test(e.trim())}}},__webpack_module_cache__={};function __webpack_require__(e){if(__webpack_module_cache__[e])return __webpack_module_cache__[e].exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(t.exports,t,t.exports,__webpack_require__),t.exports}return __webpack_require__(3607)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,