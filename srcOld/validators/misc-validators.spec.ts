import { expect } from "chai";
import "mocha";
import * as Checkers from "./misc-validators";

describe("Checkers", () => {
    it("It check if parameter is function", () => {
        expect(Checkers.isFunction(() => undefined)).to.be.true;
        expect(Checkers.isFunction(false)).to.be.false;
        expect(Checkers.isFunction(12)).to.be.false;
        expect(Checkers.isFunction(1.2)).to.be.false;
        expect(Checkers.isFunction({})).to.be.false;
        expect(Checkers.isFunction([])).to.be.false;
        expect(Checkers.isFunction({a: "aa"})).to.be.false;
        expect(Checkers.isFunction([1, "a"])).to.be.false;
        expect(Checkers.isFunction(undefined)).to.be.false;
        expect(Checkers.isFunction(null)).to.be.false;
        expect(Checkers.isFunction("test")).to.be.false;
        expect(Checkers.isFunction("")).to.be.false;
    });
    it("It check if parameter is number", () => {
        expect(Checkers.isNumber(() => undefined)).to.be.false;
        expect(Checkers.isNumber(false)).to.be.false;
        expect(Checkers.isNumber(12)).to.be.true;
        expect(Checkers.isNumber(1.2)).to.be.true;
        expect(Checkers.isNumber({})).to.be.false;
        expect(Checkers.isNumber([])).to.be.false;
        expect(Checkers.isNumber({a: "aa"})).to.be.false;
        expect(Checkers.isNumber([1, "a"])).to.be.false;
        expect(Checkers.isNumber(undefined)).to.be.false;
        expect(Checkers.isNumber(null)).to.be.false;
        expect(Checkers.isNumber("test")).to.be.false;
        expect(Checkers.isNumber("")).to.be.false;
    });
    it("It check if parameter is number", () => {
        expect(Checkers.isBoolean(() => undefined)).to.be.false;
        expect(Checkers.isBoolean(false)).to.be.true;
        expect(Checkers.isBoolean(12)).to.be.false;
        expect(Checkers.isBoolean(1.2)).to.be.false;
        expect(Checkers.isBoolean({})).to.be.false;
        expect(Checkers.isBoolean([])).to.be.false;
        expect(Checkers.isBoolean({a: "aa"})).to.be.false;
        expect(Checkers.isBoolean([1, "a"])).to.be.false;
        expect(Checkers.isBoolean(undefined)).to.be.false;
        expect(Checkers.isBoolean(null)).to.be.false;
        expect(Checkers.isBoolean("test")).to.be.false;
        expect(Checkers.isBoolean("")).to.be.false;
    });
    it("It check if parameter is object", () => {
        expect(Checkers.isObject(() => undefined)).to.be.true;
        expect(Checkers.isObject(false)).to.be.false;
        expect(Checkers.isObject(12)).to.be.false;
        expect(Checkers.isObject(1.2)).to.be.false;
        expect(Checkers.isObject({})).to.be.true;
        expect(Checkers.isObject([])).to.be.true;
        expect(Checkers.isObject({a: "aa"})).to.be.true;
        expect(Checkers.isObject([1, "a"])).to.be.true;
        expect(Checkers.isObject(undefined)).to.be.false;
        expect(Checkers.isObject(null)).to.be.false;
        expect(Checkers.isObject("test")).to.be.false;
        expect(Checkers.isObject("")).to.be.false;
    });
    it("It check if parameter is string", () => {
        expect(Checkers.isString(() => undefined)).to.be.false;
        expect(Checkers.isString(false)).to.be.false;
        expect(Checkers.isString(12)).to.be.false;
        expect(Checkers.isString(1.2)).to.be.false;
        expect(Checkers.isString({})).to.be.false;
        expect(Checkers.isString([])).to.be.false;
        expect(Checkers.isString({a: "aa"})).to.be.false;
        expect(Checkers.isString([1, "a"])).to.be.false;
        expect(Checkers.isString(undefined)).to.be.false;
        expect(Checkers.isString(null)).to.be.false;
        expect(Checkers.isString("test")).to.be.true;
        expect(Checkers.isString("")).to.be.true;
    });
    it("It check if parameter is float", () => {
        expect(Checkers.isFloat(() => undefined)).to.be.false;
        expect(Checkers.isFloat(false)).to.be.false;
        expect(Checkers.isFloat(12)).to.be.false;
        expect(Checkers.isFloat(1.2)).to.be.true;
        expect(Checkers.isFloat({})).to.be.false;
        expect(Checkers.isFloat([])).to.be.false;
        expect(Checkers.isFloat({a: "aa"})).to.be.false;
        expect(Checkers.isFloat([1, "a"])).to.be.false;
        expect(Checkers.isFloat(undefined)).to.be.false;
        expect(Checkers.isFloat(null)).to.be.false;
        expect(Checkers.isFloat("test")).to.be.false;
        expect(Checkers.isFloat("")).to.be.false;
    });
    it("It check if parameter is integer", () => {
        expect(Checkers.isInt(() => undefined)).to.be.false;
        expect(Checkers.isInt(false)).to.be.false;
        expect(Checkers.isInt(12)).to.be.true;
        expect(Checkers.isInt(1.2)).to.be.false;
        expect(Checkers.isInt({})).to.be.false;
        expect(Checkers.isInt([])).to.be.false;
        expect(Checkers.isInt({a: "aa"})).to.be.false;
        expect(Checkers.isInt([1, "a"])).to.be.false;
        expect(Checkers.isInt(undefined)).to.be.false;
        expect(Checkers.isInt(null)).to.be.false;
        expect(Checkers.isInt("test")).to.be.false;
        expect(Checkers.isInt("")).to.be.false;
    });
    it("It check if parameter is empty", () => {
        expect(Checkers.isEmpty(() => undefined)).to.be.true;
        expect(Checkers.isEmpty(false)).to.be.false;
        expect(Checkers.isEmpty(12)).to.be.false;
        expect(Checkers.isEmpty(1.2)).to.be.false;
        expect(Checkers.isEmpty({})).to.be.true;
        expect(Checkers.isEmpty([])).to.be.true;
        expect(Checkers.isEmpty({a: "aa"})).to.be.false;
        expect(Checkers.isEmpty([1, "a"])).to.be.false;
        expect(Checkers.isEmpty(undefined)).to.be.true;
        expect(Checkers.isEmpty(null)).to.be.true;
        expect(Checkers.isEmpty("test")).to.be.false;
        expect(Checkers.isEmpty("")).to.be.true;
    });
    it("It check if parameter is undefined", () => {
        expect(Checkers.isUndefined(() => undefined)).to.be.false;
        expect(Checkers.isUndefined(false)).to.be.false;
        expect(Checkers.isUndefined(12)).to.be.false;
        expect(Checkers.isUndefined(1.2)).to.be.false;
        expect(Checkers.isUndefined({})).to.be.false;
        expect(Checkers.isUndefined([])).to.be.false;
        expect(Checkers.isUndefined({a: "aa"})).to.be.false;
        expect(Checkers.isUndefined([1, "a"])).to.be.false;
        expect(Checkers.isUndefined(undefined)).to.be.true;
        expect(Checkers.isUndefined(null)).to.be.false;
        expect(Checkers.isUndefined("test")).to.be.false;
        expect(Checkers.isUndefined("")).to.be.false;
    });
    it("It check if parameter is array", () => {
        expect(Checkers.isArray(() => undefined)).to.be.false;
        expect(Checkers.isArray(false)).to.be.false;
        expect(Checkers.isArray(12)).to.be.false;
        expect(Checkers.isArray(1.2)).to.be.false;
        expect(Checkers.isArray({})).to.be.false;
        expect(Checkers.isArray([])).to.be.true;
        expect(Checkers.isArray({a: "aa"})).to.be.false;
        expect(Checkers.isArray([1, "a"])).to.be.true;
        expect(Checkers.isArray(undefined)).to.be.false;
        expect(Checkers.isArray(null)).to.be.false;
        expect(Checkers.isArray("test")).to.be.false;
        expect(Checkers.isArray("")).to.be.false;
    });
});
